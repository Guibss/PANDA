
Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a01c  0800a01c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a01c  0800a01c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a01c  0800a01c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a01c  0800a01c  0001a01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001368  20000180  0800a1a4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e8  0800a1a4  000214e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188c8  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b03  00000000  00000000  00038a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003c578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  0003d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a33f  00000000  00000000  0003e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127a8  00000000  00000000  00058be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000838c8  00000000  00000000  0006b38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eec57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000405c  00000000  00000000  000eecd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009de8 	.word	0x08009de8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	08009de8 	.word	0x08009de8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <getAnalogRead>:
uint32_t adc_dma_arr[3];

TIM_HandleTypeDef *pwm_timer;


uint16_t getAnalogRead(uint8_t in){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
	return adc_dma_arr[in];
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <getAnalogRead+0x20>)
 8000406:	0092      	lsls	r2, r2, #2
 8000408:	58d3      	ldr	r3, [r2, r3]
 800040a:	b29b      	uxth	r3, r3
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000408 	.word	0x20000408

08000418 <setEncoderCount>:

void setEncoderCount(uint32_t ncount){
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	enc_pin_state = 2 * HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) + HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	009a      	lsls	r2, r3, #2
 8000424:	2390      	movs	r3, #144	; 0x90
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f002 fab0 	bl	8002990 <HAL_GPIO_ReadPin>
 8000430:	0003      	movs	r3, r0
 8000432:	18db      	adds	r3, r3, r3
 8000434:	b2dc      	uxtb	r4, r3
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	00da      	lsls	r2, r3, #3
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	0011      	movs	r1, r2
 8000440:	0018      	movs	r0, r3
 8000442:	f002 faa5 	bl	8002990 <HAL_GPIO_ReadPin>
 8000446:	0003      	movs	r3, r0
 8000448:	18e3      	adds	r3, r4, r3
 800044a:	b2da      	uxtb	r2, r3
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <setEncoderCount+0x48>)
 800044e:	701a      	strb	r2, [r3, #0]
	encoder_count = ncount;
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <setEncoderCount+0x4c>)
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b003      	add	sp, #12
 800045c:	bd90      	pop	{r4, r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	2000019c 	.word	0x2000019c
 8000464:	200001a0 	.word	0x200001a0

08000468 <setEncoderMode>:

void setEncoderMode(uint8_t mode){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	0002      	movs	r2, r0
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	701a      	strb	r2, [r3, #0]
	encoder_mode = mode;
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <setEncoderMode+0x1c>)
 8000476:	1dfa      	adds	r2, r7, #7
 8000478:	7812      	ldrb	r2, [r2, #0]
 800047a:	701a      	strb	r2, [r3, #0]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200001a4 	.word	0x200001a4

08000488 <getEncoderMode>:
uint8_t getEncoderMode(){
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	return encoder_mode;
 800048c:	4b02      	ldr	r3, [pc, #8]	; (8000498 <getEncoderMode+0x10>)
 800048e:	781b      	ldrb	r3, [r3, #0]
}
 8000490:	0018      	movs	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	200001a4 	.word	0x200001a4

0800049c <getEncoderCount>:

uint32_t getEncoderCount(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	return encoder_count;
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <getEncoderCount+0x10>)
 80004a2:	681b      	ldr	r3, [r3, #0]
}
 80004a4:	0018      	movs	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	200001a0 	.word	0x200001a0

080004b0 <encoderController>:

void encoderController(){
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
	static uint32_t pwm_rising_edge = 0;
	static uint32_t pwm_duty_period = 0;
	static uint32_t pwm_period = 0;

	if(encoder_mode == ENCODER_QUADRATURE_MODE){
 80004b6:	4b5d      	ldr	r3, [pc, #372]	; (800062c <encoderController+0x17c>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d000      	beq.n	80004c0 <encoderController+0x10>
 80004be:	e080      	b.n	80005c2 <encoderController+0x112>
		uint8_t enc_pins_reading = 2 * HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) + HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	009a      	lsls	r2, r3, #2
 80004c4:	2390      	movs	r3, #144	; 0x90
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fa60 	bl	8002990 <HAL_GPIO_ReadPin>
 80004d0:	0003      	movs	r3, r0
 80004d2:	18db      	adds	r3, r3, r3
 80004d4:	b2dc      	uxtb	r4, r3
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	00da      	lsls	r2, r3, #3
 80004da:	2390      	movs	r3, #144	; 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 fa55 	bl	8002990 <HAL_GPIO_ReadPin>
 80004e6:	0003      	movs	r3, r0
 80004e8:	001a      	movs	r2, r3
 80004ea:	1cfb      	adds	r3, r7, #3
 80004ec:	18a2      	adds	r2, r4, r2
 80004ee:	701a      	strb	r2, [r3, #0]
		switch(enc_pin_state){
 80004f0:	4b4f      	ldr	r3, [pc, #316]	; (8000630 <encoderController+0x180>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d044      	beq.n	8000582 <encoderController+0xd2>
 80004f8:	dc02      	bgt.n	8000500 <encoderController+0x50>
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d005      	beq.n	800050a <encoderController+0x5a>
 80004fe:	e05b      	b.n	80005b8 <encoderController+0x108>
 8000500:	2b02      	cmp	r3, #2
 8000502:	d016      	beq.n	8000532 <encoderController+0x82>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d028      	beq.n	800055a <encoderController+0xaa>
 8000508:	e056      	b.n	80005b8 <encoderController+0x108>
		case 0:
			if(enc_pins_reading == 2){
 800050a:	1cfb      	adds	r3, r7, #3
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d105      	bne.n	800051e <encoderController+0x6e>
				encoder_count++;
 8000512:	4b48      	ldr	r3, [pc, #288]	; (8000634 <encoderController+0x184>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	4b46      	ldr	r3, [pc, #280]	; (8000634 <encoderController+0x184>)
 800051a:	601a      	str	r2, [r3, #0]
			}else if(enc_pins_reading == 1){
				encoder_count--;
			}
			break;
 800051c:	e045      	b.n	80005aa <encoderController+0xfa>
			}else if(enc_pins_reading == 1){
 800051e:	1cfb      	adds	r3, r7, #3
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d141      	bne.n	80005aa <encoderController+0xfa>
				encoder_count--;
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <encoderController+0x184>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	1e5a      	subs	r2, r3, #1
 800052c:	4b41      	ldr	r3, [pc, #260]	; (8000634 <encoderController+0x184>)
 800052e:	601a      	str	r2, [r3, #0]
			break;
 8000530:	e03b      	b.n	80005aa <encoderController+0xfa>
		case 2:
			if(enc_pins_reading == 3){
 8000532:	1cfb      	adds	r3, r7, #3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b03      	cmp	r3, #3
 8000538:	d105      	bne.n	8000546 <encoderController+0x96>
				encoder_count++;
 800053a:	4b3e      	ldr	r3, [pc, #248]	; (8000634 <encoderController+0x184>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <encoderController+0x184>)
 8000542:	601a      	str	r2, [r3, #0]
			}else if(enc_pins_reading == 0){
				encoder_count--;
			}
			break;
 8000544:	e033      	b.n	80005ae <encoderController+0xfe>
			}else if(enc_pins_reading == 0){
 8000546:	1cfb      	adds	r3, r7, #3
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d12f      	bne.n	80005ae <encoderController+0xfe>
				encoder_count--;
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <encoderController+0x184>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4b37      	ldr	r3, [pc, #220]	; (8000634 <encoderController+0x184>)
 8000556:	601a      	str	r2, [r3, #0]
			break;
 8000558:	e029      	b.n	80005ae <encoderController+0xfe>
		case 3:
			if(enc_pins_reading == 1){
 800055a:	1cfb      	adds	r3, r7, #3
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d105      	bne.n	800056e <encoderController+0xbe>
					encoder_count++;
 8000562:	4b34      	ldr	r3, [pc, #208]	; (8000634 <encoderController+0x184>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	4b32      	ldr	r3, [pc, #200]	; (8000634 <encoderController+0x184>)
 800056a:	601a      	str	r2, [r3, #0]
				}else if(enc_pins_reading == 2){
					encoder_count--;
				}
			break;
 800056c:	e021      	b.n	80005b2 <encoderController+0x102>
				}else if(enc_pins_reading == 2){
 800056e:	1cfb      	adds	r3, r7, #3
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d11d      	bne.n	80005b2 <encoderController+0x102>
					encoder_count--;
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <encoderController+0x184>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <encoderController+0x184>)
 800057e:	601a      	str	r2, [r3, #0]
			break;
 8000580:	e017      	b.n	80005b2 <encoderController+0x102>
		case 1:
			if(enc_pins_reading == 0){
 8000582:	1cfb      	adds	r3, r7, #3
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d105      	bne.n	8000596 <encoderController+0xe6>
					encoder_count++;
 800058a:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <encoderController+0x184>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <encoderController+0x184>)
 8000592:	601a      	str	r2, [r3, #0]
				}else if(enc_pins_reading == 3){
					encoder_count--;
				}
			break;
 8000594:	e00f      	b.n	80005b6 <encoderController+0x106>
				}else if(enc_pins_reading == 3){
 8000596:	1cfb      	adds	r3, r7, #3
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b03      	cmp	r3, #3
 800059c:	d10b      	bne.n	80005b6 <encoderController+0x106>
					encoder_count--;
 800059e:	4b25      	ldr	r3, [pc, #148]	; (8000634 <encoderController+0x184>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <encoderController+0x184>)
 80005a6:	601a      	str	r2, [r3, #0]
			break;
 80005a8:	e005      	b.n	80005b6 <encoderController+0x106>
			break;
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	e004      	b.n	80005b8 <encoderController+0x108>
			break;
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	e002      	b.n	80005b8 <encoderController+0x108>
			break;
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	e000      	b.n	80005b8 <encoderController+0x108>
			break;
 80005b6:	46c0      	nop			; (mov r8, r8)
		}
		enc_pin_state = enc_pins_reading;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <encoderController+0x180>)
 80005ba:	1cfa      	adds	r2, r7, #3
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	701a      	strb	r2, [r3, #0]
		}else{
			pwm_duty_period = acc_tick - pwm_rising_edge;
			encoder_pwm_duty = 4096 * pwm_duty_period / pwm_period;
		}
	}
}
 80005c0:	e030      	b.n	8000624 <encoderController+0x174>
	}else if (encoder_mode == ENCODER_PWM_MODE){
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <encoderController+0x17c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d12c      	bne.n	8000624 <encoderController+0x174>
		uint32_t acc_tick = pwm_timer->Instance->CNT;
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <encoderController+0x188>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d2:	607b      	str	r3, [r7, #4]
		if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) == 1){
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	009a      	lsls	r2, r3, #2
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 f9d6 	bl	8002990 <HAL_GPIO_ReadPin>
 80005e4:	0003      	movs	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d109      	bne.n	80005fe <encoderController+0x14e>
			pwm_period = acc_tick - pwm_rising_edge;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <encoderController+0x18c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	1ad2      	subs	r2, r2, r3
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <encoderController+0x190>)
 80005f4:	601a      	str	r2, [r3, #0]
			pwm_rising_edge = acc_tick;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <encoderController+0x18c>)
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	e012      	b.n	8000624 <encoderController+0x174>
			pwm_duty_period = acc_tick - pwm_rising_edge;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <encoderController+0x18c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	1ad2      	subs	r2, r2, r3
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <encoderController+0x194>)
 8000608:	601a      	str	r2, [r3, #0]
			encoder_pwm_duty = 4096 * pwm_duty_period / pwm_period;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <encoderController+0x194>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	031a      	lsls	r2, r3, #12
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <encoderController+0x190>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	0019      	movs	r1, r3
 8000616:	0010      	movs	r0, r2
 8000618:	f7ff fd76 	bl	8000108 <__udivsi3>
 800061c:	0003      	movs	r3, r0
 800061e:	001a      	movs	r2, r3
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <encoderController+0x198>)
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b003      	add	sp, #12
 800062a:	bd90      	pop	{r4, r7, pc}
 800062c:	200001a4 	.word	0x200001a4
 8000630:	2000019c 	.word	0x2000019c
 8000634:	200001a0 	.word	0x200001a0
 8000638:	20000404 	.word	0x20000404
 800063c:	200001ac 	.word	0x200001ac
 8000640:	200001b0 	.word	0x200001b0
 8000644:	200001b4 	.word	0x200001b4
 8000648:	200001a8 	.word	0x200001a8

0800064c <getEncoderDuty>:

uint32_t getEncoderDuty(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	return encoder_pwm_duty;
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <getEncoderDuty+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	0018      	movs	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	200001a8 	.word	0x200001a8

08000660 <getUserIn>:

uint8_t getUserIn(uint8_t in){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
	switch(in){
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d002      	beq.n	800067a <getUserIn+0x1a>
 8000674:	2b02      	cmp	r3, #2
 8000676:	d007      	beq.n	8000688 <getUserIn+0x28>
 8000678:	e00d      	b.n	8000696 <getUserIn+0x36>
	case 1:
		return HAL_GPIO_ReadPin(USER_IN1_GPIO_Port, USER_IN1_Pin);
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <getUserIn+0x40>)
 800067c:	2108      	movs	r1, #8
 800067e:	0018      	movs	r0, r3
 8000680:	f002 f986 	bl	8002990 <HAL_GPIO_ReadPin>
 8000684:	0003      	movs	r3, r0
 8000686:	e007      	b.n	8000698 <getUserIn+0x38>
		break;
	case 2:
		return HAL_GPIO_ReadPin(USER_IN2_GPIO_Port, USER_IN2_Pin);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <getUserIn+0x40>)
 800068a:	2110      	movs	r1, #16
 800068c:	0018      	movs	r0, r3
 800068e:	f002 f97f 	bl	8002990 <HAL_GPIO_ReadPin>
 8000692:	0003      	movs	r3, r0
 8000694:	e000      	b.n	8000698 <getUserIn+0x38>
		break;
	}
	return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	48000400 	.word	0x48000400

080006a4 <acquisitionInit>:



void acquisitionInit(ADC_HandleTypeDef* hadc, TIM_HandleTypeDef *htimx){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc_dma_arr, 3);
 80006ae:	490a      	ldr	r1, [pc, #40]	; (80006d8 <acquisitionInit+0x34>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2203      	movs	r2, #3
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fad5 	bl	8001c64 <HAL_ADC_Start_DMA>
	pwm_timer = htimx;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <acquisitionInit+0x38>)
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(pwm_timer);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <acquisitionInit+0x38>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 fc81 	bl	8004fcc <HAL_TIM_Base_Start_IT>
	setEncoderCount(0);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fea4 	bl	8000418 <setEncoderCount>
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000408 	.word	0x20000408
 80006dc:	20000404 	.word	0x20000404

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 f91a 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f826 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f998 	bl	8000a20 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f0:	f000 f978 	bl	80009e4 <MX_DMA_Init>
  MX_TIM14_Init();
 80006f4:	f000 f950 	bl	8000998 <MX_TIM14_Init>
  MX_USB_DEVICE_Init();
 80006f8:	f008 fdfc 	bl	80092f4 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 80006fc:	f000 f882 	bl	8000804 <MX_ADC_Init>
  MX_TIM2_Init();
 8000700:	f000 f8f6 	bl	80008f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  usb_init();
 8000704:	f000 fbba 	bl	8000e7c <usb_init>
  outputsInit(&htim14);
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <main+0x4c>)
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fb76 	bl	8000dfc <outputsInit>
  acquisitionInit(&hadc, &htim2);
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <main+0x50>)
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <main+0x54>)
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff ffc4 	bl	80006a4 <acquisitionInit>
  statusLedBlink();
 800071c:	f000 fa76 	bl	8000c0c <statusLedBlink>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  usbController();
 8000720:	f000 ff32 	bl	8001588 <usbController>
	  userLedController();
 8000724:	f000 fae2 	bl	8000cec <userLedController>
	  usbController();
 8000728:	e7fa      	b.n	8000720 <main+0x40>
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000498 	.word	0x20000498
 8000730:	20000458 	.word	0x20000458
 8000734:	2000051c 	.word	0x2000051c

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b099      	sub	sp, #100	; 0x64
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	242c      	movs	r4, #44	; 0x2c
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2334      	movs	r3, #52	; 0x34
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f009 fb45 	bl	8009dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	231c      	movs	r3, #28
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	2310      	movs	r3, #16
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f009 fb3d 	bl	8009dd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	231c      	movs	r3, #28
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f009 fb36 	bl	8009dd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800076c:	0021      	movs	r1, r4
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2222      	movs	r2, #34	; 0x22
 8000772:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2201      	movs	r2, #1
 8000778:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2201      	movs	r2, #1
 800077e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2210      	movs	r2, #16
 8000784:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2202      	movs	r2, #2
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	0212      	lsls	r2, r2, #8
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	0352      	lsls	r2, r2, #13
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	0018      	movs	r0, r3
 80007a6:	f003 fe07 	bl	80043b8 <HAL_RCC_OscConfig>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007ae:	f000 f9e3 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	211c      	movs	r1, #28
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2207      	movs	r2, #7
 80007b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2202      	movs	r2, #2
 80007be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2101      	movs	r1, #1
 80007d0:	0018      	movs	r0, r3
 80007d2:	f004 f977 	bl	8004ac4 <HAL_RCC_ClockConfig>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007da:	f000 f9cd 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007de:	003b      	movs	r3, r7
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	0292      	lsls	r2, r2, #10
 80007e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	003b      	movs	r3, r7
 80007ee:	0018      	movs	r0, r3
 80007f0:	f004 fac0 	bl	8004d74 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f8:	f000 f9be 	bl	8000b78 <Error_Handler>
  }
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b019      	add	sp, #100	; 0x64
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	0018      	movs	r0, r3
 800080e:	230c      	movs	r3, #12
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f009 fae0 	bl	8009dd8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000818:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <MX_ADC_Init+0xe4>)
 800081a:	4a34      	ldr	r2, [pc, #208]	; (80008ec <MX_ADC_Init+0xe8>)
 800081c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0612      	lsls	r2, r2, #24
 8000824:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_ADC_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000834:	2201      	movs	r2, #1
 8000836:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000838:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_ADC_Init+0xe4>)
 800083a:	2204      	movs	r2, #4
 800083c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_ADC_Init+0xe4>)
 800084c:	2201      	movs	r2, #1
 800084e:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000852:	2200      	movs	r2, #0
 8000854:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000858:	22c2      	movs	r2, #194	; 0xc2
 800085a:	32ff      	adds	r2, #255	; 0xff
 800085c:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000866:	2224      	movs	r2, #36	; 0x24
 8000868:	2101      	movs	r1, #1
 800086a:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_ADC_Init+0xe4>)
 800086e:	2201      	movs	r2, #1
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_ADC_Init+0xe4>)
 8000874:	0018      	movs	r0, r3
 8000876:	f001 f8b5 	bl	80019e4 <HAL_ADC_Init>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800087e:	f000 f97b 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0152      	lsls	r2, r2, #5
 800088e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2203      	movs	r2, #3
 8000894:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_ADC_Init+0xe4>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fa7b 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80008a6:	f000 f967 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2204      	movs	r2, #4
 80008ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_ADC_Init+0xe4>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fa6e 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80008c0:	f000 f95a 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2205      	movs	r2, #5
 80008c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_ADC_Init+0xe4>)
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fa61 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80008da:	f000 f94d 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b004      	add	sp, #16
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	2000051c 	.word	0x2000051c
 80008ec:	40012400 	.word	0x40012400

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	2308      	movs	r3, #8
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	0018      	movs	r0, r3
 80008fc:	2310      	movs	r3, #16
 80008fe:	001a      	movs	r2, r3
 8000900:	2100      	movs	r1, #0
 8000902:	f009 fa69 	bl	8009dd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000906:	003b      	movs	r3, r7
 8000908:	0018      	movs	r0, r3
 800090a:	2308      	movs	r3, #8
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f009 fa62 	bl	8009dd8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	05d2      	lsls	r2, r2, #23
 800091a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM2_Init+0xa4>)
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM2_Init+0xa4>)
 800092a:	2201      	movs	r2, #1
 800092c:	4252      	negs	r2, r2
 800092e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM2_Init+0xa4>)
 800093e:	0018      	movs	r0, r3
 8000940:	f004 fb18 	bl	8004f74 <HAL_TIM_Base_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 f916 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094c:	2108      	movs	r1, #8
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	0152      	lsls	r2, r2, #5
 8000954:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000956:	187a      	adds	r2, r7, r1
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_TIM2_Init+0xa4>)
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f004 fc6d 	bl	800523c <HAL_TIM_ConfigClockSource>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000966:	f000 f907 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	003b      	movs	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	003b      	movs	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000976:	003a      	movs	r2, r7
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_TIM2_Init+0xa4>)
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f004 fe5d 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000986:	f000 f8f7 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b006      	add	sp, #24
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000458 	.word	0x20000458

08000998 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_TIM14_Init+0x40>)
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <MX_TIM14_Init+0x44>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 74;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009a4:	224a      	movs	r2, #74	; 0x4a
 80009a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64865;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MX_TIM14_Init+0x48>)
 80009b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f004 fad6 	bl	8004f74 <HAL_TIM_Base_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80009cc:	f000 f8d4 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000498 	.word	0x20000498
 80009dc:	40002000 	.word	0x40002000
 80009e0:	0000fd61 	.word	0x0000fd61

080009e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_DMA_Init+0x38>)
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_DMA_Init+0x38>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_DMA_Init+0x38>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2009      	movs	r0, #9
 8000a08:	f001 fc80 	bl	800230c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a0c:	2009      	movs	r0, #9
 8000a0e:	f001 fc92 	bl	8002336 <HAL_NVIC_EnableIRQ>

}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	240c      	movs	r4, #12
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f009 f9d1 	bl	8009dd8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b40      	ldr	r3, [pc, #256]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0309      	lsls	r1, r1, #12
 8000a40:	430a      	orrs	r2, r1
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	031b      	lsls	r3, r3, #12
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	0289      	lsls	r1, r1, #10
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	4013      	ands	r3, r2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	02c9      	lsls	r1, r1, #11
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	02db      	lsls	r3, r3, #11
 8000a84:	4013      	ands	r3, r2
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD3_Pin|LD6_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000a8a:	23f0      	movs	r3, #240	; 0xf0
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	482b      	ldr	r0, [pc, #172]	; (8000b3c <MX_GPIO_Init+0x11c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	0019      	movs	r1, r3
 8000a94:	f001 ff99 	bl	80029ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONFIG_BIT0_Pin CONFIG_BIT1_Pin CONFIG_BIT2_Pin CONFIG_BIT3_Pin */
  GPIO_InitStruct.Pin = CONFIG_BIT0_Pin|CONFIG_BIT1_Pin|CONFIG_BIT2_Pin|CONFIG_BIT3_Pin;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_GPIO_Init+0x11c>)
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f001 fdf5 	bl	80026a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD6_Pin LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD6_Pin|LD4_Pin|LD5_Pin;
 8000ab6:	0021      	movs	r1, r4
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	22f0      	movs	r2, #240	; 0xf0
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <MX_GPIO_Init+0x11c>)
 8000ad8:	0019      	movs	r1, r3
 8000ada:	0010      	movs	r0, r2
 8000adc:	f001 fde0 	bl	80026a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	22c0      	movs	r2, #192	; 0xc0
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_GPIO_Init+0x120>)
 8000aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2201      	movs	r2, #1
 8000af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	193a      	adds	r2, r7, r4
 8000af6:	2390      	movs	r3, #144	; 0x90
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 fdcf 	bl	80026a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_IN1_Pin USER_IN2_Pin */
  GPIO_InitStruct.Pin = USER_IN1_Pin|USER_IN2_Pin;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2218      	movs	r2, #24
 8000b06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <MX_GPIO_Init+0x124>)
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	f001 fdc0 	bl	80026a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2007      	movs	r0, #7
 8000b26:	f001 fbf1 	bl	800230c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f001 fc03 	bl	8002336 <HAL_NVIC_EnableIRQ>

}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b009      	add	sp, #36	; 0x24
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	10310000 	.word	0x10310000
 8000b44:	48000400 	.word	0x48000400

08000b48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin){
 8000b54:	1dbb      	adds	r3, r7, #6
 8000b56:	881a      	ldrh	r2, [r3, #0]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d005      	beq.n	8000b6c <HAL_GPIO_EXTI_Callback+0x24>
 8000b60:	1dbb      	adds	r3, r7, #6
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d101      	bne.n	8000b70 <HAL_GPIO_EXTI_Callback+0x28>
	  encoderController();
 8000b6c:	f7ff fca0 	bl	80004b0 <encoderController>
  }




}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <statusLedController>:

/*
 * statusLedController()
 * Called by the timer interruption to blink the status led
 */
void statusLedController(){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	if (status_led == LED_BLINKING){
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <statusLedController+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d106      	bne.n	8000b9e <statusLedController+0x1a>
		HAL_GPIO_TogglePin(STATUS_LED_PORT, STATUS_LED_PIN);
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <statusLedController+0x24>)
 8000b96:	0019      	movs	r1, r3
 8000b98:	0010      	movs	r0, r2
 8000b9a:	f001 ff33 	bl	8002a04 <HAL_GPIO_TogglePin>
		}
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001b8 	.word	0x200001b8
 8000ba8:	48000800 	.word	0x48000800

08000bac <statusLedMode>:

/*
 * statusLedMode(mode)
 * Changes status led mode between off, on ou blinking
 */
void statusLedMode(uint8_t mode){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	701a      	strb	r2, [r3, #0]
		if ( mode != status_led){
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <statusLedMode+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	1dfa      	adds	r2, r7, #7
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d01a      	beq.n	8000bfa <statusLedMode+0x4e>
			switch(mode){
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <statusLedMode+0x26>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d008      	beq.n	8000be2 <statusLedMode+0x36>
 8000bd0:	e00f      	b.n	8000bf2 <statusLedMode+0x46>
			case LED_OFF:
				HAL_GPIO_WritePin(STATUS_LED_PORT, STATUS_LED_PIN, 0);
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <statusLedMode+0x5c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	0019      	movs	r1, r3
 8000bdc:	f001 fef5 	bl	80029ca <HAL_GPIO_WritePin>
				break;
 8000be0:	e007      	b.n	8000bf2 <statusLedMode+0x46>
			case LED_ON:
				HAL_GPIO_WritePin(STATUS_LED_PORT, STATUS_LED_PIN, 1);
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4808      	ldr	r0, [pc, #32]	; (8000c08 <statusLedMode+0x5c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	0019      	movs	r1, r3
 8000bec:	f001 feed 	bl	80029ca <HAL_GPIO_WritePin>
				break;
 8000bf0:	46c0      	nop			; (mov r8, r8)
			}
			status_led = mode;
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <statusLedMode+0x58>)
 8000bf4:	1dfa      	adds	r2, r7, #7
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
		}
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	200001b8 	.word	0x200001b8
 8000c08:	48000800 	.word	0x48000800

08000c0c <statusLedBlink>:
	statusLedMode(LED_ON);
}
void statusLedOff(){
	statusLedMode(LED_OFF);
}
void statusLedBlink(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	statusLedMode(LED_BLINKING);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff ffcb 	bl	8000bac <statusLedMode>
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <userLedMode>:

/*
 * userLedMode(mode)
 * Changes user led mode between off, on or blinking
 */
void userLedMode(uint8_t mode){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	701a      	strb	r2, [r3, #0]
	user_led = mode;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <userLedMode+0x60>)
 8000c2a:	1dfa      	adds	r2, r7, #7
 8000c2c:	7812      	ldrb	r2, [r2, #0]
 8000c2e:	701a      	strb	r2, [r3, #0]
	static uint8_t last_mode = 9;
	if (user_led != last_mode){
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <userLedMode+0x60>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <userLedMode+0x64>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d01b      	beq.n	8000c74 <userLedMode+0x58>
		switch(user_led){
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <userLedMode+0x60>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d00a      	beq.n	8000c5a <userLedMode+0x3e>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d00f      	beq.n	8000c68 <userLedMode+0x4c>
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10f      	bne.n	8000c6c <userLedMode+0x50>
		case LED_OFF:
			HAL_GPIO_WritePin(USER_LED_PORT, USER_LED_PIN, 0);
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <userLedMode+0x68>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 feb9 	bl	80029ca <HAL_GPIO_WritePin>
			break;
 8000c58:	e008      	b.n	8000c6c <userLedMode+0x50>
		case LED_ON:
			HAL_GPIO_WritePin(USER_LED_PORT, USER_LED_PIN, 1);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <userLedMode+0x68>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 feb2 	bl	80029ca <HAL_GPIO_WritePin>
			break;
 8000c66:	e001      	b.n	8000c6c <userLedMode+0x50>
		case LED_BLINKING:
			userLedController();
 8000c68:	f000 f840 	bl	8000cec <userLedController>
		}
		last_mode = user_led;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <userLedMode+0x60>)
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <userLedMode+0x64>)
 8000c72:	701a      	strb	r2, [r3, #0]
	}
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200001b9 	.word	0x200001b9
 8000c80:	20000002 	.word	0x20000002
 8000c84:	48000800 	.word	0x48000800

08000c88 <getUserLedMode>:

/*
 * getUserLedMode()
 * returns user led current mode
 */
uint8_t getUserLedMode(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	return user_led;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <getUserLedMode+0x10>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	200001b9 	.word	0x200001b9

08000c9c <userLedFreq>:

/*
 * userLedFreq(frequency)
 * Changes user led mode 2 blinking frequency
 */
void userLedFreq(uint8_t freq){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	701a      	strb	r2, [r3, #0]
	user_led_period = 1000/freq;
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	0019      	movs	r1, r3
 8000cae:	23fa      	movs	r3, #250	; 0xfa
 8000cb0:	0098      	lsls	r0, r3, #2
 8000cb2:	f7ff fab3 	bl	800021c <__divsi3>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <userLedFreq+0x2c>)
 8000cbc:	801a      	strh	r2, [r3, #0]
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000000 	.word	0x20000000

08000ccc <getUserLedFreq>:

/*
 * getUserLedFreq()
 * returns user led current blinking frequency
 */
uint8_t getUserLedFreq(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	return 1000/user_led_period;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <getUserLedFreq+0x1c>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	23fa      	movs	r3, #250	; 0xfa
 8000cd8:	0098      	lsls	r0, r3, #2
 8000cda:	f7ff fa9f 	bl	800021c <__divsi3>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	b2db      	uxtb	r3, r3
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000000 	.word	0x20000000

08000cec <userLedController>:

/*
 * userLedController()
 * toggles the user led when on mode 2
 */
void userLedController(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
	static uint32_t last_toogle_time = 0;
	if (user_led == LED_BLINKING){
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <userLedController+0x40>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d114      	bne.n	8000d24 <userLedController+0x38>
		uint32_t time = HAL_GetTick();
 8000cfa:	f000 fe69 	bl	80019d0 <HAL_GetTick>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	607b      	str	r3, [r7, #4]
		if ( time > last_toogle_time + user_led_period){
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <userLedController+0x44>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	001a      	movs	r2, r3
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <userLedController+0x48>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d907      	bls.n	8000d24 <userLedController+0x38>
			HAL_GPIO_TogglePin(USER_LED_PORT, USER_LED_PIN);
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <userLedController+0x4c>)
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fe73 	bl	8002a04 <HAL_GPIO_TogglePin>
			last_toogle_time = time;
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <userLedController+0x48>)
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200001b9 	.word	0x200001b9
 8000d30:	20000000 	.word	0x20000000
 8000d34:	200001bc 	.word	0x200001bc
 8000d38:	48000800 	.word	0x48000800

08000d3c <setUserOut>:

/*
 * userOutWrite(output selection, duty cycle)
 * sets the duty cycle for a user output pin
 */
void setUserOut(uint8_t out, uint8_t state){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	0002      	movs	r2, r0
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	1c0a      	adds	r2, r1, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
	if (state != 0 && state != 1){
 8000d4e:	1dbb      	adds	r3, r7, #6
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <setUserOut+0x22>
 8000d56:	1dbb      	adds	r3, r7, #6
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d120      	bne.n	8000da0 <setUserOut+0x64>
		return;
	}
	switch(out){
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d002      	beq.n	8000d6c <setUserOut+0x30>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d00d      	beq.n	8000d86 <setUserOut+0x4a>
 8000d6a:	e01a      	b.n	8000da2 <setUserOut+0x66>
	case 1:
		userOut1 = state;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <setUserOut+0x6c>)
 8000d6e:	1dba      	adds	r2, r7, #6
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(USER_OUT1_GPIO_Port, USER_OUT1_Pin, userOut1);
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <setUserOut+0x6c>)
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <setUserOut+0x70>)
 8000d7e:	0019      	movs	r1, r3
 8000d80:	f001 fe23 	bl	80029ca <HAL_GPIO_WritePin>
		break;
 8000d84:	e00d      	b.n	8000da2 <setUserOut+0x66>

	case 2:
		userOut2 = state;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <setUserOut+0x74>)
 8000d88:	1dba      	adds	r2, r7, #6
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(USER_OUT2_GPIO_Port, USER_OUT2_Pin, userOut2);
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <setUserOut+0x74>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <setUserOut+0x70>)
 8000d94:	001a      	movs	r2, r3
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	f001 fe17 	bl	80029ca <HAL_GPIO_WritePin>
		break;
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	e000      	b.n	8000da2 <setUserOut+0x66>
		return;
 8000da0:	46c0      	nop			; (mov r8, r8)
	}
}
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001ba 	.word	0x200001ba
 8000dac:	48000800 	.word	0x48000800
 8000db0:	200001bb 	.word	0x200001bb

08000db4 <getUserOut>:

/*
 * getUserOut(output)
 * Return the current output value
 */
uint8_t getUserOut(uint8_t out){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	0002      	movs	r2, r0
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	701a      	strb	r2, [r3, #0]
	uint8_t state;
	switch(out){
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <getUserOut+0x1a>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d006      	beq.n	8000dda <getUserOut+0x26>
 8000dcc:	e00b      	b.n	8000de6 <getUserOut+0x32>
	case 1:
		state = userOut1;
 8000dce:	230f      	movs	r3, #15
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <getUserOut+0x40>)
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	701a      	strb	r2, [r3, #0]
		break;
 8000dd8:	e005      	b.n	8000de6 <getUserOut+0x32>

	case 2:
		state = userOut2;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <getUserOut+0x44>)
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	701a      	strb	r2, [r3, #0]
		break;
 8000de4:	46c0      	nop			; (mov r8, r8)
	}
	return state;
 8000de6:	230f      	movs	r3, #15
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b004      	add	sp, #16
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200001ba 	.word	0x200001ba
 8000df8:	200001bb 	.word	0x200001bb

08000dfc <outputsInit>:

/*
 * outputsInit()
 * initializer for the outputs
 */
void outputsInit(TIM_HandleTypeDef *htimx){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htimx);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f004 f8e0 	bl	8004fcc <HAL_TIM_Base_Start_IT>
	statusLedMode(0);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fecd 	bl	8000bac <statusLedMode>
	userLedMode(0);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff ff02 	bl	8000c1c <userLedMode>
	setUserOut(1, 0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff ff8e 	bl	8000d3c <setUserOut>
	setUserOut(2, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	2002      	movs	r0, #2
 8000e24:	f7ff ff8a 	bl	8000d3c <setUserOut>

}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <usb_queueInit>:
#include "usbd_cdc_if.h"
#include "utils.h"
#include "acquisition.h"


void usb_queueInit(usbQueue *q){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < USB_QUEUE_SIZE+1; i++){
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e00a      	b.n	8000e58 <usb_queueInit+0x28>
		q->queue[i] = 0;
 8000e42:	200f      	movs	r0, #15
 8000e44:	183b      	adds	r3, r7, r0
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < USB_QUEUE_SIZE+1; i++){
 8000e4e:	183b      	adds	r3, r7, r0
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	3201      	adds	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b40      	cmp	r3, #64	; 0x40
 8000e60:	d9ef      	bls.n	8000e42 <usb_queueInit+0x12>
	}
	q->r_index = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2241      	movs	r2, #65	; 0x41
 8000e66:	2100      	movs	r1, #0
 8000e68:	5499      	strb	r1, [r3, r2]
	q->w_index = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2242      	movs	r2, #66	; 0x42
 8000e6e:	2100      	movs	r1, #0
 8000e70:	5499      	strb	r1, [r3, r2]
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <usb_init>:

void usb_init(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	usb_queueInit(&usb_Q);
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <usb_init+0x18>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff ffd4 	bl	8000e30 <usb_queueInit>
	statusLedBlink();
 8000e88:	f7ff fec0 	bl	8000c0c <statusLedBlink>
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	20000414 	.word	0x20000414

08000e98 <usb_addToQueue>:
/*
 * usb_addToQueue(pointer to queue, pointer to message, length of message)
 * if there is room in the queue, adds  the message to it
 * else, discards message
 */
void usb_addToQueue(usbQueue *q, uint8_t *msg, uint8_t len){
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	701a      	strb	r2, [r3, #0]
	//checks if there is room for len number in the queue
	uint8_t available_size = q->r_index + USB_QUEUE_SIZE - q->w_index;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2241      	movs	r2, #65	; 0x41
 8000eaa:	5c9a      	ldrb	r2, [r3, r2]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2142      	movs	r1, #66	; 0x42
 8000eb0:	5c5b      	ldrb	r3, [r3, r1]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	2117      	movs	r1, #23
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	3240      	adds	r2, #64	; 0x40
 8000ebc:	701a      	strb	r2, [r3, #0]
	if(available_size > USB_QUEUE_SIZE){
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b40      	cmp	r3, #64	; 0x40
 8000ec4:	d905      	bls.n	8000ed2 <usb_addToQueue+0x3a>
		available_size = available_size - (USB_QUEUE_SIZE+1); //happens when read is "ahead" of Write
 8000ec6:	2217      	movs	r2, #23
 8000ec8:	18bb      	adds	r3, r7, r2
 8000eca:	18ba      	adds	r2, r7, r2
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	3a41      	subs	r2, #65	; 0x41
 8000ed0:	701a      	strb	r2, [r3, #0]
	}
	if (len <= available_size){                            //There is space
 8000ed2:	1dfa      	adds	r2, r7, #7
 8000ed4:	2317      	movs	r3, #23
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d82b      	bhi.n	8000f38 <usb_addToQueue+0xa0>
		for(uint8_t i = 0; i< len; i++){
 8000ee0:	2316      	movs	r3, #22
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e01f      	b.n	8000f2a <usb_addToQueue+0x92>
			q->queue[q->w_index++] = msg[i];
 8000eea:	2316      	movs	r3, #22
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	18d2      	adds	r2, r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2142      	movs	r1, #66	; 0x42
 8000ef8:	5c5b      	ldrb	r3, [r3, r1]
 8000efa:	1c59      	adds	r1, r3, #1
 8000efc:	b2cc      	uxtb	r4, r1
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	2042      	movs	r0, #66	; 0x42
 8000f02:	540c      	strb	r4, [r1, r0]
 8000f04:	0019      	movs	r1, r3
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	545a      	strb	r2, [r3, r1]
			if (q->w_index == USB_QUEUE_SIZE+1){
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2242      	movs	r2, #66	; 0x42
 8000f10:	5c9b      	ldrb	r3, [r3, r2]
 8000f12:	2b41      	cmp	r3, #65	; 0x41
 8000f14:	d103      	bne.n	8000f1e <usb_addToQueue+0x86>
				q->w_index = 0;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2242      	movs	r2, #66	; 0x42
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	5499      	strb	r1, [r3, r2]
		for(uint8_t i = 0; i< len; i++){
 8000f1e:	2116      	movs	r1, #22
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	3201      	adds	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	2316      	movs	r3, #22
 8000f2c:	18fa      	adds	r2, r7, r3
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3d8      	bcc.n	8000eea <usb_addToQueue+0x52>
			}
		}
	}
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b007      	add	sp, #28
 8000f3e:	bd90      	pop	{r4, r7, pc}

08000f40 <usb_queuedData>:

/*
 * usb_queuedData(pointer to queue)
 * returns True if there is data  to be read in the queue
 */
uint8_t usb_queuedData(usbQueue *q){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	return (q->w_index != q->r_index);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2242      	movs	r2, #66	; 0x42
 8000f4c:	5c9a      	ldrb	r2, [r3, r2]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2141      	movs	r1, #65	; 0x41
 8000f52:	5c5b      	ldrb	r3, [r3, r1]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	4193      	sbcs	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <usb_peekQueue>:

/*
 * usb_peekQueue(pointer to queue, relative position)
 * returns a queue element at a relative position from the read index. Does not change the index itself
 */
uint8_t usb_peekQueue(usbQueue *q, uint8_t pos){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	000a      	movs	r2, r1
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	701a      	strb	r2, [r3, #0]
	uint8_t ind = q->r_index + pos;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2241      	movs	r2, #65	; 0x41
 8000f76:	5c99      	ldrb	r1, [r3, r2]
 8000f78:	200f      	movs	r0, #15
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	1cfa      	adds	r2, r7, #3
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	188a      	adds	r2, r1, r2
 8000f82:	701a      	strb	r2, [r3, #0]
	if (ind > (USB_QUEUE_SIZE)){
 8000f84:	183b      	adds	r3, r7, r0
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b40      	cmp	r3, #64	; 0x40
 8000f8a:	d905      	bls.n	8000f98 <usb_peekQueue+0x34>
		ind = ind - (USB_QUEUE_SIZE+1);
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	18bb      	adds	r3, r7, r2
 8000f90:	18ba      	adds	r2, r7, r2
 8000f92:	7812      	ldrb	r2, [r2, #0]
 8000f94:	3a41      	subs	r2, #65	; 0x41
 8000f96:	701a      	strb	r2, [r3, #0]
	}
	return q->queue[ind];
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <usb_GetByteFromQueue>:

/*
 * usb_GetByteFromQueue(pointer to queue)
 * returns a single byte from the queue
 */
uint8_t usb_GetByteFromQueue(usbQueue *q){
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	uint8_t return_byte = q->queue[q->r_index];
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2241      	movs	r2, #65	; 0x41
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	0019      	movs	r1, r3
 8000fba:	230f      	movs	r3, #15
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	5c52      	ldrb	r2, [r2, r1]
 8000fc2:	701a      	strb	r2, [r3, #0]
	if (q->r_index == USB_QUEUE_SIZE){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2241      	movs	r2, #65	; 0x41
 8000fc8:	5c9b      	ldrb	r3, [r3, r2]
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d104      	bne.n	8000fd8 <usb_GetByteFromQueue+0x2e>
		q->r_index = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2241      	movs	r2, #65	; 0x41
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	5499      	strb	r1, [r3, r2]
 8000fd6:	e007      	b.n	8000fe8 <usb_GetByteFromQueue+0x3e>
	}else{
		q->r_index++;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2241      	movs	r2, #65	; 0x41
 8000fdc:	5c9b      	ldrb	r3, [r3, r2]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2d9      	uxtb	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2241      	movs	r2, #65	; 0x41
 8000fe6:	5499      	strb	r1, [r3, r2]
	}
	return return_byte;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	781b      	ldrb	r3, [r3, #0]
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <usb_queueDiscard>:
 * usb_queueDiscard(pointer to queue)
 * discards data until (including) next frame ending
 * return the amount of discarded numbers
 * if no frame ending is found, clears the entire queue
 */
uint8_t usb_queueDiscard(usbQueue *q){;
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	for (uint8_t i =2; i< USB_QUEUE_SIZE; i++){
 8000ffe:	230f      	movs	r3, #15
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2202      	movs	r2, #2
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e035      	b.n	8001074 <usb_queueDiscard+0x7e>
		if (usb_peekQueue(q, i-2) == '\r' && usb_peekQueue(q, i-1) == '\n' && usb_peekQueue(q, i) == '#'){
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3b02      	subs	r3, #2
 8001010:	b2da      	uxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f7ff ffa4 	bl	8000f64 <usb_peekQueue>
 800101c:	0003      	movs	r3, r0
 800101e:	2b0d      	cmp	r3, #13
 8001020:	d122      	bne.n	8001068 <usb_queueDiscard+0x72>
 8001022:	230f      	movs	r3, #15
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ff97 	bl	8000f64 <usb_peekQueue>
 8001036:	0003      	movs	r3, r0
 8001038:	2b0a      	cmp	r3, #10
 800103a:	d115      	bne.n	8001068 <usb_queueDiscard+0x72>
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff ff8c 	bl	8000f64 <usb_peekQueue>
 800104c:	0003      	movs	r3, r0
 800104e:	2b23      	cmp	r3, #35	; 0x23
 8001050:	d10a      	bne.n	8001068 <usb_queueDiscard+0x72>
			q->r_index = i;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	200f      	movs	r0, #15
 8001056:	183a      	adds	r2, r7, r0
 8001058:	2141      	movs	r1, #65	; 0x41
 800105a:	7812      	ldrb	r2, [r2, #0]
 800105c:	545a      	strb	r2, [r3, r1]
			return (i+2);
 800105e:	183b      	adds	r3, r7, r0
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3302      	adds	r3, #2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	e013      	b.n	8001090 <usb_queueDiscard+0x9a>
	for (uint8_t i =2; i< USB_QUEUE_SIZE; i++){
 8001068:	210f      	movs	r1, #15
 800106a:	187b      	adds	r3, r7, r1
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	187b      	adds	r3, r7, r1
 8001070:	3201      	adds	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b3f      	cmp	r3, #63	; 0x3f
 800107c:	d9c4      	bls.n	8001008 <usb_queueDiscard+0x12>
		}
	}
	q->r_index = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2241      	movs	r2, #65	; 0x41
 8001082:	2100      	movs	r1, #0
 8001084:	5499      	strb	r1, [r3, r2]
	q->w_index = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2242      	movs	r2, #66	; 0x42
 800108a:	2100      	movs	r1, #0
 800108c:	5499      	strb	r1, [r3, r2]
	return (USB_QUEUE_SIZE);
 800108e:	2340      	movs	r3, #64	; 0x40
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bd80      	pop	{r7, pc}

08001098 <usb_processFrame>:


/*
 * Decodes a valid usb frame into device functions
 */
uint8_t usb_processFrame(uint8_t *frame){
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	static uint8_t response[USB_FRAME_SIZE];
	response[0] = '#';
 80010a0:	4be0      	ldr	r3, [pc, #896]	; (8001424 <usb_processFrame+0x38c>)
 80010a2:	2223      	movs	r2, #35	; 0x23
 80010a4:	701a      	strb	r2, [r3, #0]
	uint8_t n = frame[1];
 80010a6:	2316      	movs	r3, #22
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	7852      	ldrb	r2, [r2, #1]
 80010ae:	701a      	strb	r2, [r3, #0]
	UNUSED(n);
	uint8_t func = frame[2];
 80010b0:	2115      	movs	r1, #21
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	7892      	ldrb	r2, [r2, #2]
 80010b8:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
 80010ba:	2312      	movs	r3, #18
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	2200      	movs	r2, #0
 80010c0:	801a      	strh	r2, [r3, #0]
	uint8_t res_n = 0;
 80010c2:	2317      	movs	r3, #23
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	uint16_t res_val = 0;
 80010ca:	2310      	movs	r3, #16
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
	uint32_t res_val32 = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
	uint32_t value32 = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
	switch (func){
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b2c      	cmp	r3, #44	; 0x2c
 80010e0:	d900      	bls.n	80010e4 <usb_processFrame+0x4c>
 80010e2:	e1c3      	b.n	800146c <usb_processFrame+0x3d4>
 80010e4:	009a      	lsls	r2, r3, #2
 80010e6:	4bd0      	ldr	r3, [pc, #832]	; (8001428 <usb_processFrame+0x390>)
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	469f      	mov	pc, r3
	case 1://Hello
		res_n = 12;
 80010ee:	2317      	movs	r3, #23
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	220c      	movs	r2, #12
 80010f4:	701a      	strb	r2, [r3, #0]
		response[2] = 129;
 80010f6:	4bcb      	ldr	r3, [pc, #812]	; (8001424 <usb_processFrame+0x38c>)
 80010f8:	2281      	movs	r2, #129	; 0x81
 80010fa:	709a      	strb	r2, [r3, #2]
		response[3] = 'I';response[4] = ' ';response[5] = 'a';response[6] = 'm';response[7] = ' ';response[8] = 'a';
 80010fc:	4bc9      	ldr	r3, [pc, #804]	; (8001424 <usb_processFrame+0x38c>)
 80010fe:	2249      	movs	r2, #73	; 0x49
 8001100:	70da      	strb	r2, [r3, #3]
 8001102:	4bc8      	ldr	r3, [pc, #800]	; (8001424 <usb_processFrame+0x38c>)
 8001104:	2220      	movs	r2, #32
 8001106:	711a      	strb	r2, [r3, #4]
 8001108:	4bc6      	ldr	r3, [pc, #792]	; (8001424 <usb_processFrame+0x38c>)
 800110a:	2261      	movs	r2, #97	; 0x61
 800110c:	715a      	strb	r2, [r3, #5]
 800110e:	4bc5      	ldr	r3, [pc, #788]	; (8001424 <usb_processFrame+0x38c>)
 8001110:	226d      	movs	r2, #109	; 0x6d
 8001112:	719a      	strb	r2, [r3, #6]
 8001114:	4bc3      	ldr	r3, [pc, #780]	; (8001424 <usb_processFrame+0x38c>)
 8001116:	2220      	movs	r2, #32
 8001118:	71da      	strb	r2, [r3, #7]
 800111a:	4bc2      	ldr	r3, [pc, #776]	; (8001424 <usb_processFrame+0x38c>)
 800111c:	2261      	movs	r2, #97	; 0x61
 800111e:	721a      	strb	r2, [r3, #8]
		response[9] = ' ';response[10] = 'P';response[11] = 'a';response[12] = 'n';response[13] = 'd';response[14] = 'a';
 8001120:	4bc0      	ldr	r3, [pc, #768]	; (8001424 <usb_processFrame+0x38c>)
 8001122:	2220      	movs	r2, #32
 8001124:	725a      	strb	r2, [r3, #9]
 8001126:	4bbf      	ldr	r3, [pc, #764]	; (8001424 <usb_processFrame+0x38c>)
 8001128:	2250      	movs	r2, #80	; 0x50
 800112a:	729a      	strb	r2, [r3, #10]
 800112c:	4bbd      	ldr	r3, [pc, #756]	; (8001424 <usb_processFrame+0x38c>)
 800112e:	2261      	movs	r2, #97	; 0x61
 8001130:	72da      	strb	r2, [r3, #11]
 8001132:	4bbc      	ldr	r3, [pc, #752]	; (8001424 <usb_processFrame+0x38c>)
 8001134:	226e      	movs	r2, #110	; 0x6e
 8001136:	731a      	strb	r2, [r3, #12]
 8001138:	4bba      	ldr	r3, [pc, #744]	; (8001424 <usb_processFrame+0x38c>)
 800113a:	2264      	movs	r2, #100	; 0x64
 800113c:	735a      	strb	r2, [r3, #13]
 800113e:	4bb9      	ldr	r3, [pc, #740]	; (8001424 <usb_processFrame+0x38c>)
 8001140:	2261      	movs	r2, #97	; 0x61
 8001142:	739a      	strb	r2, [r3, #14]
		break;
 8001144:	e19d      	b.n	8001482 <usb_processFrame+0x3ea>
	case 2://Get config bits
		res_n = 2;
 8001146:	2317      	movs	r3, #23
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	2202      	movs	r2, #2
 800114c:	701a      	strb	r2, [r3, #0]
		response[2] = 130;
 800114e:	4bb5      	ldr	r3, [pc, #724]	; (8001424 <usb_processFrame+0x38c>)
 8001150:	2282      	movs	r2, #130	; 0x82
 8001152:	709a      	strb	r2, [r3, #2]
		response[3] = getConfigBits();
 8001154:	f000 fb7e 	bl	8001854 <getConfigBits>
 8001158:	0003      	movs	r3, r0
 800115a:	001a      	movs	r2, r3
 800115c:	4bb1      	ldr	r3, [pc, #708]	; (8001424 <usb_processFrame+0x38c>)
 800115e:	70da      	strb	r2, [r3, #3]
		break;
 8001160:	e18f      	b.n	8001482 <usb_processFrame+0x3ea>

	case 10://Set user led mode
		value = frame[3];
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3303      	adds	r3, #3
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	2112      	movs	r1, #18
 800116a:	187b      	adds	r3, r7, r1
 800116c:	801a      	strh	r2, [r3, #0]
		userLedMode(value);
 800116e:	187b      	adds	r3, r7, r1
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fd51 	bl	8000c1c <userLedMode>
	case 11://Get user led mode
		res_n = 2;
 800117a:	2317      	movs	r3, #23
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	2202      	movs	r2, #2
 8001180:	701a      	strb	r2, [r3, #0]
		response[2] = 139;
 8001182:	4ba8      	ldr	r3, [pc, #672]	; (8001424 <usb_processFrame+0x38c>)
 8001184:	228b      	movs	r2, #139	; 0x8b
 8001186:	709a      	strb	r2, [r3, #2]
		response[3] = getUserLedMode();
 8001188:	f7ff fd7e 	bl	8000c88 <getUserLedMode>
 800118c:	0003      	movs	r3, r0
 800118e:	001a      	movs	r2, r3
 8001190:	4ba4      	ldr	r3, [pc, #656]	; (8001424 <usb_processFrame+0x38c>)
 8001192:	70da      	strb	r2, [r3, #3]
		break;
 8001194:	e175      	b.n	8001482 <usb_processFrame+0x3ea>

	case 12://Set user Led mode 2 Freq
		value = frame[3];
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3303      	adds	r3, #3
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	2112      	movs	r1, #18
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	801a      	strh	r2, [r3, #0]
		userLedFreq(value);
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fd77 	bl	8000c9c <userLedFreq>
	case 13://Get user led mode 2 Freq
		res_n = 2;
 80011ae:	2317      	movs	r3, #23
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
		response[2] = 141;
 80011b6:	4b9b      	ldr	r3, [pc, #620]	; (8001424 <usb_processFrame+0x38c>)
 80011b8:	228d      	movs	r2, #141	; 0x8d
 80011ba:	709a      	strb	r2, [r3, #2]
		response[3] = getUserLedFreq();
 80011bc:	f7ff fd86 	bl	8000ccc <getUserLedFreq>
 80011c0:	0003      	movs	r3, r0
 80011c2:	001a      	movs	r2, r3
 80011c4:	4b97      	ldr	r3, [pc, #604]	; (8001424 <usb_processFrame+0x38c>)
 80011c6:	70da      	strb	r2, [r3, #3]
		break;
 80011c8:	e15b      	b.n	8001482 <usb_processFrame+0x3ea>

	case 14://Set user IO Out 1
		value = frame[3];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3303      	adds	r3, #3
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	2112      	movs	r1, #18
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	801a      	strh	r2, [r3, #0]
		setUserOut(1, value);
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	0019      	movs	r1, r3
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff fdac 	bl	8000d3c <setUserOut>
	case 15://Get user out 1
		res_n = 2;
 80011e4:	2317      	movs	r3, #23
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2202      	movs	r2, #2
 80011ea:	701a      	strb	r2, [r3, #0]
		response[2] = 143;
 80011ec:	4b8d      	ldr	r3, [pc, #564]	; (8001424 <usb_processFrame+0x38c>)
 80011ee:	228f      	movs	r2, #143	; 0x8f
 80011f0:	709a      	strb	r2, [r3, #2]
		response[3] = getUserOut(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fdde 	bl	8000db4 <getUserOut>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	4b89      	ldr	r3, [pc, #548]	; (8001424 <usb_processFrame+0x38c>)
 80011fe:	70da      	strb	r2, [r3, #3]
		break;
 8001200:	e13f      	b.n	8001482 <usb_processFrame+0x3ea>

	case 16://Set user IO Out 2
		value = frame[3];
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3303      	adds	r3, #3
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	2112      	movs	r1, #18
 800120a:	187b      	adds	r3, r7, r1
 800120c:	801a      	strh	r2, [r3, #0]
		setUserOut(2, value);
 800120e:	187b      	adds	r3, r7, r1
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	0019      	movs	r1, r3
 8001216:	2002      	movs	r0, #2
 8001218:	f7ff fd90 	bl	8000d3c <setUserOut>
	case 17://Get user out 2
		res_n = 2;
 800121c:	2317      	movs	r3, #23
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	2202      	movs	r2, #2
 8001222:	701a      	strb	r2, [r3, #0]
		response[2] = 145;
 8001224:	4b7f      	ldr	r3, [pc, #508]	; (8001424 <usb_processFrame+0x38c>)
 8001226:	2291      	movs	r2, #145	; 0x91
 8001228:	709a      	strb	r2, [r3, #2]
		response[3] = getUserOut(2);
 800122a:	2002      	movs	r0, #2
 800122c:	f7ff fdc2 	bl	8000db4 <getUserOut>
 8001230:	0003      	movs	r3, r0
 8001232:	001a      	movs	r2, r3
 8001234:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <usb_processFrame+0x38c>)
 8001236:	70da      	strb	r2, [r3, #3]
		break;
 8001238:	e123      	b.n	8001482 <usb_processFrame+0x3ea>

	case 20://Read analog in 0 (amp)
		res_n = 3;
 800123a:	2317      	movs	r3, #23
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2203      	movs	r2, #3
 8001240:	701a      	strb	r2, [r3, #0]
		response[2] = 148;
 8001242:	4b78      	ldr	r3, [pc, #480]	; (8001424 <usb_processFrame+0x38c>)
 8001244:	2294      	movs	r2, #148	; 0x94
 8001246:	709a      	strb	r2, [r3, #2]
		res_val = getAnalogRead(0);
 8001248:	2410      	movs	r4, #16
 800124a:	0025      	movs	r5, r4
 800124c:	193c      	adds	r4, r7, r4
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff f8d0 	bl	80003f4 <getAnalogRead>
 8001254:	0003      	movs	r3, r0
 8001256:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 8001258:	002c      	movs	r4, r5
 800125a:	193b      	adds	r3, r7, r4
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	0018      	movs	r0, r3
 8001260:	f000 fac7 	bl	80017f2 <get8MSB>
 8001264:	0003      	movs	r3, r0
 8001266:	001a      	movs	r2, r3
 8001268:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <usb_processFrame+0x38c>)
 800126a:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 800126c:	193b      	adds	r3, r7, r4
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	f000 facd 	bl	8001810 <get8LSB>
 8001276:	0003      	movs	r3, r0
 8001278:	001a      	movs	r2, r3
 800127a:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <usb_processFrame+0x38c>)
 800127c:	711a      	strb	r2, [r3, #4]
		break;
 800127e:	e100      	b.n	8001482 <usb_processFrame+0x3ea>

	case 21://Read user analog in 1
		res_n = 3;
 8001280:	2317      	movs	r3, #23
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	2203      	movs	r2, #3
 8001286:	701a      	strb	r2, [r3, #0]
		response[2] = 149;
 8001288:	4b66      	ldr	r3, [pc, #408]	; (8001424 <usb_processFrame+0x38c>)
 800128a:	2295      	movs	r2, #149	; 0x95
 800128c:	709a      	strb	r2, [r3, #2]
		res_val = getAnalogRead(1);
 800128e:	2410      	movs	r4, #16
 8001290:	0025      	movs	r5, r4
 8001292:	193c      	adds	r4, r7, r4
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff f8ad 	bl	80003f4 <getAnalogRead>
 800129a:	0003      	movs	r3, r0
 800129c:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 800129e:	002c      	movs	r4, r5
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 faa4 	bl	80017f2 <get8MSB>
 80012aa:	0003      	movs	r3, r0
 80012ac:	001a      	movs	r2, r3
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <usb_processFrame+0x38c>)
 80012b0:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 faaa 	bl	8001810 <get8LSB>
 80012bc:	0003      	movs	r3, r0
 80012be:	001a      	movs	r2, r3
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <usb_processFrame+0x38c>)
 80012c2:	711a      	strb	r2, [r3, #4]
		break;
 80012c4:	e0dd      	b.n	8001482 <usb_processFrame+0x3ea>

	case 22://Read user analog in 2
		res_n = 3;
 80012c6:	2317      	movs	r3, #23
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	2203      	movs	r2, #3
 80012cc:	701a      	strb	r2, [r3, #0]
		response[2] = 150;
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <usb_processFrame+0x38c>)
 80012d0:	2296      	movs	r2, #150	; 0x96
 80012d2:	709a      	strb	r2, [r3, #2]
		res_val = getAnalogRead(2);
 80012d4:	2410      	movs	r4, #16
 80012d6:	0025      	movs	r5, r4
 80012d8:	193c      	adds	r4, r7, r4
 80012da:	2002      	movs	r0, #2
 80012dc:	f7ff f88a 	bl	80003f4 <getAnalogRead>
 80012e0:	0003      	movs	r3, r0
 80012e2:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 80012e4:	002c      	movs	r4, r5
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 fa81 	bl	80017f2 <get8MSB>
 80012f0:	0003      	movs	r3, r0
 80012f2:	001a      	movs	r2, r3
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <usb_processFrame+0x38c>)
 80012f6:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f000 fa87 	bl	8001810 <get8LSB>
 8001302:	0003      	movs	r3, r0
 8001304:	001a      	movs	r2, r3
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <usb_processFrame+0x38c>)
 8001308:	711a      	strb	r2, [r3, #4]
		break;
 800130a:	e0ba      	b.n	8001482 <usb_processFrame+0x3ea>

	case 30://read user input 1
		res_n = 2;
 800130c:	2317      	movs	r3, #23
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	2202      	movs	r2, #2
 8001312:	701a      	strb	r2, [r3, #0]
		response[2] = 158;
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <usb_processFrame+0x38c>)
 8001316:	229e      	movs	r2, #158	; 0x9e
 8001318:	709a      	strb	r2, [r3, #2]
		response[3] = getUserIn(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff f9a0 	bl	8000660 <getUserIn>
 8001320:	0003      	movs	r3, r0
 8001322:	001a      	movs	r2, r3
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <usb_processFrame+0x38c>)
 8001326:	70da      	strb	r2, [r3, #3]
		break;
 8001328:	e0ab      	b.n	8001482 <usb_processFrame+0x3ea>

	case 31://read user input 2
		res_n = 2;
 800132a:	2317      	movs	r3, #23
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
		response[2] = 159;
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <usb_processFrame+0x38c>)
 8001334:	229f      	movs	r2, #159	; 0x9f
 8001336:	709a      	strb	r2, [r3, #2]
		response[3] = getUserIn(2);
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff f991 	bl	8000660 <getUserIn>
 800133e:	0003      	movs	r3, r0
 8001340:	001a      	movs	r2, r3
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <usb_processFrame+0x38c>)
 8001344:	70da      	strb	r2, [r3, #3]
		break;
 8001346:	e09c      	b.n	8001482 <usb_processFrame+0x3ea>

	case 40://Set encoder mode
		value = frame[3];
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3303      	adds	r3, #3
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	2112      	movs	r1, #18
 8001350:	187b      	adds	r3, r7, r1
 8001352:	801a      	strh	r2, [r3, #0]
		setEncoderMode(value);
 8001354:	187b      	adds	r3, r7, r1
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff f884 	bl	8000468 <setEncoderMode>
	case 41://Get encoder mode
		res_n = 2;
 8001360:	2317      	movs	r3, #23
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	2202      	movs	r2, #2
 8001366:	701a      	strb	r2, [r3, #0]
		response[2] = 169;
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <usb_processFrame+0x38c>)
 800136a:	22a9      	movs	r2, #169	; 0xa9
 800136c:	709a      	strb	r2, [r3, #2]
		response[3] = getEncoderMode();
 800136e:	f7ff f88b 	bl	8000488 <getEncoderMode>
 8001372:	0003      	movs	r3, r0
 8001374:	001a      	movs	r2, r3
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <usb_processFrame+0x38c>)
 8001378:	70da      	strb	r2, [r3, #3]
		break;
 800137a:	e082      	b.n	8001482 <usb_processFrame+0x3ea>

	case 42://set encoder count
		value32 = (frame[3]<<24) + (frame[4]<<16) + (frame[5]<<8) + frame[6];
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3303      	adds	r3, #3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	061a      	lsls	r2, r3, #24
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3304      	adds	r3, #4
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	18d2      	adds	r2, r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3305      	adds	r3, #5
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	18d3      	adds	r3, r2, r3
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	3206      	adds	r2, #6
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	189b      	adds	r3, r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
		setEncoderCount(value32);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff f837 	bl	8000418 <setEncoderCount>
	case 43://get encoder
		res_n = 5;
 80013aa:	2317      	movs	r3, #23
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	2205      	movs	r2, #5
 80013b0:	701a      	strb	r2, [r3, #0]
		response[2] = 171;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <usb_processFrame+0x38c>)
 80013b4:	22ab      	movs	r2, #171	; 0xab
 80013b6:	709a      	strb	r2, [r3, #2]
		res_val32 = getEncoderCount();
 80013b8:	f7ff f870 	bl	800049c <getEncoderCount>
 80013bc:	0003      	movs	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]
		response[3] = get8MSB(get16MSB(res_val32));
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fa31 	bl	800182a <get16MSB>
 80013c8:	0003      	movs	r3, r0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 fa11 	bl	80017f2 <get8MSB>
 80013d0:	0003      	movs	r3, r0
 80013d2:	001a      	movs	r2, r3
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <usb_processFrame+0x38c>)
 80013d6:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(get16MSB(res_val32));
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fa25 	bl	800182a <get16MSB>
 80013e0:	0003      	movs	r3, r0
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 fa14 	bl	8001810 <get8LSB>
 80013e8:	0003      	movs	r3, r0
 80013ea:	001a      	movs	r2, r3
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <usb_processFrame+0x38c>)
 80013ee:	711a      	strb	r2, [r3, #4]
		response[5] = get8MSB(get16LSB(res_val32));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fa24 	bl	8001840 <get16LSB>
 80013f8:	0003      	movs	r3, r0
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 f9f9 	bl	80017f2 <get8MSB>
 8001400:	0003      	movs	r3, r0
 8001402:	001a      	movs	r2, r3
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <usb_processFrame+0x38c>)
 8001406:	715a      	strb	r2, [r3, #5]
		response[6] = get8LSB(get16LSB(res_val32));
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fa18 	bl	8001840 <get16LSB>
 8001410:	0003      	movs	r3, r0
 8001412:	0018      	movs	r0, r3
 8001414:	f000 f9fc 	bl	8001810 <get8LSB>
 8001418:	0003      	movs	r3, r0
 800141a:	001a      	movs	r2, r3
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <usb_processFrame+0x38c>)
 800141e:	719a      	strb	r2, [r3, #6]
		break;
 8001420:	e02f      	b.n	8001482 <usb_processFrame+0x3ea>
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	200001c0 	.word	0x200001c0
 8001428:	08009e68 	.word	0x08009e68

	case 44:// get pwm duty cycle
		res_n = 3;
 800142c:	2317      	movs	r3, #23
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2203      	movs	r2, #3
 8001432:	701a      	strb	r2, [r3, #0]
		response[2] = 172;
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <usb_processFrame+0x42c>)
 8001436:	22ac      	movs	r2, #172	; 0xac
 8001438:	709a      	strb	r2, [r3, #2]
		res_val = getEncoderDuty();
 800143a:	f7ff f907 	bl	800064c <getEncoderDuty>
 800143e:	0002      	movs	r2, r0
 8001440:	2410      	movs	r4, #16
 8001442:	193b      	adds	r3, r7, r4
 8001444:	801a      	strh	r2, [r3, #0]
		response[3] = get8MSB(res_val);
 8001446:	193b      	adds	r3, r7, r4
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	f000 f9d1 	bl	80017f2 <get8MSB>
 8001450:	0003      	movs	r3, r0
 8001452:	001a      	movs	r2, r3
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <usb_processFrame+0x42c>)
 8001456:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8001458:	193b      	adds	r3, r7, r4
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f000 f9d7 	bl	8001810 <get8LSB>
 8001462:	0003      	movs	r3, r0
 8001464:	001a      	movs	r2, r3
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <usb_processFrame+0x42c>)
 8001468:	711a      	strb	r2, [r3, #4]
		break;
 800146a:	e00a      	b.n	8001482 <usb_processFrame+0x3ea>

	default://returns a error
		res_n = 2;
 800146c:	2317      	movs	r3, #23
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
		response[2] = 0;
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <usb_processFrame+0x42c>)
 8001476:	2200      	movs	r2, #0
 8001478:	709a      	strb	r2, [r3, #2]
		response[3] = 1;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <usb_processFrame+0x42c>)
 800147c:	2201      	movs	r2, #1
 800147e:	70da      	strb	r2, [r3, #3]
		break;
 8001480:	46c0      	nop			; (mov r8, r8)

	}


	response[2 + res_n] = '\r';
 8001482:	2017      	movs	r0, #23
 8001484:	183b      	adds	r3, r7, r0
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3302      	adds	r3, #2
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <usb_processFrame+0x42c>)
 800148c:	210d      	movs	r1, #13
 800148e:	54d1      	strb	r1, [r2, r3]
	response[2 + res_n + 1] = '\n';
 8001490:	183b      	adds	r3, r7, r0
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3303      	adds	r3, #3
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <usb_processFrame+0x42c>)
 8001498:	210a      	movs	r1, #10
 800149a:	54d1      	strb	r1, [r2, r3]
	response[1] = res_n;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <usb_processFrame+0x42c>)
 800149e:	183a      	adds	r2, r7, r0
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(response, res_n + 4);
 80014a4:	183b      	adds	r3, r7, r0
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3304      	adds	r3, #4
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <usb_processFrame+0x42c>)
 80014b0:	0011      	movs	r1, r2
 80014b2:	0018      	movs	r0, r3
 80014b4:	f007 ffac 	bl	8009410 <CDC_Transmit_FS>
	return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b006      	add	sp, #24
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	200001c0 	.word	0x200001c0

080014c8 <usb_getQueuedCommand>:
/*
 * usb_getQueuedCommand(pointer to queue)
 * Get a entire frame from the queue and verify its format,
 * If valid, it gets processed and returns 1. otherwise, returns 0 *
 */
uint8_t usb_getQueuedCommand(usbQueue *q){
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	static uint8_t rx_frame[USB_FRAME_SIZE];
	if (q->queue[q->r_index] != '#'){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2241      	movs	r2, #65	; 0x41
 80014d4:	5c9b      	ldrb	r3, [r3, r2]
 80014d6:	001a      	movs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	5c9b      	ldrb	r3, [r3, r2]
 80014dc:	2b23      	cmp	r3, #35	; 0x23
 80014de:	d003      	beq.n	80014e8 <usb_getQueuedCommand+0x20>
		usb_queueDiscard(q);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff fd87 	bl	8000ff6 <usb_queueDiscard>
	}
	if (usb_queuedData(q)){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff fd28 	bl	8000f40 <usb_queuedData>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d041      	beq.n	8001578 <usb_getQueuedCommand+0xb0>
		uint8_t n = usb_peekQueue(q, 1);
 80014f4:	250e      	movs	r5, #14
 80014f6:	197c      	adds	r4, r7, r5
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2101      	movs	r1, #1
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff fd31 	bl	8000f64 <usb_peekQueue>
 8001502:	0003      	movs	r3, r0
 8001504:	7023      	strb	r3, [r4, #0]
		uint8_t frame_len = 2 + n + 2;
 8001506:	230d      	movs	r3, #13
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	197a      	adds	r2, r7, r5
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	3204      	adds	r2, #4
 8001510:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i< frame_len; i++){
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e00f      	b.n	800153c <usb_getQueuedCommand+0x74>
			rx_frame[i] = usb_GetByteFromQueue(q);
 800151c:	250f      	movs	r5, #15
 800151e:	197b      	adds	r3, r7, r5
 8001520:	781c      	ldrb	r4, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff fd40 	bl	8000faa <usb_GetByteFromQueue>
 800152a:	0003      	movs	r3, r0
 800152c:	001a      	movs	r2, r3
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <usb_getQueuedCommand+0xbc>)
 8001530:	551a      	strb	r2, [r3, r4]
		for (uint8_t i = 0; i< frame_len; i++){
 8001532:	197b      	adds	r3, r7, r5
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	197b      	adds	r3, r7, r5
 8001538:	3201      	adds	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	230f      	movs	r3, #15
 800153e:	18fa      	adds	r2, r7, r3
 8001540:	230d      	movs	r3, #13
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3e7      	bcc.n	800151c <usb_getQueuedCommand+0x54>
		}
		if (rx_frame[frame_len-2] == '\r' && rx_frame[frame_len-1] == '\n'){
 800154c:	230d      	movs	r3, #13
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	3b02      	subs	r3, #2
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <usb_getQueuedCommand+0xbc>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	2b0d      	cmp	r3, #13
 800155a:	d10d      	bne.n	8001578 <usb_getQueuedCommand+0xb0>
 800155c:	230d      	movs	r3, #13
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	3b01      	subs	r3, #1
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <usb_getQueuedCommand+0xbc>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	2b0a      	cmp	r3, #10
 800156a:	d105      	bne.n	8001578 <usb_getQueuedCommand+0xb0>
			usb_processFrame(rx_frame);
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <usb_getQueuedCommand+0xbc>)
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff fd92 	bl	8001098 <usb_processFrame>
			return 1;
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <usb_getQueuedCommand+0xb2>
		}
	}
	return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	200001d0 	.word	0x200001d0

08001588 <usbController>:

void usbController(){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	if (usb_queuedData(&usb_Q)){
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <usbController+0x20>)
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff fcd6 	bl	8000f40 <usb_queuedData>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d003      	beq.n	80015a0 <usbController+0x18>
		usb_getQueuedCommand(&usb_Q);
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <usbController+0x20>)
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff ff94 	bl	80014c8 <usb_getQueuedCommand>
	}
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	20000414 	.word	0x20000414

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	619a      	str	r2, [r3, #24]
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0549      	lsls	r1, r1, #21
 80015d4:	430a      	orrs	r2, r1
 80015d6:	61da      	str	r2, [r3, #28]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_MspInit+0x44>)
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	4013      	ands	r3, r2
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	2314      	movs	r3, #20
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	0018      	movs	r0, r3
 8001602:	2314      	movs	r3, #20
 8001604:	001a      	movs	r2, r3
 8001606:	2100      	movs	r1, #0
 8001608:	f008 fbe6 	bl	8009dd8 <memset>
  if(hadc->Instance==ADC1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <HAL_ADC_MspInit+0xd4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d154      	bne.n	80016c0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_ADC_MspInit+0xd8>)
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <HAL_ADC_MspInit+0xd8>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0089      	lsls	r1, r1, #2
 8001620:	430a      	orrs	r2, r1
 8001622:	619a      	str	r2, [r3, #24]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_MspInit+0xd8>)
 8001626:	699a      	ldr	r2, [r3, #24]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_ADC_MspInit+0xd8>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_ADC_MspInit+0xd8>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0289      	lsls	r1, r1, #10
 800163c:	430a      	orrs	r2, r1
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_ADC_MspInit+0xd8>)
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800164e:	2114      	movs	r1, #20
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2232      	movs	r2, #50	; 0x32
 8001654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001656:	187b      	adds	r3, r7, r1
 8001658:	2203      	movs	r2, #3
 800165a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	187a      	adds	r2, r7, r1
 8001664:	2390      	movs	r3, #144	; 0x90
 8001666:	05db      	lsls	r3, r3, #23
 8001668:	0011      	movs	r1, r2
 800166a:	0018      	movs	r0, r3
 800166c:	f001 f818 	bl	80026a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_MspInit+0xe0>)
 8001674:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 800169a:	2220      	movs	r2, #32
 800169c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 fe62 	bl	8002370 <HAL_DMA_Init>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80016b0:	f7ff fa62 	bl	8000b78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_ADC_MspInit+0xdc>)
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b00a      	add	sp, #40	; 0x28
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40012400 	.word	0x40012400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	200004d8 	.word	0x200004d8
 80016d4:	40020008 	.word	0x40020008

080016d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	05db      	lsls	r3, r3, #23
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d10c      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_TIM_Base_MspInit+0x6c>)
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_TIM_Base_MspInit+0x6c>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	61da      	str	r2, [r3, #28]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_TIM_Base_MspInit+0x6c>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001704:	e01a      	b.n	800173c <HAL_TIM_Base_MspInit+0x64>
  else if(htim_base->Instance==TIM14)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_TIM_Base_MspInit+0x70>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d115      	bne.n	800173c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_TIM_Base_MspInit+0x6c>)
 8001712:	69da      	ldr	r2, [r3, #28]
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_TIM_Base_MspInit+0x6c>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0049      	lsls	r1, r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	61da      	str	r2, [r3, #28]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_TIM_Base_MspInit+0x6c>)
 8001720:	69da      	ldr	r2, [r3, #28]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4013      	ands	r3, r2
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	2013      	movs	r0, #19
 8001732:	f000 fdeb 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001736:	2013      	movs	r0, #19
 8001738:	f000 fdfd 	bl	8002336 <HAL_NVIC_EnableIRQ>
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b004      	add	sp, #16
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	40002000 	.word	0x40002000

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 f91a 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	0018      	movs	r0, r3
 8001788:	f001 f958 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	0018      	movs	r0, r3
 8001792:	f001 f953 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <DMA1_Channel1_IRQHandler+0x14>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 fe92 	bl	80024cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	200004d8 	.word	0x200004d8

080017b4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	statusLedController();
 80017b8:	f7ff f9e4 	bl	8000b84 <statusLedController>

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <TIM14_IRQHandler+0x18>)
 80017be:	0018      	movs	r0, r3
 80017c0:	f003 fc26 	bl	8005010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	20000498 	.word	0x20000498

080017d0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <USB_IRQHandler+0x14>)
 80017d6:	0018      	movs	r0, r3
 80017d8:	f001 fa82 	bl	8002ce0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	200011f4 	.word	0x200011f4

080017e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <get8MSB>:
#include "main.h"
#include "utils.h"


//Utils functions
uint8_t get8MSB(uint16_t val){
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	0002      	movs	r2, r0
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	801a      	strh	r2, [r3, #0]
	return val/256;
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b29b      	uxth	r3, r3
 8001806:	b2db      	uxtb	r3, r3
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}

08001810 <get8LSB>:
uint8_t get8LSB(uint16_t val){
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	0002      	movs	r2, r0
 8001818:	1dbb      	adds	r3, r7, #6
 800181a:	801a      	strh	r2, [r3, #0]
	return val%256;
 800181c:	1dbb      	adds	r3, r7, #6
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b002      	add	sp, #8
 8001828:	bd80      	pop	{r7, pc}

0800182a <get16MSB>:
uint16_t get16MSB(uint32_t val){
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	return val/65536;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	b29b      	uxth	r3, r3
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <get16LSB>:
uint16_t get16LSB(uint32_t val){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	return val%65536;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	b29b      	uxth	r3, r3
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}

08001854 <getConfigBits>:



uint8_t getConfigBits(){
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
	uint8_t config = HAL_GPIO_ReadPin(CONFIG_BIT0_GPIO_Port, CONFIG_BIT0_Pin);
 800185a:	1dfc      	adds	r4, r7, #7
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <getConfigBits+0x70>)
 800185e:	2101      	movs	r1, #1
 8001860:	0018      	movs	r0, r3
 8001862:	f001 f895 	bl	8002990 <HAL_GPIO_ReadPin>
 8001866:	0003      	movs	r3, r0
 8001868:	7023      	strb	r3, [r4, #0]
	config += 2 * HAL_GPIO_ReadPin(CONFIG_BIT1_GPIO_Port, CONFIG_BIT1_Pin);
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <getConfigBits+0x70>)
 800186c:	2102      	movs	r1, #2
 800186e:	0018      	movs	r0, r3
 8001870:	f001 f88e 	bl	8002990 <HAL_GPIO_ReadPin>
 8001874:	0003      	movs	r3, r0
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	b2d9      	uxtb	r1, r3
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	1dfa      	adds	r2, r7, #7
 800187e:	7812      	ldrb	r2, [r2, #0]
 8001880:	188a      	adds	r2, r1, r2
 8001882:	701a      	strb	r2, [r3, #0]
	config += 4 * HAL_GPIO_ReadPin(CONFIG_BIT2_GPIO_Port, CONFIG_BIT2_Pin);
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <getConfigBits+0x70>)
 8001886:	2104      	movs	r1, #4
 8001888:	0018      	movs	r0, r3
 800188a:	f001 f881 	bl	8002990 <HAL_GPIO_ReadPin>
 800188e:	0003      	movs	r3, r0
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	1dfa      	adds	r2, r7, #7
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	188a      	adds	r2, r1, r2
 800189c:	701a      	strb	r2, [r3, #0]
	config += 8 * HAL_GPIO_ReadPin(CONFIG_BIT3_GPIO_Port, CONFIG_BIT3_Pin);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <getConfigBits+0x70>)
 80018a0:	2108      	movs	r1, #8
 80018a2:	0018      	movs	r0, r3
 80018a4:	f001 f874 	bl	8002990 <HAL_GPIO_ReadPin>
 80018a8:	0003      	movs	r3, r0
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	1dfa      	adds	r2, r7, #7
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	188a      	adds	r2, r1, r2
 80018b6:	701a      	strb	r2, [r3, #0]
	return config;
 80018b8:	1dfb      	adds	r3, r7, #7
 80018ba:	781b      	ldrb	r3, [r3, #0]
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b003      	add	sp, #12
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	48000800 	.word	0x48000800

080018c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ce:	490e      	ldr	r1, [pc, #56]	; (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e4:	4c0b      	ldr	r4, [pc, #44]	; (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018f2:	f7ff ff79 	bl	80017e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80018f6:	f008 fa4b 	bl	8009d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fa:	f7fe fef1 	bl	80006e0 <main>

080018fe <LoopForever>:

LoopForever:
    b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   r0, =_estack
 8001900:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800190c:	0800a024 	.word	0x0800a024
  ldr r2, =_sbss
 8001910:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001914:	200014e8 	.word	0x200014e8

08001918 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_COMP_IRQHandler>
	...

0800191c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_Init+0x24>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_Init+0x24>)
 8001926:	2110      	movs	r1, #16
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800192c:	2000      	movs	r0, #0
 800192e:	f000 f809 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001932:	f7ff fe3b 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_InitTick+0x5c>)
 800194e:	681c      	ldr	r4, [r3, #0]
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_InitTick+0x60>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	0019      	movs	r1, r3
 8001956:	23fa      	movs	r3, #250	; 0xfa
 8001958:	0098      	lsls	r0, r3, #2
 800195a:	f7fe fbd5 	bl	8000108 <__udivsi3>
 800195e:	0003      	movs	r3, r0
 8001960:	0019      	movs	r1, r3
 8001962:	0020      	movs	r0, r4
 8001964:	f7fe fbd0 	bl	8000108 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	0018      	movs	r0, r3
 800196c:	f000 fcf3 	bl	8002356 <HAL_SYSTICK_Config>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d001      	beq.n	8001978 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e00f      	b.n	8001998 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d80b      	bhi.n	8001996 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	2301      	movs	r3, #1
 8001982:	425b      	negs	r3, r3
 8001984:	2200      	movs	r2, #0
 8001986:	0018      	movs	r0, r3
 8001988:	f000 fcc0 	bl	800230c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_InitTick+0x64>)
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b003      	add	sp, #12
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	20000004 	.word	0x20000004
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x1c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	001a      	movs	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	18d2      	adds	r2, r2, r3
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_IncTick+0x20>)
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	2000055c 	.word	0x2000055c

080019d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_GetTick+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	2000055c 	.word	0x2000055c

080019e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e125      	b.n	8001c4e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2234      	movs	r2, #52	; 0x34
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff fdea 	bl	80015f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a24:	2210      	movs	r2, #16
 8001a26:	4013      	ands	r3, r2
 8001a28:	d000      	beq.n	8001a2c <HAL_ADC_Init+0x48>
 8001a2a:	e103      	b.n	8001c34 <HAL_ADC_Init+0x250>
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d000      	beq.n	8001a38 <HAL_ADC_Init+0x54>
 8001a36:	e0fd      	b.n	8001c34 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a42:	d000      	beq.n	8001a46 <HAL_ADC_Init+0x62>
 8001a44:	e0f6      	b.n	8001c34 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	4a83      	ldr	r2, [pc, #524]	; (8001c58 <HAL_ADC_Init+0x274>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2202      	movs	r2, #2
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d112      	bne.n	8001a8a <HAL_ADC_Init+0xa6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d009      	beq.n	8001a86 <HAL_ADC_Init+0xa2>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_Init+0xa6>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_ADC_Init+0xa8>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d116      	bne.n	8001abe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2218      	movs	r2, #24
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	0899      	lsrs	r1, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4964      	ldr	r1, [pc, #400]	; (8001c5c <HAL_ADC_Init+0x278>)
 8001aca:	400a      	ands	r2, r1
 8001acc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7e1b      	ldrb	r3, [r3, #24]
 8001ad2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7e5b      	ldrb	r3, [r3, #25]
 8001ad8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ada:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7e9b      	ldrb	r3, [r3, #26]
 8001ae0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ae2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d002      	beq.n	8001af2 <HAL_ADC_Init+0x10e>
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	e000      	b.n	8001af4 <HAL_ADC_Init+0x110>
 8001af2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001af4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001afa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_Init+0x124>
 8001b04:	2304      	movs	r3, #4
 8001b06:	e000      	b.n	8001b0a <HAL_ADC_Init+0x126>
 8001b08:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001b0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2124      	movs	r1, #36	; 0x24
 8001b10:	5c5b      	ldrb	r3, [r3, r1]
 8001b12:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b14:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7edb      	ldrb	r3, [r3, #27]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d115      	bne.n	8001b50 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e9b      	ldrb	r3, [r3, #26]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	0252      	lsls	r2, r2, #9
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	e00b      	b.n	8001b50 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	2201      	movs	r2, #1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	23c2      	movs	r3, #194	; 0xc2
 8001b56:	33ff      	adds	r3, #255	; 0xff
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d007      	beq.n	8001b6c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b64:	4313      	orrs	r3, r2
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	055b      	lsls	r3, r3, #21
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d01b      	beq.n	8001bc0 <HAL_ADC_Init+0x1dc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d017      	beq.n	8001bc0 <HAL_ADC_Init+0x1dc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d013      	beq.n	8001bc0 <HAL_ADC_Init+0x1dc>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d00f      	beq.n	8001bc0 <HAL_ADC_Init+0x1dc>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_ADC_Init+0x1dc>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d007      	beq.n	8001bc0 <HAL_ADC_Init+0x1dc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d003      	beq.n	8001bc0 <HAL_ADC_Init+0x1dc>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	2b07      	cmp	r3, #7
 8001bbe:	d112      	bne.n	8001be6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2107      	movs	r1, #7
 8001bcc:	438a      	bics	r2, r1
 8001bce:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6959      	ldr	r1, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	2207      	movs	r2, #7
 8001bdc:	401a      	ands	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_ADC_Init+0x27c>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d10b      	bne.n	8001c0e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	2203      	movs	r2, #3
 8001c02:	4393      	bics	r3, r2
 8001c04:	2201      	movs	r2, #1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c0c:	e01c      	b.n	8001c48 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	2212      	movs	r2, #18
 8001c14:	4393      	bics	r3, r2
 8001c16:	2210      	movs	r2, #16
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	2201      	movs	r2, #1
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c32:	e009      	b.n	8001c48 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	2210      	movs	r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001c40:	230f      	movs	r3, #15
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c48:	230f      	movs	r3, #15
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	fffffefd 	.word	0xfffffefd
 8001c5c:	fffe0219 	.word	0xfffe0219
 8001c60:	833fffe7 	.word	0x833fffe7

08001c64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2317      	movs	r3, #23
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4013      	ands	r3, r2
 8001c82:	d15e      	bne.n	8001d42 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2234      	movs	r2, #52	; 0x34
 8001c88:	5c9b      	ldrb	r3, [r3, r2]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x2e>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e05e      	b.n	8001d50 <HAL_ADC_Start_DMA+0xec>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2234      	movs	r2, #52	; 0x34
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	7e5b      	ldrb	r3, [r3, #25]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d007      	beq.n	8001cb2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001ca2:	2317      	movs	r3, #23
 8001ca4:	18fc      	adds	r4, r7, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f983 	bl	8001fb4 <ADC_Enable>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cb2:	2317      	movs	r3, #23
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d146      	bne.n	8001d4a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_ADC_Start_DMA+0xf4>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	0052      	lsls	r2, r2, #1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2234      	movs	r2, #52	; 0x34
 8001cd8:	2100      	movs	r1, #0
 8001cda:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_ADC_Start_DMA+0xf8>)
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_ADC_Start_DMA+0xfc>)
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_ADC_Start_DMA+0x100>)
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	221c      	movs	r2, #28
 8001cfa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2110      	movs	r1, #16
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2101      	movs	r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3340      	adds	r3, #64	; 0x40
 8001d26:	0019      	movs	r1, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f000 fb68 	bl	8002400 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d42:	2317      	movs	r3, #23
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	2202      	movs	r2, #2
 8001d48:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d4a:	2317      	movs	r3, #23
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b007      	add	sp, #28
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	fffff0fe 	.word	0xfffff0fe
 8001d5c:	080020ad 	.word	0x080020ad
 8001d60:	08002161 	.word	0x08002161
 8001d64:	0800217f 	.word	0x0800217f

08001d68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da2:	230f      	movs	r3, #15
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	055b      	lsls	r3, r3, #21
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d011      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x46>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d00d      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x46>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d009      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x46>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d005      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x46>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d001      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x46>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2234      	movs	r2, #52	; 0x34
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x54>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0d0      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x1f6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2234      	movs	r2, #52	; 0x34
 8001df0:	2101      	movs	r1, #1
 8001df2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d000      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x6a>
 8001e00:	e0b4      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a64      	ldr	r2, [pc, #400]	; (8001f98 <HAL_ADC_ConfigChannel+0x200>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x76>
 8001e0c:	e082      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d037      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d033      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d02f      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d02b      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d027      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d023      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d01f      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2b07      	cmp	r3, #7
 8001e66:	d01b      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2107      	movs	r1, #7
 8001e74:	400b      	ands	r3, r1
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d012      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2107      	movs	r1, #7
 8001e86:	438a      	bics	r2, r1
 8001e88:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6959      	ldr	r1, [r3, #20]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2207      	movs	r2, #7
 8001e96:	401a      	ands	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d007      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0x120>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b11      	cmp	r3, #17
 8001eae:	d003      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0x120>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b12      	cmp	r3, #18
 8001eb6:	d163      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001eb8:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_ADC_ConfigChannel+0x204>)
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d009      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0x140>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b11      	cmp	r3, #17
 8001eca:	d102      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x13a>
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	03db      	lsls	r3, r3, #15
 8001ed0:	e004      	b.n	8001edc <HAL_ADC_ConfigChannel+0x144>
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	045b      	lsls	r3, r3, #17
 8001ed6:	e001      	b.n	8001edc <HAL_ADC_ConfigChannel+0x144>
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_ADC_ConfigChannel+0x204>)
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d14a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_ADC_ConfigChannel+0x208>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	492d      	ldr	r1, [pc, #180]	; (8001fa4 <HAL_ADC_ConfigChannel+0x20c>)
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7fe f909 	bl	8000108 <__udivsi3>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	001a      	movs	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	189b      	adds	r3, r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x16e>
 8001f12:	e035      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4099      	lsls	r1, r3
 8001f22:	000b      	movs	r3, r1
 8001f24:	43d9      	mvns	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d007      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x1ae>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b11      	cmp	r3, #17
 8001f3c:	d003      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x1ae>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d11c      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_ADC_ConfigChannel+0x204>)
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d007      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x1ca>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b11      	cmp	r3, #17
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x1c6>
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_ADC_ConfigChannel+0x210>)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x1cc>
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_ADC_ConfigChannel+0x214>)
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x1cc>
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_ADC_ConfigChannel+0x218>)
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_ADC_ConfigChannel+0x204>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e009      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	2220      	movs	r2, #32
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2234      	movs	r2, #52	; 0x34
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	00001001 	.word	0x00001001
 8001f9c:	40012708 	.word	0x40012708
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	000f4240 	.word	0x000f4240
 8001fa8:	ffbfffff 	.word	0xffbfffff
 8001fac:	feffffff 	.word	0xfeffffff
 8001fb0:	ff7fffff 	.word	0xff7fffff

08001fb4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d112      	bne.n	8001ff8 <ADC_Enable+0x44>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d009      	beq.n	8001ff4 <ADC_Enable+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	401a      	ands	r2, r3
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d101      	bne.n	8001ff8 <ADC_Enable+0x44>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <ADC_Enable+0x46>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d14b      	bne.n	8002096 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <ADC_Enable+0xec>)
 8002006:	4013      	ands	r3, r2
 8002008:	d00d      	beq.n	8002026 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	2210      	movs	r2, #16
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	2201      	movs	r2, #1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e038      	b.n	8002098 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <ADC_Enable+0xf0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <ADC_Enable+0xf4>)
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe f863 	bl	8000108 <__udivsi3>
 8002042:	0003      	movs	r3, r0
 8002044:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002046:	e002      	b.n	800204e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3b01      	subs	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002054:	f7ff fcbc 	bl	80019d0 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800205c:	e014      	b.n	8002088 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800205e:	f7ff fcb7 	bl	80019d0 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d90d      	bls.n	8002088 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	2210      	movs	r2, #16
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	2201      	movs	r2, #1
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4013      	ands	r3, r2
 8002092:	2b01      	cmp	r3, #1
 8002094:	d1e3      	bne.n	800205e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	80000017 	.word	0x80000017
 80020a4:	20000004 	.word	0x20000004
 80020a8:	000f4240 	.word	0x000f4240

080020ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	2250      	movs	r2, #80	; 0x50
 80020c0:	4013      	ands	r3, r2
 80020c2:	d140      	bne.n	8002146 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	d12d      	bne.n	800213c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d129      	bne.n	800213c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2208      	movs	r2, #8
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d122      	bne.n	800213c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2204      	movs	r2, #4
 80020fe:	4013      	ands	r3, r2
 8002100:	d110      	bne.n	8002124 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	210c      	movs	r1, #12
 800210e:	438a      	bics	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	4a11      	ldr	r2, [pc, #68]	; (800215c <ADC_DMAConvCplt+0xb0>)
 8002118:	4013      	ands	r3, r2
 800211a:	2201      	movs	r2, #1
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
 8002122:	e00b      	b.n	800213c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	2220      	movs	r2, #32
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	2201      	movs	r2, #1
 8002136:	431a      	orrs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff fe12 	bl	8001d68 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002144:	e005      	b.n	8002152 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	0010      	movs	r0, r2
 8002150:	4798      	blx	r3
}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	fffffefe 	.word	0xfffffefe

08002160 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	0018      	movs	r0, r3
 8002172:	f7ff fe01 	bl	8001d78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b004      	add	sp, #16
 800217c:	bd80      	pop	{r7, pc}

0800217e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	431a      	orrs	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2204      	movs	r2, #4
 800219e:	431a      	orrs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7ff fdee 	bl	8001d88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b004      	add	sp, #16
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	0002      	movs	r2, r0
 80021bc:	1dfb      	adds	r3, r7, #7
 80021be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b7f      	cmp	r3, #127	; 0x7f
 80021c6:	d809      	bhi.n	80021dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	001a      	movs	r2, r3
 80021ce:	231f      	movs	r3, #31
 80021d0:	401a      	ands	r2, r3
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_EnableIRQ+0x30>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	4091      	lsls	r1, r2
 80021d8:	000a      	movs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
  }
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	0002      	movs	r2, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b7f      	cmp	r3, #127	; 0x7f
 80021fc:	d828      	bhi.n	8002250 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021fe:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <__NVIC_SetPriority+0xd4>)
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b25b      	sxtb	r3, r3
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	33c0      	adds	r3, #192	; 0xc0
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	589b      	ldr	r3, [r3, r2]
 800220e:	1dfa      	adds	r2, r7, #7
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	0011      	movs	r1, r2
 8002214:	2203      	movs	r2, #3
 8002216:	400a      	ands	r2, r1
 8002218:	00d2      	lsls	r2, r2, #3
 800221a:	21ff      	movs	r1, #255	; 0xff
 800221c:	4091      	lsls	r1, r2
 800221e:	000a      	movs	r2, r1
 8002220:	43d2      	mvns	r2, r2
 8002222:	401a      	ands	r2, r3
 8002224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	401a      	ands	r2, r3
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	2303      	movs	r3, #3
 8002236:	4003      	ands	r3, r0
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800223c:	481f      	ldr	r0, [pc, #124]	; (80022bc <__NVIC_SetPriority+0xd4>)
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	430a      	orrs	r2, r1
 8002248:	33c0      	adds	r3, #192	; 0xc0
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800224e:	e031      	b.n	80022b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <__NVIC_SetPriority+0xd8>)
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	0019      	movs	r1, r3
 8002258:	230f      	movs	r3, #15
 800225a:	400b      	ands	r3, r1
 800225c:	3b08      	subs	r3, #8
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3306      	adds	r3, #6
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	18d3      	adds	r3, r2, r3
 8002266:	3304      	adds	r3, #4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1dfa      	adds	r2, r7, #7
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	0011      	movs	r1, r2
 8002270:	2203      	movs	r2, #3
 8002272:	400a      	ands	r2, r1
 8002274:	00d2      	lsls	r2, r2, #3
 8002276:	21ff      	movs	r1, #255	; 0xff
 8002278:	4091      	lsls	r1, r2
 800227a:	000a      	movs	r2, r1
 800227c:	43d2      	mvns	r2, r2
 800227e:	401a      	ands	r2, r3
 8002280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	401a      	ands	r2, r3
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	0018      	movs	r0, r3
 8002290:	2303      	movs	r3, #3
 8002292:	4003      	ands	r3, r0
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002298:	4809      	ldr	r0, [pc, #36]	; (80022c0 <__NVIC_SetPriority+0xd8>)
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	001c      	movs	r4, r3
 80022a0:	230f      	movs	r3, #15
 80022a2:	4023      	ands	r3, r4
 80022a4:	3b08      	subs	r3, #8
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	430a      	orrs	r2, r1
 80022aa:	3306      	adds	r3, #6
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	18c3      	adds	r3, r0, r3
 80022b0:	3304      	adds	r3, #4
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b003      	add	sp, #12
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <SysTick_Config+0x40>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e010      	b.n	80022fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <SysTick_Config+0x44>)
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	3a01      	subs	r2, #1
 80022e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	2301      	movs	r3, #1
 80022e4:	425b      	negs	r3, r3
 80022e6:	2103      	movs	r1, #3
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff ff7d 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SysTick_Config+0x44>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SysTick_Config+0x44>)
 80022f6:	2207      	movs	r2, #7
 80022f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}
 8002304:	00ffffff 	.word	0x00ffffff
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	210f      	movs	r1, #15
 8002318:	187b      	adds	r3, r7, r1
 800231a:	1c02      	adds	r2, r0, #0
 800231c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	187b      	adds	r3, r7, r1
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	0011      	movs	r1, r2
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	0002      	movs	r2, r0
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b25b      	sxtb	r3, r3
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff ff33 	bl	80021b4 <__NVIC_EnableIRQ>
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff ffaf 	bl	80022c4 <SysTick_Config>
 8002366:	0003      	movs	r3, r0
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e036      	b.n	80023f4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2221      	movs	r2, #33	; 0x21
 800238a:	2102      	movs	r1, #2
 800238c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_DMA_Init+0x8c>)
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f946 	bl	8002668 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2221      	movs	r2, #33	; 0x21
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}  
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b004      	add	sp, #16
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	ffffc00f 	.word	0xffffc00f

08002400 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800240e:	2317      	movs	r3, #23
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	5c9b      	ldrb	r3, [r3, r2]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_DMA_Start_IT+0x24>
 8002420:	2302      	movs	r3, #2
 8002422:	e04f      	b.n	80024c4 <HAL_DMA_Start_IT+0xc4>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	2101      	movs	r1, #1
 800242a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2221      	movs	r2, #33	; 0x21
 8002430:	5c9b      	ldrb	r3, [r3, r2]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d13a      	bne.n	80024ae <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2221      	movs	r2, #33	; 0x21
 800243c:	2102      	movs	r1, #2
 800243e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	438a      	bics	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f8d7 	bl	8002610 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	210e      	movs	r1, #14
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e00f      	b.n	800249c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	210a      	movs	r1, #10
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2104      	movs	r1, #4
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2101      	movs	r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	2100      	movs	r1, #0
 80024b4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024b6:	2317      	movs	r3, #23
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80024be:	2317      	movs	r3, #23
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	781b      	ldrb	r3, [r3, #0]
} 
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b006      	add	sp, #24
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2204      	movs	r2, #4
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	d024      	beq.n	800253e <HAL_DMA_IRQHandler+0x72>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2204      	movs	r2, #4
 80024f8:	4013      	ands	r3, r2
 80024fa:	d020      	beq.n	800253e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2220      	movs	r2, #32
 8002504:	4013      	ands	r3, r2
 8002506:	d107      	bne.n	8002518 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2104      	movs	r1, #4
 8002514:	438a      	bics	r2, r1
 8002516:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	2104      	movs	r1, #4
 8002522:	4091      	lsls	r1, r2
 8002524:	000a      	movs	r2, r1
 8002526:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d100      	bne.n	8002532 <HAL_DMA_IRQHandler+0x66>
 8002530:	e06a      	b.n	8002608 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	0010      	movs	r0, r2
 800253a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800253c:	e064      	b.n	8002608 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2202      	movs	r2, #2
 8002544:	409a      	lsls	r2, r3
 8002546:	0013      	movs	r3, r2
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	d02b      	beq.n	80025a6 <HAL_DMA_IRQHandler+0xda>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2202      	movs	r2, #2
 8002552:	4013      	ands	r3, r2
 8002554:	d027      	beq.n	80025a6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2220      	movs	r2, #32
 800255e:	4013      	ands	r3, r2
 8002560:	d10b      	bne.n	800257a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	210a      	movs	r1, #10
 800256e:	438a      	bics	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2221      	movs	r2, #33	; 0x21
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	2102      	movs	r1, #2
 8002584:	4091      	lsls	r1, r2
 8002586:	000a      	movs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	d036      	beq.n	8002608 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	0010      	movs	r0, r2
 80025a2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025a4:	e030      	b.n	8002608 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2208      	movs	r2, #8
 80025ac:	409a      	lsls	r2, r3
 80025ae:	0013      	movs	r3, r2
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	d028      	beq.n	8002608 <HAL_DMA_IRQHandler+0x13c>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4013      	ands	r3, r2
 80025bc:	d024      	beq.n	8002608 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	210e      	movs	r1, #14
 80025ca:	438a      	bics	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	2101      	movs	r1, #1
 80025d8:	4091      	lsls	r1, r2
 80025da:	000a      	movs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2221      	movs	r2, #33	; 0x21
 80025e8:	2101      	movs	r1, #1
 80025ea:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	0010      	movs	r0, r2
 8002604:	4798      	blx	r3
    }
   }
}  
 8002606:	e7ff      	b.n	8002608 <HAL_DMA_IRQHandler+0x13c>
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b004      	add	sp, #16
 800260e:	bd80      	pop	{r7, pc}

08002610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	2101      	movs	r1, #1
 8002628:	4091      	lsls	r1, r2
 800262a:	000a      	movs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b10      	cmp	r3, #16
 800263c:	d108      	bne.n	8002650 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800264e:	e007      	b.n	8002660 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	60da      	str	r2, [r3, #12]
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}

08002668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a08      	ldr	r2, [pc, #32]	; (8002698 <DMA_CalcBaseAndBitshift+0x30>)
 8002676:	4694      	mov	ip, r2
 8002678:	4463      	add	r3, ip
 800267a:	2114      	movs	r1, #20
 800267c:	0018      	movs	r0, r3
 800267e:	f7fd fd43 	bl	8000108 <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	009a      	lsls	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <DMA_CalcBaseAndBitshift+0x34>)
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}
 8002698:	bffdfff8 	.word	0xbffdfff8
 800269c:	40020000 	.word	0x40020000

080026a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ae:	e155      	b.n	800295c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4091      	lsls	r1, r2
 80026ba:	000a      	movs	r2, r1
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d100      	bne.n	80026c8 <HAL_GPIO_Init+0x28>
 80026c6:	e146      	b.n	8002956 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d00b      	beq.n	80026e8 <HAL_GPIO_Init+0x48>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d007      	beq.n	80026e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026dc:	2b11      	cmp	r3, #17
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d130      	bne.n	800274a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	409a      	lsls	r2, r3
 80026f6:	0013      	movs	r3, r2
 80026f8:	43da      	mvns	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	409a      	lsls	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271e:	2201      	movs	r2, #1
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	43da      	mvns	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	2201      	movs	r2, #1
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
 800273c:	0013      	movs	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	409a      	lsls	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0xea>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b12      	cmp	r3, #18
 8002788:	d123      	bne.n	80027d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	58d3      	ldr	r3, [r2, r3]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2207      	movs	r2, #7
 800279c:	4013      	ands	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	43da      	mvns	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2107      	movs	r1, #7
 80027b6:	400b      	ands	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	2203      	movs	r2, #3
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	43da      	mvns	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	401a      	ands	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	055b      	lsls	r3, r3, #21
 800280e:	4013      	ands	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_GPIO_Init+0x174>
 8002812:	e0a0      	b.n	8002956 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002814:	4b57      	ldr	r3, [pc, #348]	; (8002974 <HAL_GPIO_Init+0x2d4>)
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	4b56      	ldr	r3, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x2d4>)
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	619a      	str	r2, [r3, #24]
 8002820:	4b54      	ldr	r3, [pc, #336]	; (8002974 <HAL_GPIO_Init+0x2d4>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x2d8>)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	589b      	ldr	r3, [r3, r2]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2203      	movs	r2, #3
 800283e:	4013      	ands	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	409a      	lsls	r2, r3
 8002846:	0013      	movs	r3, r2
 8002848:	43da      	mvns	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	2390      	movs	r3, #144	; 0x90
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	429a      	cmp	r2, r3
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x1ee>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a47      	ldr	r2, [pc, #284]	; (800297c <HAL_GPIO_Init+0x2dc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x1ea>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a46      	ldr	r2, [pc, #280]	; (8002980 <HAL_GPIO_Init+0x2e0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x1e6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a45      	ldr	r2, [pc, #276]	; (8002984 <HAL_GPIO_Init+0x2e4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x1e2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a44      	ldr	r2, [pc, #272]	; (8002988 <HAL_GPIO_Init+0x2e8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x1de>
 800287a:	2304      	movs	r3, #4
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x1f0>
 800287e:	2305      	movs	r3, #5
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x1f0>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x1f0>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x1f0>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x1f0>
 800288e:	2300      	movs	r3, #0
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	2103      	movs	r1, #3
 8002894:	400a      	ands	r2, r1
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a0:	4935      	ldr	r1, [pc, #212]	; (8002978 <HAL_GPIO_Init+0x2d8>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_GPIO_Init+0x2ec>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43da      	mvns	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	025b      	lsls	r3, r3, #9
 80028c6:	4013      	ands	r3, r2
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <HAL_GPIO_Init+0x2ec>)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028d8:	4b2c      	ldr	r3, [pc, #176]	; (800298c <HAL_GPIO_Init+0x2ec>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	029b      	lsls	r3, r3, #10
 80028f0:	4013      	ands	r3, r2
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_GPIO_Init+0x2ec>)
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_GPIO_Init+0x2ec>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43da      	mvns	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	035b      	lsls	r3, r3, #13
 800291a:	4013      	ands	r3, r2
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_GPIO_Init+0x2ec>)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <HAL_GPIO_Init+0x2ec>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43da      	mvns	r2, r3
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	039b      	lsls	r3, r3, #14
 8002944:	4013      	ands	r3, r2
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_GPIO_Init+0x2ec>)
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	40da      	lsrs	r2, r3
 8002964:	1e13      	subs	r3, r2, #0
 8002966:	d000      	beq.n	800296a <HAL_GPIO_Init+0x2ca>
 8002968:	e6a2      	b.n	80026b0 <HAL_GPIO_Init+0x10>
  } 
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b006      	add	sp, #24
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40021000 	.word	0x40021000
 8002978:	40010000 	.word	0x40010000
 800297c:	48000400 	.word	0x48000400
 8002980:	48000800 	.word	0x48000800
 8002984:	48000c00 	.word	0x48000c00
 8002988:	48001000 	.word	0x48001000
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	000a      	movs	r2, r1
 800299a:	1cbb      	adds	r3, r7, #2
 800299c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	1cba      	adds	r2, r7, #2
 80029a4:	8812      	ldrh	r2, [r2, #0]
 80029a6:	4013      	ands	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80029aa:	230f      	movs	r3, #15
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e003      	b.n	80029bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b4:	230f      	movs	r3, #15
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80029bc:	230f      	movs	r3, #15
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	781b      	ldrb	r3, [r3, #0]
  }
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b004      	add	sp, #16
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	0008      	movs	r0, r1
 80029d4:	0011      	movs	r1, r2
 80029d6:	1cbb      	adds	r3, r7, #2
 80029d8:	1c02      	adds	r2, r0, #0
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	1c7b      	adds	r3, r7, #1
 80029de:	1c0a      	adds	r2, r1, #0
 80029e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e2:	1c7b      	adds	r3, r7, #1
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ea:	1cbb      	adds	r3, r7, #2
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f2:	e003      	b.n	80029fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029f4:	1cbb      	adds	r3, r7, #2
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	1cbb      	adds	r3, r7, #2
 8002a10:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a18:	1cbb      	adds	r3, r7, #2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	1cb9      	adds	r1, r7, #2
 8002a28:	8809      	ldrh	r1, [r1, #0]
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	619a      	str	r2, [r3, #24]
}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b004      	add	sp, #16
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	0002      	movs	r2, r0
 8002a44:	1dbb      	adds	r3, r7, #6
 8002a46:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	1dba      	adds	r2, r7, #6
 8002a4e:	8812      	ldrh	r2, [r2, #0]
 8002a50:	4013      	ands	r3, r2
 8002a52:	d008      	beq.n	8002a66 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002a56:	1dba      	adds	r2, r7, #6
 8002a58:	8812      	ldrh	r2, [r2, #0]
 8002a5a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a5c:	1dbb      	adds	r3, r7, #6
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7fe f871 	bl	8000b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a76:	b08b      	sub	sp, #44	; 0x2c
 8002a78:	af06      	add	r7, sp, #24
 8002a7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e100      	b.n	8002c88 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a81      	ldr	r2, [pc, #516]	; (8002c90 <HAL_PCD_Init+0x21c>)
 8002a8a:	5c9b      	ldrb	r3, [r3, r2]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	23aa      	movs	r3, #170	; 0xaa
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	2100      	movs	r1, #0
 8002a9a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f006 fe12 	bl	80096c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_PCD_Init+0x21c>)
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f002 fe47 	bl	8005744 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab6:	230f      	movs	r3, #15
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e058      	b.n	8002b72 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac0:	200f      	movs	r0, #15
 8002ac2:	183b      	adds	r3, r7, r0
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	0013      	movs	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	189b      	adds	r3, r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	18cb      	adds	r3, r1, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ada:	183b      	adds	r3, r7, r0
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	0013      	movs	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	183a      	adds	r2, r7, r0
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002af0:	183b      	adds	r3, r7, r0
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	0004      	movs	r4, r0
 8002af6:	183b      	adds	r3, r7, r0
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b298      	uxth	r0, r3
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	0013      	movs	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	18cb      	adds	r3, r1, r3
 8002b08:	3336      	adds	r3, #54	; 0x36
 8002b0a:	1c02      	adds	r2, r0, #0
 8002b0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	0013      	movs	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	18cb      	adds	r3, r1, r3
 8002b20:	3303      	adds	r3, #3
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b26:	193b      	adds	r3, r7, r4
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	189b      	adds	r3, r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	18cb      	adds	r3, r1, r3
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	0013      	movs	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	18cb      	adds	r3, r1, r3
 8002b4c:	333c      	adds	r3, #60	; 0x3c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	0013      	movs	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	189b      	adds	r3, r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	18cb      	adds	r3, r1, r3
 8002b62:	3340      	adds	r3, #64	; 0x40
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	3201      	adds	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	230f      	movs	r3, #15
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d39f      	bcc.n	8002ac0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b80:	230f      	movs	r3, #15
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e056      	b.n	8002c38 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b8a:	240f      	movs	r4, #15
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	781a      	ldrb	r2, [r3, #0]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	236a      	movs	r3, #106	; 0x6a
 8002b94:	33ff      	adds	r3, #255	; 0xff
 8002b96:	0019      	movs	r1, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	18c3      	adds	r3, r0, r3
 8002ba2:	185b      	adds	r3, r3, r1
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	23b4      	movs	r3, #180	; 0xb4
 8002bb0:	0059      	lsls	r1, r3, #1
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	18c3      	adds	r3, r0, r3
 8002bbc:	185b      	adds	r3, r3, r1
 8002bbe:	193a      	adds	r2, r7, r4
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	236c      	movs	r3, #108	; 0x6c
 8002bcc:	33ff      	adds	r3, #255	; 0xff
 8002bce:	0019      	movs	r1, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	189b      	adds	r3, r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	18c3      	adds	r3, r0, r3
 8002bda:	185b      	adds	r3, r3, r1
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	23bc      	movs	r3, #188	; 0xbc
 8002be8:	0059      	lsls	r1, r3, #1
 8002bea:	0013      	movs	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	18c3      	adds	r3, r0, r3
 8002bf4:	185b      	adds	r3, r3, r1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	23be      	movs	r3, #190	; 0xbe
 8002c02:	0059      	lsls	r1, r3, #1
 8002c04:	0013      	movs	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	18c3      	adds	r3, r0, r3
 8002c0e:	185b      	adds	r3, r3, r1
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	23c0      	movs	r3, #192	; 0xc0
 8002c1c:	0059      	lsls	r1, r3, #1
 8002c1e:	0013      	movs	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	18c3      	adds	r3, r0, r3
 8002c28:	185b      	adds	r3, r3, r1
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	3201      	adds	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3a1      	bcc.n	8002b8a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	466a      	mov	r2, sp
 8002c4e:	0011      	movs	r1, r2
 8002c50:	001a      	movs	r2, r3
 8002c52:	3210      	adds	r2, #16
 8002c54:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002c56:	c170      	stmia	r1!, {r4, r5, r6}
 8002c58:	ca30      	ldmia	r2!, {r4, r5}
 8002c5a:	c130      	stmia	r1!, {r4, r5}
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f002 fd89 	bl	8005778 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2224      	movs	r2, #36	; 0x24
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_PCD_Init+0x21c>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d103      	bne.n	8002c86 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f001 fb63 	bl	800434c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b005      	add	sp, #20
 8002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c90:	000002a9 	.word	0x000002a9

08002c94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	23aa      	movs	r3, #170	; 0xaa
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_Start+0x18>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e014      	b.n	8002cd6 <HAL_PCD_Start+0x42>
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	23aa      	movs	r3, #170	; 0xaa
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f002 fd2c 	bl	8005718 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f004 fd05 	bl	80076d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	23aa      	movs	r3, #170	; 0xaa
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b002      	add	sp, #8
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f004 fd07 	bl	8007700 <USB_ReadInterrupts>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d103      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 fbbb 	bl	8003480 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f004 fcf6 	bl	8007700 <USB_ReadInterrupts>
 8002d14:	0002      	movs	r2, r0
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d114      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2244      	movs	r2, #68	; 0x44
 8002d2a:	5a9b      	ldrh	r3, [r3, r2]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	49a2      	ldr	r1, [pc, #648]	; (8002fbc <HAL_PCD_IRQHandler+0x2dc>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	b291      	uxth	r1, r2
 8002d38:	2244      	movs	r2, #68	; 0x44
 8002d3a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f006 fd4d 	bl	80097de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2100      	movs	r1, #0
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f945 	bl	8002fd8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f004 fcd4 	bl	8007700 <USB_ReadInterrupts>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	01db      	lsls	r3, r3, #7
 8002d5e:	401a      	ands	r2, r3
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	01db      	lsls	r3, r3, #7
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10b      	bne.n	8002d80 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2244      	movs	r2, #68	; 0x44
 8002d6e:	5a9b      	ldrh	r3, [r3, r2]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4992      	ldr	r1, [pc, #584]	; (8002fc0 <HAL_PCD_IRQHandler+0x2e0>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	b291      	uxth	r1, r2
 8002d7c:	2244      	movs	r2, #68	; 0x44
 8002d7e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f004 fcbb 	bl	8007700 <USB_ReadInterrupts>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	019b      	lsls	r3, r3, #6
 8002d90:	401a      	ands	r2, r3
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d10b      	bne.n	8002db2 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2244      	movs	r2, #68	; 0x44
 8002da0:	5a9b      	ldrh	r3, [r3, r2]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4986      	ldr	r1, [pc, #536]	; (8002fc4 <HAL_PCD_IRQHandler+0x2e4>)
 8002daa:	400a      	ands	r2, r1
 8002dac:	b291      	uxth	r1, r2
 8002dae:	2244      	movs	r2, #68	; 0x44
 8002db0:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f004 fca2 	bl	8007700 <USB_ReadInterrupts>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	015b      	lsls	r3, r3, #5
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	015b      	lsls	r3, r3, #5
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d137      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	5a9b      	ldrh	r3, [r3, r2]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2104      	movs	r1, #4
 8002ddc:	438a      	bics	r2, r1
 8002dde:	b291      	uxth	r1, r2
 8002de0:	2240      	movs	r2, #64	; 0x40
 8002de2:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2240      	movs	r2, #64	; 0x40
 8002dea:	5a9b      	ldrh	r3, [r3, r2]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2108      	movs	r1, #8
 8002df4:	438a      	bics	r2, r1
 8002df6:	b291      	uxth	r1, r2
 8002df8:	2240      	movs	r2, #64	; 0x40
 8002dfa:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	23b8      	movs	r3, #184	; 0xb8
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	5cd3      	ldrb	r3, [r2, r3]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d109      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	23b8      	movs	r3, #184	; 0xb8
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	2100      	movs	r1, #0
 8002e10:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2100      	movs	r1, #0
 8002e16:	0018      	movs	r0, r3
 8002e18:	f001 fac2 	bl	80043a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f006 fd1e 	bl	8009860 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2244      	movs	r2, #68	; 0x44
 8002e2a:	5a9b      	ldrh	r3, [r3, r2]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4965      	ldr	r1, [pc, #404]	; (8002fc8 <HAL_PCD_IRQHandler+0x2e8>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	b291      	uxth	r1, r2
 8002e38:	2244      	movs	r2, #68	; 0x44
 8002e3a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f004 fc5d 	bl	8007700 <USB_ReadInterrupts>
 8002e46:	0002      	movs	r2, r0
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d127      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	5a9b      	ldrh	r3, [r3, r2]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2108      	movs	r1, #8
 8002e66:	430a      	orrs	r2, r1
 8002e68:	b291      	uxth	r1, r2
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2244      	movs	r2, #68	; 0x44
 8002e74:	5a9b      	ldrh	r3, [r3, r2]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4953      	ldr	r1, [pc, #332]	; (8002fcc <HAL_PCD_IRQHandler+0x2ec>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	b291      	uxth	r1, r2
 8002e82:	2244      	movs	r2, #68	; 0x44
 8002e84:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	5a9b      	ldrh	r3, [r3, r2]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2104      	movs	r1, #4
 8002e96:	430a      	orrs	r2, r1
 8002e98:	b291      	uxth	r1, r2
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f006 fcc1 	bl	8009828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f004 fc28 	bl	8007700 <USB_ReadInterrupts>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b80      	cmp	r3, #128	; 0x80
 8002eb8:	d145      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2244      	movs	r2, #68	; 0x44
 8002ec0:	5a9b      	ldrh	r3, [r3, r2]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	438a      	bics	r2, r1
 8002ecc:	b291      	uxth	r1, r2
 8002ece:	2244      	movs	r2, #68	; 0x44
 8002ed0:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	23b8      	movs	r3, #184	; 0xb8
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d12f      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2240      	movs	r2, #64	; 0x40
 8002ee4:	5a9b      	ldrh	r3, [r3, r2]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2104      	movs	r1, #4
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	b291      	uxth	r1, r2
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2240      	movs	r2, #64	; 0x40
 8002efc:	5a9b      	ldrh	r3, [r3, r2]
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2108      	movs	r1, #8
 8002f06:	430a      	orrs	r2, r1
 8002f08:	b291      	uxth	r1, r2
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	23b8      	movs	r3, #184	; 0xb8
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	2101      	movs	r1, #1
 8002f16:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2254      	movs	r2, #84	; 0x54
 8002f1e:	5a9b      	ldrh	r3, [r3, r2]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	223c      	movs	r2, #60	; 0x3c
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	23b9      	movs	r3, #185	; 0xb9
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2101      	movs	r1, #1
 8002f36:	0018      	movs	r0, r3
 8002f38:	f001 fa32 	bl	80043a0 <HAL_PCDEx_LPM_Callback>
 8002f3c:	e003      	b.n	8002f46 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f006 fc71 	bl	8009828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f004 fbd8 	bl	8007700 <USB_ReadInterrupts>
 8002f50:	0002      	movs	r2, r0
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	401a      	ands	r2, r3
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d10f      	bne.n	8002f80 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2244      	movs	r2, #68	; 0x44
 8002f66:	5a9b      	ldrh	r3, [r3, r2]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_PCD_IRQHandler+0x2f0>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	b291      	uxth	r1, r2
 8002f74:	2244      	movs	r2, #68	; 0x44
 8002f76:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f006 fc20 	bl	80097c0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f004 fbbb 	bl	8007700 <USB_ReadInterrupts>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	401a      	ands	r2, r3
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d10b      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2244      	movs	r2, #68	; 0x44
 8002fa0:	5a9b      	ldrh	r3, [r3, r2]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	490a      	ldr	r1, [pc, #40]	; (8002fd4 <HAL_PCD_IRQHandler+0x2f4>)
 8002faa:	400a      	ands	r2, r1
 8002fac:	b291      	uxth	r1, r2
 8002fae:	2244      	movs	r2, #68	; 0x44
 8002fb0:	5299      	strh	r1, [r3, r2]
  }
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	fffffbff 	.word	0xfffffbff
 8002fc0:	ffffbfff 	.word	0xffffbfff
 8002fc4:	ffffdfff 	.word	0xffffdfff
 8002fc8:	ffffefff 	.word	0xffffefff
 8002fcc:	fffff7ff 	.word	0xfffff7ff
 8002fd0:	fffffdff 	.word	0xfffffdff
 8002fd4:	fffffeff 	.word	0xfffffeff

08002fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	000a      	movs	r2, r1
 8002fe2:	1cfb      	adds	r3, r7, #3
 8002fe4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	23aa      	movs	r3, #170	; 0xaa
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	5cd3      	ldrb	r3, [r2, r3]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_PCD_SetAddress+0x1e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e017      	b.n	8003026 <HAL_PCD_SetAddress+0x4e>
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	23aa      	movs	r3, #170	; 0xaa
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	1cfa      	adds	r2, r7, #3
 8003004:	2124      	movs	r1, #36	; 0x24
 8003006:	7812      	ldrb	r2, [r2, #0]
 8003008:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	1cfb      	adds	r3, r7, #3
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	0019      	movs	r1, r3
 8003014:	0010      	movs	r0, r2
 8003016:	f004 fb49 	bl	80076ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	23aa      	movs	r3, #170	; 0xaa
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	2100      	movs	r1, #0
 8003022:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	000c      	movs	r4, r1
 8003038:	0010      	movs	r0, r2
 800303a:	0019      	movs	r1, r3
 800303c:	1cfb      	adds	r3, r7, #3
 800303e:	1c22      	adds	r2, r4, #0
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	003b      	movs	r3, r7
 8003044:	1c02      	adds	r2, r0, #0
 8003046:	801a      	strh	r2, [r3, #0]
 8003048:	1cbb      	adds	r3, r7, #2
 800304a:	1c0a      	adds	r2, r1, #0
 800304c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800304e:	230b      	movs	r3, #11
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003056:	1cfb      	adds	r3, r7, #3
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b25b      	sxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	da0f      	bge.n	8003080 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003060:	1cfb      	adds	r3, r7, #3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2207      	movs	r2, #7
 8003066:	4013      	ands	r3, r2
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	0013      	movs	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	189b      	adds	r3, r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	705a      	strb	r2, [r3, #1]
 800307e:	e00f      	b.n	80030a0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003080:	1cfb      	adds	r3, r7, #3
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2207      	movs	r2, #7
 8003086:	401a      	ands	r2, r3
 8003088:	0013      	movs	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	189b      	adds	r3, r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3369      	adds	r3, #105	; 0x69
 8003092:	33ff      	adds	r3, #255	; 0xff
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	18d3      	adds	r3, r2, r3
 8003098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030a0:	1cfb      	adds	r3, r7, #3
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2207      	movs	r2, #7
 80030a6:	4013      	ands	r3, r2
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ae:	003b      	movs	r3, r7
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1cba      	adds	r2, r7, #2
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030d0:	1cbb      	adds	r3, r7, #2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d102      	bne.n	80030de <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	23aa      	movs	r3, #170	; 0xaa
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	5cd3      	ldrb	r3, [r2, r3]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_PCD_EP_Open+0xc0>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e013      	b.n	8003116 <HAL_PCD_EP_Open+0xe8>
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	23aa      	movs	r3, #170	; 0xaa
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	2101      	movs	r1, #1
 80030f6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	0011      	movs	r1, r2
 8003100:	0018      	movs	r0, r3
 8003102:	f002 fb65 	bl	80057d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	23aa      	movs	r3, #170	; 0xaa
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	2100      	movs	r1, #0
 800310e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003110:	230b      	movs	r3, #11
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	781b      	ldrb	r3, [r3, #0]
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b005      	add	sp, #20
 800311c:	bd90      	pop	{r4, r7, pc}

0800311e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	000a      	movs	r2, r1
 8003128:	1cfb      	adds	r3, r7, #3
 800312a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800312c:	1cfb      	adds	r3, r7, #3
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	b25b      	sxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	da0f      	bge.n	8003156 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003136:	1cfb      	adds	r3, r7, #3
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2207      	movs	r2, #7
 800313c:	4013      	ands	r3, r2
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	0013      	movs	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	189b      	adds	r3, r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	705a      	strb	r2, [r3, #1]
 8003154:	e00f      	b.n	8003176 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003156:	1cfb      	adds	r3, r7, #3
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2207      	movs	r2, #7
 800315c:	401a      	ands	r2, r3
 800315e:	0013      	movs	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	189b      	adds	r3, r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3369      	adds	r3, #105	; 0x69
 8003168:	33ff      	adds	r3, #255	; 0xff
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003176:	1cfb      	adds	r3, r7, #3
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2207      	movs	r2, #7
 800317c:	4013      	ands	r3, r2
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	23aa      	movs	r3, #170	; 0xaa
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_PCD_EP_Close+0x76>
 8003190:	2302      	movs	r3, #2
 8003192:	e011      	b.n	80031b8 <HAL_PCD_EP_Close+0x9a>
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	23aa      	movs	r3, #170	; 0xaa
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	2101      	movs	r1, #1
 800319c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	0011      	movs	r1, r2
 80031a6:	0018      	movs	r0, r3
 80031a8:	f002 fe68 	bl	8005e7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	23aa      	movs	r3, #170	; 0xaa
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	2100      	movs	r1, #0
 80031b4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	200b      	movs	r0, #11
 80031ce:	183b      	adds	r3, r7, r0
 80031d0:	1c0a      	adds	r2, r1, #0
 80031d2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	0001      	movs	r1, r0
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2207      	movs	r2, #7
 80031dc:	401a      	ands	r2, r3
 80031de:	0013      	movs	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	3369      	adds	r3, #105	; 0x69
 80031e8:	33ff      	adds	r3, #255	; 0xff
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	18d3      	adds	r3, r2, r3
 80031ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003208:	187b      	adds	r3, r7, r1
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2207      	movs	r2, #7
 800320e:	4013      	ands	r3, r2
 8003210:	b2da      	uxtb	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003216:	187b      	adds	r3, r7, r1
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2207      	movs	r2, #7
 800321c:	4013      	ands	r3, r2
 800321e:	d107      	bne.n	8003230 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	0011      	movs	r1, r2
 8003228:	0018      	movs	r0, r3
 800322a:	f002 ffe7 	bl	80061fc <USB_EPStartXfer>
 800322e:	e006      	b.n	800323e <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	0011      	movs	r1, r2
 8003238:	0018      	movs	r0, r3
 800323a:	f002 ffdf 	bl	80061fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b006      	add	sp, #24
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	000a      	movs	r2, r1
 8003252:	1cfb      	adds	r3, r7, #3
 8003254:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003256:	1cfb      	adds	r3, r7, #3
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2207      	movs	r2, #7
 800325c:	401a      	ands	r2, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	23c2      	movs	r3, #194	; 0xc2
 8003262:	0059      	lsls	r1, r3, #1
 8003264:	0013      	movs	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	189b      	adds	r3, r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	18c3      	adds	r3, r0, r3
 800326e:	185b      	adds	r3, r3, r1
 8003270:	681b      	ldr	r3, [r3, #0]
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b002      	add	sp, #8
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	200b      	movs	r0, #11
 8003288:	183b      	adds	r3, r7, r0
 800328a:	1c0a      	adds	r2, r1, #0
 800328c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328e:	183b      	adds	r3, r7, r0
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2207      	movs	r2, #7
 8003294:	4013      	ands	r3, r2
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	0013      	movs	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	189b      	adds	r3, r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	18d3      	adds	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2224      	movs	r2, #36	; 0x24
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2201      	movs	r2, #1
 80032ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032cc:	183b      	adds	r3, r7, r0
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2207      	movs	r2, #7
 80032d2:	4013      	ands	r3, r2
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032da:	183b      	adds	r3, r7, r0
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2207      	movs	r2, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	d107      	bne.n	80032f4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f002 ff85 	bl	80061fc <USB_EPStartXfer>
 80032f2:	e006      	b.n	8003302 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	0011      	movs	r1, r2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f002 ff7d 	bl	80061fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	000a      	movs	r2, r1
 8003316:	1cfb      	adds	r3, r7, #3
 8003318:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800331a:	1cfb      	adds	r3, r7, #3
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2207      	movs	r2, #7
 8003320:	401a      	ands	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d901      	bls.n	800332e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e046      	b.n	80033bc <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800332e:	1cfb      	adds	r3, r7, #3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b25b      	sxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	da0f      	bge.n	8003358 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003338:	1cfb      	adds	r3, r7, #3
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2207      	movs	r2, #7
 800333e:	4013      	ands	r3, r2
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	0013      	movs	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	189b      	adds	r3, r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	705a      	strb	r2, [r3, #1]
 8003356:	e00d      	b.n	8003374 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003358:	1cfb      	adds	r3, r7, #3
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	0013      	movs	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	189b      	adds	r3, r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	3369      	adds	r3, #105	; 0x69
 8003366:	33ff      	adds	r3, #255	; 0xff
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	18d3      	adds	r3, r2, r3
 800336c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337a:	1cfb      	adds	r3, r7, #3
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2207      	movs	r2, #7
 8003380:	4013      	ands	r3, r2
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	23aa      	movs	r3, #170	; 0xaa
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_PCD_EP_SetStall+0x8c>
 8003394:	2302      	movs	r3, #2
 8003396:	e011      	b.n	80033bc <HAL_PCD_EP_SetStall+0xb0>
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	23aa      	movs	r3, #170	; 0xaa
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	2101      	movs	r1, #1
 80033a0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	0011      	movs	r1, r2
 80033aa:	0018      	movs	r0, r3
 80033ac:	f004 f87c 	bl	80074a8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	23aa      	movs	r3, #170	; 0xaa
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	2100      	movs	r1, #0
 80033b8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b004      	add	sp, #16
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	000a      	movs	r2, r1
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033d2:	1cfb      	adds	r3, r7, #3
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	220f      	movs	r2, #15
 80033d8:	401a      	ands	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d901      	bls.n	80033e6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e048      	b.n	8003478 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033e6:	1cfb      	adds	r3, r7, #3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	da0f      	bge.n	8003410 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	1cfb      	adds	r3, r7, #3
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2207      	movs	r2, #7
 80033f6:	4013      	ands	r3, r2
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	0013      	movs	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	18d3      	adds	r3, r2, r3
 8003406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	705a      	strb	r2, [r3, #1]
 800340e:	e00f      	b.n	8003430 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003410:	1cfb      	adds	r3, r7, #3
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2207      	movs	r2, #7
 8003416:	401a      	ands	r2, r3
 8003418:	0013      	movs	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	189b      	adds	r3, r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	3369      	adds	r3, #105	; 0x69
 8003422:	33ff      	adds	r3, #255	; 0xff
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	18d3      	adds	r3, r2, r3
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003436:	1cfb      	adds	r3, r7, #3
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2207      	movs	r2, #7
 800343c:	4013      	ands	r3, r2
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	23aa      	movs	r3, #170	; 0xaa
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PCD_EP_ClrStall+0x90>
 8003450:	2302      	movs	r3, #2
 8003452:	e011      	b.n	8003478 <HAL_PCD_EP_ClrStall+0xb4>
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	23aa      	movs	r3, #170	; 0xaa
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	2101      	movs	r1, #1
 800345c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f004 f86e 	bl	8007548 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	23aa      	movs	r3, #170	; 0xaa
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	2100      	movs	r1, #0
 8003474:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b004      	add	sp, #16
 800347e:	bd80      	pop	{r7, pc}

08003480 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b08f      	sub	sp, #60	; 0x3c
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003488:	e323      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	202e      	movs	r0, #46	; 0x2e
 8003490:	183b      	adds	r3, r7, r0
 8003492:	2144      	movs	r1, #68	; 0x44
 8003494:	5a52      	ldrh	r2, [r2, r1]
 8003496:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003498:	183b      	adds	r3, r7, r0
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	202d      	movs	r0, #45	; 0x2d
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	210f      	movs	r1, #15
 80034a4:	400a      	ands	r2, r1
 80034a6:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80034a8:	183b      	adds	r3, r7, r0
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d000      	beq.n	80034b2 <PCD_EP_ISR_Handler+0x32>
 80034b0:	e15e      	b.n	8003770 <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034b2:	232e      	movs	r3, #46	; 0x2e
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	2210      	movs	r2, #16
 80034ba:	4013      	ands	r3, r2
 80034bc:	d152      	bne.n	8003564 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	200e      	movs	r0, #14
 80034c8:	183b      	adds	r3, r7, r0
 80034ca:	49db      	ldr	r1, [pc, #876]	; (8003838 <PCD_EP_ISR_Handler+0x3b8>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	183a      	adds	r2, r7, r0
 80034d6:	8812      	ldrh	r2, [r2, #0]
 80034d8:	49d8      	ldr	r1, [pc, #864]	; (800383c <PCD_EP_ISR_Handler+0x3bc>)
 80034da:	430a      	orrs	r2, r1
 80034dc:	b292      	uxth	r2, r2
 80034de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3328      	adds	r3, #40	; 0x28
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2250      	movs	r2, #80	; 0x50
 80034ec:	5a9b      	ldrh	r3, [r3, r2]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	001a      	movs	r2, r3
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	18d2      	adds	r2, r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	18d3      	adds	r3, r2, r3
 8003500:	4acf      	ldr	r2, [pc, #828]	; (8003840 <PCD_EP_ISR_Handler+0x3c0>)
 8003502:	4694      	mov	ip, r2
 8003504:	4463      	add	r3, ip
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	059b      	lsls	r3, r3, #22
 800350a:	0d9a      	lsrs	r2, r3, #22
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	18d2      	adds	r2, r2, r3
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2100      	movs	r1, #0
 8003522:	0018      	movs	r0, r3
 8003524:	f006 f92e 	bl	8009784 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d100      	bne.n	8003536 <PCD_EP_ISR_Handler+0xb6>
 8003534:	e2cd      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d000      	beq.n	8003540 <PCD_EP_ISR_Handler+0xc0>
 800353e:	e2c8      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	; 0x24
 8003544:	5c9b      	ldrb	r3, [r3, r2]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	4252      	negs	r2, r2
 800354c:	4313      	orrs	r3, r2
 800354e:	b2da      	uxtb	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b291      	uxth	r1, r2
 8003556:	224c      	movs	r2, #76	; 0x4c
 8003558:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2224      	movs	r2, #36	; 0x24
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]
 8003562:	e2b6      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3369      	adds	r3, #105	; 0x69
 8003568:	33ff      	adds	r3, #255	; 0xff
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	212a      	movs	r1, #42	; 0x2a
 8003572:	187b      	adds	r3, r7, r1
 8003574:	8812      	ldrh	r2, [r2, #0]
 8003576:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003578:	187b      	adds	r3, r7, r1
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	4013      	ands	r3, r2
 8003582:	d037      	beq.n	80035f4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2250      	movs	r2, #80	; 0x50
 800358a:	5a9b      	ldrh	r3, [r3, r2]
 800358c:	b29b      	uxth	r3, r3
 800358e:	001a      	movs	r2, r3
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	18d2      	adds	r2, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	18d3      	adds	r3, r2, r3
 800359e:	4aa9      	ldr	r2, [pc, #676]	; (8003844 <PCD_EP_ISR_Handler+0x3c4>)
 80035a0:	4694      	mov	ip, r2
 80035a2:	4463      	add	r3, ip
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	059b      	lsls	r3, r3, #22
 80035a8:	0d9a      	lsrs	r2, r3, #22
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	22ac      	movs	r2, #172	; 0xac
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	1899      	adds	r1, r3, r2
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f004 f8ed 	bl	80077a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	2010      	movs	r0, #16
 80035d2:	183b      	adds	r3, r7, r0
 80035d4:	499c      	ldr	r1, [pc, #624]	; (8003848 <PCD_EP_ISR_Handler+0x3c8>)
 80035d6:	400a      	ands	r2, r1
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	183a      	adds	r2, r7, r0
 80035e0:	8812      	ldrh	r2, [r2, #0]
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	430a      	orrs	r2, r1
 80035e6:	b292      	uxth	r2, r2
 80035e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f006 f893 	bl	8009718 <HAL_PCD_SetupStageCallback>
 80035f2:	e26e      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035f4:	232a      	movs	r3, #42	; 0x2a
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	2200      	movs	r2, #0
 80035fa:	5e9b      	ldrsh	r3, [r3, r2]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	db00      	blt.n	8003602 <PCD_EP_ISR_Handler+0x182>
 8003600:	e267      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29a      	uxth	r2, r3
 800360a:	201c      	movs	r0, #28
 800360c:	183b      	adds	r3, r7, r0
 800360e:	498e      	ldr	r1, [pc, #568]	; (8003848 <PCD_EP_ISR_Handler+0x3c8>)
 8003610:	400a      	ands	r2, r1
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	183a      	adds	r2, r7, r0
 800361a:	8812      	ldrh	r2, [r2, #0]
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	430a      	orrs	r2, r1
 8003620:	b292      	uxth	r2, r2
 8003622:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2250      	movs	r2, #80	; 0x50
 800362a:	5a9b      	ldrh	r3, [r3, r2]
 800362c:	b29b      	uxth	r3, r3
 800362e:	001a      	movs	r2, r3
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	18d2      	adds	r2, r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	4a81      	ldr	r2, [pc, #516]	; (8003844 <PCD_EP_ISR_Handler+0x3c4>)
 8003640:	4694      	mov	ip, r2
 8003642:	4463      	add	r3, ip
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	059b      	lsls	r3, r3, #22
 8003648:	0d9a      	lsrs	r2, r3, #22
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01a      	beq.n	800368c <PCD_EP_ISR_Handler+0x20c>
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	6959      	ldr	r1, [r3, #20]
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800366e:	b29b      	uxth	r3, r3
 8003670:	f004 f897 	bl	80077a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	18d2      	adds	r2, r2, r3
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2100      	movs	r1, #0
 8003686:	0018      	movs	r0, r3
 8003688:	f006 f85b 	bl	8009742 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2250      	movs	r2, #80	; 0x50
 8003698:	5a9b      	ldrh	r3, [r3, r2]
 800369a:	b29b      	uxth	r3, r3
 800369c:	001a      	movs	r2, r3
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	189b      	adds	r3, r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4a67      	ldr	r2, [pc, #412]	; (8003844 <PCD_EP_ISR_Handler+0x3c4>)
 80036a8:	4694      	mov	ip, r2
 80036aa:	4463      	add	r3, ip
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d110      	bne.n	80036d8 <PCD_EP_ISR_Handler+0x258>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4a63      	ldr	r2, [pc, #396]	; (800384c <PCD_EP_ISR_Handler+0x3cc>)
 80036be:	4013      	ands	r3, r2
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	4a5b      	ldr	r2, [pc, #364]	; (800383c <PCD_EP_ISR_Handler+0x3bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	e02b      	b.n	8003730 <PCD_EP_ISR_Handler+0x2b0>
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b3e      	cmp	r3, #62	; 0x3e
 80036de:	d812      	bhi.n	8003706 <PCD_EP_ISR_Handler+0x286>
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	d002      	beq.n	80036f8 <PCD_EP_ISR_Handler+0x278>
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	3301      	adds	r3, #1
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	b29a      	uxth	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	e014      	b.n	8003730 <PCD_EP_ISR_Handler+0x2b0>
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	221f      	movs	r2, #31
 8003714:	4013      	ands	r3, r2
 8003716:	d102      	bne.n	800371e <PCD_EP_ISR_Handler+0x29e>
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	3b01      	subs	r3, #1
 800371c:	633b      	str	r3, [r7, #48]	; 0x30
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	b29b      	uxth	r3, r3
 8003722:	029b      	lsls	r3, r3, #10
 8003724:	b29b      	uxth	r3, r3
 8003726:	4a45      	ldr	r2, [pc, #276]	; (800383c <PCD_EP_ISR_Handler+0x3bc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	b29a      	uxth	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29a      	uxth	r2, r3
 8003738:	2012      	movs	r0, #18
 800373a:	183b      	adds	r3, r7, r0
 800373c:	4944      	ldr	r1, [pc, #272]	; (8003850 <PCD_EP_ISR_Handler+0x3d0>)
 800373e:	400a      	ands	r2, r1
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	183b      	adds	r3, r7, r0
 8003744:	183a      	adds	r2, r7, r0
 8003746:	8812      	ldrh	r2, [r2, #0]
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	0149      	lsls	r1, r1, #5
 800374c:	404a      	eors	r2, r1
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	183b      	adds	r3, r7, r0
 8003752:	183a      	adds	r2, r7, r0
 8003754:	8812      	ldrh	r2, [r2, #0]
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	0189      	lsls	r1, r1, #6
 800375a:	404a      	eors	r2, r1
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	183a      	adds	r2, r7, r0
 8003764:	8812      	ldrh	r2, [r2, #0]
 8003766:	493b      	ldr	r1, [pc, #236]	; (8003854 <PCD_EP_ISR_Handler+0x3d4>)
 8003768:	430a      	orrs	r2, r1
 800376a:	b292      	uxth	r2, r2
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	e1b0      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	001a      	movs	r2, r3
 8003776:	232d      	movs	r3, #45	; 0x2d
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	18d2      	adds	r2, r2, r3
 8003780:	212a      	movs	r1, #42	; 0x2a
 8003782:	187b      	adds	r3, r7, r1
 8003784:	8812      	ldrh	r2, [r2, #0]
 8003786:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2200      	movs	r2, #0
 800378c:	5e9b      	ldrsh	r3, [r3, r2]
 800378e:	2b00      	cmp	r3, #0
 8003790:	db00      	blt.n	8003794 <PCD_EP_ISR_Handler+0x314>
 8003792:	e10f      	b.n	80039b4 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	001a      	movs	r2, r3
 800379a:	202d      	movs	r0, #45	; 0x2d
 800379c:	183b      	adds	r3, r7, r0
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	18d3      	adds	r3, r2, r3
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	2428      	movs	r4, #40	; 0x28
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	4926      	ldr	r1, [pc, #152]	; (8003848 <PCD_EP_ISR_Handler+0x3c8>)
 80037ae:	400a      	ands	r2, r1
 80037b0:	801a      	strh	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	001a      	movs	r2, r3
 80037b8:	183b      	adds	r3, r7, r0
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	18d3      	adds	r3, r2, r3
 80037c0:	193a      	adds	r2, r7, r4
 80037c2:	8812      	ldrh	r2, [r2, #0]
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	430a      	orrs	r2, r1
 80037c8:	b292      	uxth	r2, r2
 80037ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037cc:	183b      	adds	r3, r7, r0
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	0013      	movs	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	189b      	adds	r3, r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3369      	adds	r3, #105	; 0x69
 80037da:	33ff      	adds	r3, #255	; 0xff
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	18d3      	adds	r3, r2, r3
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	7b1b      	ldrb	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d136      	bne.n	8003858 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2250      	movs	r2, #80	; 0x50
 80037f0:	5a9b      	ldrh	r3, [r3, r2]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	001a      	movs	r2, r3
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	18d2      	adds	r2, r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	18d3      	adds	r3, r2, r3
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <PCD_EP_ISR_Handler+0x3c4>)
 8003806:	4694      	mov	ip, r2
 8003808:	4463      	add	r3, ip
 800380a:	881a      	ldrh	r2, [r3, #0]
 800380c:	2136      	movs	r1, #54	; 0x36
 800380e:	187b      	adds	r3, r7, r1
 8003810:	0592      	lsls	r2, r2, #22
 8003812:	0d92      	lsrs	r2, r2, #22
 8003814:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003816:	187b      	adds	r3, r7, r1
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d100      	bne.n	8003820 <PCD_EP_ISR_Handler+0x3a0>
 800381e:	e0a0      	b.n	8003962 <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	6959      	ldr	r1, [r3, #20]
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	88da      	ldrh	r2, [r3, #6]
 800382c:	2336      	movs	r3, #54	; 0x36
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	f003 ffb6 	bl	80077a2 <USB_ReadPMA>
 8003836:	e094      	b.n	8003962 <PCD_EP_ISR_Handler+0x4e2>
 8003838:	ffff8f0f 	.word	0xffff8f0f
 800383c:	ffff8000 	.word	0xffff8000
 8003840:	00000402 	.word	0x00000402
 8003844:	00000406 	.word	0x00000406
 8003848:	00000f8f 	.word	0x00000f8f
 800384c:	ffff83ff 	.word	0xffff83ff
 8003850:	ffffbf8f 	.word	0xffffbf8f
 8003854:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d10c      	bne.n	800387a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003860:	2336      	movs	r3, #54	; 0x36
 8003862:	18fc      	adds	r4, r7, r3
 8003864:	232a      	movs	r3, #42	; 0x2a
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f94a 	bl	8003b08 <HAL_PCD_EP_DB_Receive>
 8003874:	0003      	movs	r3, r0
 8003876:	8023      	strh	r3, [r4, #0]
 8003878:	e073      	b.n	8003962 <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	001a      	movs	r2, r3
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	18d3      	adds	r3, r2, r3
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29a      	uxth	r2, r3
 800388c:	2022      	movs	r0, #34	; 0x22
 800388e:	183b      	adds	r3, r7, r0
 8003890:	4997      	ldr	r1, [pc, #604]	; (8003af0 <PCD_EP_ISR_Handler+0x670>)
 8003892:	400a      	ands	r2, r1
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	001a      	movs	r2, r3
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	18d3      	adds	r3, r2, r3
 80038a4:	183a      	adds	r2, r7, r0
 80038a6:	8812      	ldrh	r2, [r2, #0]
 80038a8:	4992      	ldr	r1, [pc, #584]	; (8003af4 <PCD_EP_ISR_Handler+0x674>)
 80038aa:	430a      	orrs	r2, r1
 80038ac:	b292      	uxth	r2, r2
 80038ae:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	001a      	movs	r2, r3
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	18d3      	adds	r3, r2, r3
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	001a      	movs	r2, r3
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	01db      	lsls	r3, r3, #7
 80038c8:	4013      	ands	r3, r2
 80038ca:	d025      	beq.n	8003918 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2250      	movs	r2, #80	; 0x50
 80038d2:	5a9b      	ldrh	r3, [r3, r2]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	001a      	movs	r2, r3
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	18d2      	adds	r2, r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	4a84      	ldr	r2, [pc, #528]	; (8003af8 <PCD_EP_ISR_Handler+0x678>)
 80038e8:	4694      	mov	ip, r2
 80038ea:	4463      	add	r3, ip
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	2136      	movs	r1, #54	; 0x36
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	0592      	lsls	r2, r2, #22
 80038f4:	0d92      	lsrs	r2, r2, #22
 80038f6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d030      	beq.n	8003962 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	6959      	ldr	r1, [r3, #20]
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	891a      	ldrh	r2, [r3, #8]
 800390c:	2336      	movs	r3, #54	; 0x36
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	f003 ff46 	bl	80077a2 <USB_ReadPMA>
 8003916:	e024      	b.n	8003962 <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2250      	movs	r2, #80	; 0x50
 800391e:	5a9b      	ldrh	r3, [r3, r2]
 8003920:	b29b      	uxth	r3, r3
 8003922:	001a      	movs	r2, r3
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	18d2      	adds	r2, r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	4a72      	ldr	r2, [pc, #456]	; (8003afc <PCD_EP_ISR_Handler+0x67c>)
 8003934:	4694      	mov	ip, r2
 8003936:	4463      	add	r3, ip
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	2136      	movs	r1, #54	; 0x36
 800393c:	187b      	adds	r3, r7, r1
 800393e:	0592      	lsls	r2, r2, #22
 8003940:	0d92      	lsrs	r2, r2, #22
 8003942:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003944:	187b      	adds	r3, r7, r1
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	6959      	ldr	r1, [r3, #20]
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	895a      	ldrh	r2, [r3, #10]
 8003958:	2336      	movs	r3, #54	; 0x36
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	f003 ff20 	bl	80077a2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	2136      	movs	r1, #54	; 0x36
 8003968:	187b      	adds	r3, r7, r1
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	18d2      	adds	r2, r2, r3
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	187b      	adds	r3, r7, r1
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	18d2      	adds	r2, r2, r3
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <PCD_EP_ISR_Handler+0x516>
 8003988:	2336      	movs	r3, #54	; 0x36
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	881a      	ldrh	r2, [r3, #0]
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	429a      	cmp	r2, r3
 8003994:	d207      	bcs.n	80039a6 <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0011      	movs	r1, r2
 800399e:	0018      	movs	r0, r3
 80039a0:	f005 fecf 	bl	8009742 <HAL_PCD_DataOutStageCallback>
 80039a4:	e006      	b.n	80039b4 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f002 fc24 	bl	80061fc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039b4:	232a      	movs	r3, #42	; 0x2a
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	4013      	ands	r3, r2
 80039be:	d100      	bne.n	80039c2 <PCD_EP_ISR_Handler+0x542>
 80039c0:	e087      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 80039c2:	202d      	movs	r0, #45	; 0x2d
 80039c4:	183b      	adds	r3, r7, r0
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	0013      	movs	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	001a      	movs	r2, r3
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	18d3      	adds	r3, r2, r3
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	2420      	movs	r4, #32
 80039ec:	193b      	adds	r3, r7, r4
 80039ee:	4944      	ldr	r1, [pc, #272]	; (8003b00 <PCD_EP_ISR_Handler+0x680>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	001a      	movs	r2, r3
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	18d3      	adds	r3, r2, r3
 8003a02:	193a      	adds	r2, r7, r4
 8003a04:	8812      	ldrh	r2, [r2, #0]
 8003a06:	493f      	ldr	r1, [pc, #252]	; (8003b04 <PCD_EP_ISR_Handler+0x684>)
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	78db      	ldrb	r3, [r3, #3]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d10a      	bne.n	8003a2c <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d151      	bne.n	8003ac2 <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a1e:	232a      	movs	r3, #42	; 0x2a
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	881a      	ldrh	r2, [r3, #0]
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d14a      	bne.n	8003ac2 <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2250      	movs	r2, #80	; 0x50
 8003a32:	5a9b      	ldrh	r3, [r3, r2]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	001a      	movs	r2, r3
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	18d2      	adds	r2, r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	18d3      	adds	r3, r2, r3
 8003a46:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <PCD_EP_ISR_Handler+0x678>)
 8003a48:	4694      	mov	ip, r2
 8003a4a:	4463      	add	r3, ip
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	211e      	movs	r1, #30
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	0592      	lsls	r2, r2, #22
 8003a54:	0d92      	lsrs	r2, r2, #22
 8003a56:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d908      	bls.n	8003a76 <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	231e      	movs	r3, #30
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	619a      	str	r2, [r3, #24]
 8003a74:	e002      	b.n	8003a7c <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f005 fe79 	bl	8009784 <HAL_PCD_DataInStageCallback>
 8003a92:	e01e      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	211e      	movs	r1, #30
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	18d2      	adds	r2, r2, r3
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	18d2      	adds	r2, r2, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	0011      	movs	r1, r2
 8003aba:	0018      	movs	r0, r3
 8003abc:	f002 fb9e 	bl	80061fc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003ac0:	e007      	b.n	8003ad2 <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ac2:	232a      	movs	r3, #42	; 0x2a
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 f93b 	bl	8003d48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2244      	movs	r2, #68	; 0x44
 8003ad8:	5a9b      	ldrh	r3, [r3, r2]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	b21b      	sxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da00      	bge.n	8003ae4 <PCD_EP_ISR_Handler+0x664>
 8003ae2:	e4d2      	b.n	800348a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b00f      	add	sp, #60	; 0x3c
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	ffff8f8f 	.word	0xffff8f8f
 8003af4:	ffff80c0 	.word	0xffff80c0
 8003af8:	00000402 	.word	0x00000402
 8003afc:	00000406 	.word	0x00000406
 8003b00:	ffff8f0f 	.word	0xffff8f0f
 8003b04:	ffff8000 	.word	0xffff8000

08003b08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	1dbb      	adds	r3, r7, #6
 8003b14:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b16:	1dbb      	adds	r3, r7, #6
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	01db      	lsls	r3, r3, #7
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d100      	bne.n	8003b24 <HAL_PCD_EP_DB_Receive+0x1c>
 8003b22:	e07f      	b.n	8003c24 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2250      	movs	r2, #80	; 0x50
 8003b2a:	5a9b      	ldrh	r3, [r3, r2]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	001a      	movs	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	18d2      	adds	r2, r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	18d3      	adds	r3, r2, r3
 8003b3e:	4a7c      	ldr	r2, [pc, #496]	; (8003d30 <HAL_PCD_EP_DB_Receive+0x228>)
 8003b40:	4694      	mov	ip, r2
 8003b42:	4463      	add	r3, ip
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	211a      	movs	r1, #26
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	0592      	lsls	r2, r2, #22
 8003b4c:	0d92      	lsrs	r2, r2, #22
 8003b4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d308      	bcc.n	8003b6e <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	231a      	movs	r3, #26
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	619a      	str	r2, [r3, #24]
 8003b6c:	e002      	b.n	8003b74 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d121      	bne.n	8003bc0 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	001a      	movs	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	18d3      	adds	r3, r2, r3
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	2018      	movs	r0, #24
 8003b90:	183b      	adds	r3, r7, r0
 8003b92:	4968      	ldr	r1, [pc, #416]	; (8003d34 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	183b      	adds	r3, r7, r0
 8003b9a:	183a      	adds	r2, r7, r0
 8003b9c:	8812      	ldrh	r2, [r2, #0]
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	0189      	lsls	r1, r1, #6
 8003ba2:	404a      	eors	r2, r1
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	001a      	movs	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	18d3      	adds	r3, r2, r3
 8003bb4:	183a      	adds	r2, r7, r0
 8003bb6:	8812      	ldrh	r2, [r2, #0]
 8003bb8:	495f      	ldr	r1, [pc, #380]	; (8003d38 <HAL_PCD_EP_DB_Receive+0x230>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	b292      	uxth	r2, r2
 8003bbe:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bc0:	1dbb      	adds	r3, r7, #6
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	2240      	movs	r2, #64	; 0x40
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d01a      	beq.n	8003c00 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	001a      	movs	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	2016      	movs	r0, #22
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	4956      	ldr	r1, [pc, #344]	; (8003d3c <HAL_PCD_EP_DB_Receive+0x234>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	001a      	movs	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	18d3      	adds	r3, r2, r3
 8003bf4:	183a      	adds	r2, r7, r0
 8003bf6:	8812      	ldrh	r2, [r2, #0]
 8003bf8:	4951      	ldr	r1, [pc, #324]	; (8003d40 <HAL_PCD_EP_DB_Receive+0x238>)
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003c00:	231a      	movs	r3, #26
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d100      	bne.n	8003c0c <HAL_PCD_EP_DB_Receive+0x104>
 8003c0a:	e089      	b.n	8003d20 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6959      	ldr	r1, [r3, #20]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	891a      	ldrh	r2, [r3, #8]
 8003c18:	231a      	movs	r3, #26
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	f003 fdc0 	bl	80077a2 <USB_ReadPMA>
 8003c22:	e07d      	b.n	8003d20 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2250      	movs	r2, #80	; 0x50
 8003c2a:	5a9b      	ldrh	r3, [r3, r2]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	001a      	movs	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	18d2      	adds	r2, r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	18d3      	adds	r3, r2, r3
 8003c3e:	4a41      	ldr	r2, [pc, #260]	; (8003d44 <HAL_PCD_EP_DB_Receive+0x23c>)
 8003c40:	4694      	mov	ip, r2
 8003c42:	4463      	add	r3, ip
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	211a      	movs	r1, #26
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	0592      	lsls	r2, r2, #22
 8003c4c:	0d92      	lsrs	r2, r2, #22
 8003c4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d308      	bcc.n	8003c6e <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	231a      	movs	r3, #26
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	1ad2      	subs	r2, r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	619a      	str	r2, [r3, #24]
 8003c6c:	e002      	b.n	8003c74 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d121      	bne.n	8003cc0 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	001a      	movs	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	18d3      	adds	r3, r2, r3
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	201e      	movs	r0, #30
 8003c90:	183b      	adds	r3, r7, r0
 8003c92:	4928      	ldr	r1, [pc, #160]	; (8003d34 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003c94:	400a      	ands	r2, r1
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	183a      	adds	r2, r7, r0
 8003c9c:	8812      	ldrh	r2, [r2, #0]
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	0189      	lsls	r1, r1, #6
 8003ca2:	404a      	eors	r2, r1
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	001a      	movs	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	183a      	adds	r2, r7, r0
 8003cb6:	8812      	ldrh	r2, [r2, #0]
 8003cb8:	491f      	ldr	r1, [pc, #124]	; (8003d38 <HAL_PCD_EP_DB_Receive+0x230>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cc0:	1dbb      	adds	r3, r7, #6
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	2240      	movs	r2, #64	; 0x40
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d11a      	bne.n	8003d00 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	001a      	movs	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	18d3      	adds	r3, r2, r3
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	201c      	movs	r0, #28
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	4916      	ldr	r1, [pc, #88]	; (8003d3c <HAL_PCD_EP_DB_Receive+0x234>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	801a      	strh	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	001a      	movs	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	18d3      	adds	r3, r2, r3
 8003cf4:	183a      	adds	r2, r7, r0
 8003cf6:	8812      	ldrh	r2, [r2, #0]
 8003cf8:	4911      	ldr	r1, [pc, #68]	; (8003d40 <HAL_PCD_EP_DB_Receive+0x238>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003d00:	231a      	movs	r3, #26
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6959      	ldr	r1, [r3, #20]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	895a      	ldrh	r2, [r3, #10]
 8003d16:	231a      	movs	r3, #26
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f003 fd41 	bl	80077a2 <USB_ReadPMA>
    }
  }

  return count;
 8003d20:	231a      	movs	r3, #26
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	881b      	ldrh	r3, [r3, #0]
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b008      	add	sp, #32
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	00000402 	.word	0x00000402
 8003d34:	ffffbf8f 	.word	0xffffbf8f
 8003d38:	ffff8080 	.word	0xffff8080
 8003d3c:	ffff8f8f 	.word	0xffff8f8f
 8003d40:	ffff80c0 	.word	0xffff80c0
 8003d44:	00000406 	.word	0x00000406

08003d48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b092      	sub	sp, #72	; 0x48
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	1dbb      	adds	r3, r7, #6
 8003d54:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d56:	1dbb      	adds	r3, r7, #6
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	2240      	movs	r2, #64	; 0x40
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003d60:	e12f      	b.n	8003fc2 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2250      	movs	r2, #80	; 0x50
 8003d68:	5a9b      	ldrh	r3, [r3, r2]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	18d2      	adds	r2, r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	18d3      	adds	r3, r2, r3
 8003d7c:	4abc      	ldr	r2, [pc, #752]	; (8004070 <HAL_PCD_EP_DB_Transmit+0x328>)
 8003d7e:	4694      	mov	ip, r2
 8003d80:	4463      	add	r3, ip
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	212e      	movs	r1, #46	; 0x2e
 8003d86:	187b      	adds	r3, r7, r1
 8003d88:	0592      	lsls	r2, r2, #22
 8003d8a:	0d92      	lsrs	r2, r2, #22
 8003d8c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d908      	bls.n	8003dac <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	232e      	movs	r3, #46	; 0x2e
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	1ad2      	subs	r2, r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	619a      	str	r2, [r3, #24]
 8003daa:	e002      	b.n	8003db2 <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d129      	bne.n	8003e0e <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	0011      	movs	r1, r2
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f005 fcde 	bl	8009784 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dc8:	1dbb      	adds	r3, r7, #6
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	01db      	lsls	r3, r3, #7
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x8e>
 8003dd4:	e231      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	001a      	movs	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	18d3      	adds	r3, r2, r3
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	2012      	movs	r0, #18
 8003dea:	183b      	adds	r3, r7, r0
 8003dec:	49a1      	ldr	r1, [pc, #644]	; (8004074 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8003dee:	400a      	ands	r2, r1
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	001a      	movs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	183a      	adds	r2, r7, r0
 8003e02:	8812      	ldrh	r2, [r2, #0]
 8003e04:	499c      	ldr	r1, [pc, #624]	; (8004078 <HAL_PCD_EP_DB_Transmit+0x330>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	801a      	strh	r2, [r3, #0]
 8003e0c:	e215      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e0e:	1dbb      	adds	r3, r7, #6
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	01db      	lsls	r3, r3, #7
 8003e16:	4013      	ands	r3, r2
 8003e18:	d01a      	beq.n	8003e50 <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	001a      	movs	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	2024      	movs	r0, #36	; 0x24
 8003e2e:	183b      	adds	r3, r7, r0
 8003e30:	4990      	ldr	r1, [pc, #576]	; (8004074 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	18d3      	adds	r3, r2, r3
 8003e44:	183a      	adds	r2, r7, r0
 8003e46:	8812      	ldrh	r2, [r2, #0]
 8003e48:	498b      	ldr	r1, [pc, #556]	; (8004078 <HAL_PCD_EP_DB_Transmit+0x330>)
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	5c9b      	ldrb	r3, [r3, r2]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d000      	beq.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x114>
 8003e5a:	e1ee      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	212e      	movs	r1, #46	; 0x2e
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	18d2      	adds	r2, r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	18d2      	adds	r2, r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d309      	bcc.n	8003e9a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	621a      	str	r2, [r3, #32]
 8003e98:	e016      	b.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 8003ea2:	232e      	movs	r3, #46	; 0x2e
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2224      	movs	r2, #36	; 0x24
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	e009      	b.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	2100      	movs	r1, #0
 8003eba:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d150      	bne.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x22a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2250      	movs	r2, #80	; 0x50
 8003edc:	5a9b      	ldrh	r3, [r3, r2]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	4a5f      	ldr	r2, [pc, #380]	; (8004070 <HAL_PCD_EP_DB_Transmit+0x328>)
 8003ef4:	4694      	mov	ip, r2
 8003ef6:	4463      	add	r3, ip
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d110      	bne.n	8003f22 <HAL_PCD_EP_DB_Transmit+0x1da>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4a5d      	ldr	r2, [pc, #372]	; (800407c <HAL_PCD_EP_DB_Transmit+0x334>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4a5a      	ldr	r2, [pc, #360]	; (8004080 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e044      	b.n	8003fac <HAL_PCD_EP_DB_Transmit+0x264>
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	2b3e      	cmp	r3, #62	; 0x3e
 8003f26:	d810      	bhi.n	8003f4a <HAL_PCD_EP_DB_Transmit+0x202>
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	2201      	movs	r2, #1
 8003f32:	4013      	ands	r3, r2
 8003f34:	d002      	beq.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	3301      	adds	r3, #1
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	e030      	b.n	8003fac <HAL_PCD_EP_DB_Transmit+0x264>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	221f      	movs	r2, #31
 8003f54:	4013      	ands	r3, r2
 8003f56:	d102      	bne.n	8003f5e <HAL_PCD_EP_DB_Transmit+0x216>
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	029b      	lsls	r3, r3, #10
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4a46      	ldr	r2, [pc, #280]	; (8004080 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e01c      	b.n	8003fac <HAL_PCD_EP_DB_Transmit+0x264>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	785b      	ldrb	r3, [r3, #1]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d118      	bne.n	8003fac <HAL_PCD_EP_DB_Transmit+0x264>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2250      	movs	r2, #80	; 0x50
 8003f86:	5a9b      	ldrh	r3, [r3, r2]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	00da      	lsls	r2, r3, #3
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	18d3      	adds	r3, r2, r3
 8003f9c:	4a34      	ldr	r2, [pc, #208]	; (8004070 <HAL_PCD_EP_DB_Transmit+0x328>)
 8003f9e:	4694      	mov	ip, r2
 8003fa0:	4463      	add	r3, ip
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6959      	ldr	r1, [r3, #20]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	891a      	ldrh	r2, [r3, #8]
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f003 fbae 	bl	800771c <USB_WritePMA>
 8003fc0:	e13b      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2250      	movs	r2, #80	; 0x50
 8003fc8:	5a9b      	ldrh	r3, [r3, r2]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	001a      	movs	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	18d2      	adds	r2, r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	18d3      	adds	r3, r2, r3
 8003fdc:	4a29      	ldr	r2, [pc, #164]	; (8004084 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8003fde:	4694      	mov	ip, r2
 8003fe0:	4463      	add	r3, ip
 8003fe2:	881a      	ldrh	r2, [r3, #0]
 8003fe4:	212e      	movs	r1, #46	; 0x2e
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	0592      	lsls	r2, r2, #22
 8003fea:	0d92      	lsrs	r2, r2, #22
 8003fec:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d308      	bcc.n	800400c <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	232e      	movs	r3, #46	; 0x2e
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	1ad2      	subs	r2, r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	619a      	str	r2, [r3, #24]
 800400a:	e002      	b.n	8004012 <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2200      	movs	r2, #0
 8004010:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d136      	bne.n	8004088 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f005 fbae 	bl	8009784 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004028:	1dbb      	adds	r3, r7, #6
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	01db      	lsls	r3, r3, #7
 8004030:	4013      	ands	r3, r2
 8004032:	d000      	beq.n	8004036 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004034:	e101      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	001a      	movs	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	18d3      	adds	r3, r2, r3
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29a      	uxth	r2, r3
 8004048:	2026      	movs	r0, #38	; 0x26
 800404a:	183b      	adds	r3, r7, r0
 800404c:	4909      	ldr	r1, [pc, #36]	; (8004074 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800404e:	400a      	ands	r2, r1
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	001a      	movs	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	18d3      	adds	r3, r2, r3
 8004060:	183a      	adds	r2, r7, r0
 8004062:	8812      	ldrh	r2, [r2, #0]
 8004064:	4904      	ldr	r1, [pc, #16]	; (8004078 <HAL_PCD_EP_DB_Transmit+0x330>)
 8004066:	430a      	orrs	r2, r1
 8004068:	b292      	uxth	r2, r2
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e0e5      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	00000402 	.word	0x00000402
 8004074:	ffff8f8f 	.word	0xffff8f8f
 8004078:	ffffc080 	.word	0xffffc080
 800407c:	ffff83ff 	.word	0xffff83ff
 8004080:	ffff8000 	.word	0xffff8000
 8004084:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004088:	1dbb      	adds	r3, r7, #6
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	01db      	lsls	r3, r3, #7
 8004090:	4013      	ands	r3, r2
 8004092:	d11a      	bne.n	80040ca <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	001a      	movs	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	18d3      	adds	r3, r2, r3
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	202c      	movs	r0, #44	; 0x2c
 80040a8:	183b      	adds	r3, r7, r0
 80040aa:	497a      	ldr	r1, [pc, #488]	; (8004294 <HAL_PCD_EP_DB_Transmit+0x54c>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	001a      	movs	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	183a      	adds	r2, r7, r0
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	4975      	ldr	r1, [pc, #468]	; (8004298 <HAL_PCD_EP_DB_Transmit+0x550>)
 80040c4:	430a      	orrs	r2, r1
 80040c6:	b292      	uxth	r2, r2
 80040c8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2224      	movs	r2, #36	; 0x24
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d000      	beq.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x38e>
 80040d4:	e0b1      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	212e      	movs	r1, #46	; 0x2e
 80040dc:	187b      	adds	r3, r7, r1
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	18d2      	adds	r2, r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	18d2      	adds	r2, r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d309      	bcc.n	8004114 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6a1a      	ldr	r2, [r3, #32]
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	1ad2      	subs	r2, r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	621a      	str	r2, [r3, #32]
 8004112:	e016      	b.n	8004142 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d108      	bne.n	800412e <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 800411c:	232e      	movs	r3, #46	; 0x2e
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]
 800412c:	e009      	b.n	8004142 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2224      	movs	r2, #36	; 0x24
 800413e:	2100      	movs	r1, #0
 8004140:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d150      	bne.n	80041f2 <HAL_PCD_EP_DB_Transmit+0x4aa>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2250      	movs	r2, #80	; 0x50
 800415c:	5a9b      	ldrh	r3, [r3, r2]
 800415e:	b29b      	uxth	r3, r3
 8004160:	001a      	movs	r2, r3
 8004162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004164:	189b      	adds	r3, r3, r2
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	00da      	lsls	r2, r3, #3
 800416e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_PCD_EP_DB_Transmit+0x554>)
 8004174:	4694      	mov	ip, r2
 8004176:	4463      	add	r3, ip
 8004178:	643b      	str	r3, [r7, #64]	; 0x40
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2b00      	cmp	r3, #0
 800417e:	d110      	bne.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x45a>
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	4a46      	ldr	r2, [pc, #280]	; (80042a0 <HAL_PCD_EP_DB_Transmit+0x558>)
 8004188:	4013      	ands	r3, r2
 800418a:	b29a      	uxth	r2, r3
 800418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	4a43      	ldr	r2, [pc, #268]	; (80042a4 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	b29a      	uxth	r2, r3
 800419c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	e041      	b.n	8004226 <HAL_PCD_EP_DB_Transmit+0x4de>
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b3e      	cmp	r3, #62	; 0x3e
 80041a6:	d810      	bhi.n	80041ca <HAL_PCD_EP_DB_Transmit+0x482>
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2201      	movs	r2, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	d002      	beq.n	80041bc <HAL_PCD_EP_DB_Transmit+0x474>
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	3301      	adds	r3, #1
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041be:	b29b      	uxth	r3, r3
 80041c0:	029b      	lsls	r3, r3, #10
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	e02d      	b.n	8004226 <HAL_PCD_EP_DB_Transmit+0x4de>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	221f      	movs	r2, #31
 80041d4:	4013      	ands	r3, r2
 80041d6:	d102      	bne.n	80041de <HAL_PCD_EP_DB_Transmit+0x496>
 80041d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041da:	3b01      	subs	r3, #1
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	029b      	lsls	r3, r3, #10
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <HAL_PCD_EP_DB_Transmit+0x55c>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	e019      	b.n	8004226 <HAL_PCD_EP_DB_Transmit+0x4de>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d115      	bne.n	8004226 <HAL_PCD_EP_DB_Transmit+0x4de>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2250      	movs	r2, #80	; 0x50
 8004200:	5a9b      	ldrh	r3, [r3, r2]
 8004202:	b29b      	uxth	r3, r3
 8004204:	001a      	movs	r2, r3
 8004206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004208:	189b      	adds	r3, r3, r2
 800420a:	637b      	str	r3, [r7, #52]	; 0x34
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	00da      	lsls	r2, r3, #3
 8004212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_PCD_EP_DB_Transmit+0x554>)
 8004218:	4694      	mov	ip, r2
 800421a:	4463      	add	r3, ip
 800421c:	633b      	str	r3, [r7, #48]	; 0x30
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	b29a      	uxth	r2, r3
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6959      	ldr	r1, [r3, #20]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	895a      	ldrh	r2, [r3, #10]
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	b29b      	uxth	r3, r3
 8004236:	f003 fa71 	bl	800771c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	001a      	movs	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	18d3      	adds	r3, r2, r3
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29a      	uxth	r2, r3
 800424c:	2010      	movs	r0, #16
 800424e:	183b      	adds	r3, r7, r0
 8004250:	4915      	ldr	r1, [pc, #84]	; (80042a8 <HAL_PCD_EP_DB_Transmit+0x560>)
 8004252:	400a      	ands	r2, r1
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	183b      	adds	r3, r7, r0
 8004258:	183a      	adds	r2, r7, r0
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	2110      	movs	r1, #16
 800425e:	404a      	eors	r2, r1
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	183b      	adds	r3, r7, r0
 8004264:	183a      	adds	r2, r7, r0
 8004266:	8812      	ldrh	r2, [r2, #0]
 8004268:	2120      	movs	r1, #32
 800426a:	404a      	eors	r2, r1
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	001a      	movs	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	18d3      	adds	r3, r2, r3
 800427c:	183a      	adds	r2, r7, r0
 800427e:	8812      	ldrh	r2, [r2, #0]
 8004280:	490a      	ldr	r1, [pc, #40]	; (80042ac <HAL_PCD_EP_DB_Transmit+0x564>)
 8004282:	430a      	orrs	r2, r1
 8004284:	b292      	uxth	r2, r2
 8004286:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b012      	add	sp, #72	; 0x48
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	ffff8f8f 	.word	0xffff8f8f
 8004298:	ffffc080 	.word	0xffffc080
 800429c:	00000406 	.word	0x00000406
 80042a0:	ffff83ff 	.word	0xffff83ff
 80042a4:	ffff8000 	.word	0xffff8000
 80042a8:	ffff8fbf 	.word	0xffff8fbf
 80042ac:	ffff8080 	.word	0xffff8080

080042b0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	0008      	movs	r0, r1
 80042ba:	0011      	movs	r1, r2
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	240a      	movs	r4, #10
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	1c02      	adds	r2, r0, #0
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	2308      	movs	r3, #8
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	1c0a      	adds	r2, r1, #0
 80042cc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042ce:	193b      	adds	r3, r7, r4
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	4013      	ands	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042dc:	230a      	movs	r3, #10
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	2207      	movs	r2, #7
 80042e4:	4013      	ands	r3, r2
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	0013      	movs	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	18d3      	adds	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e00b      	b.n	8004310 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042f8:	230a      	movs	r3, #10
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	0013      	movs	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	189b      	adds	r3, r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	3369      	adds	r3, #105	; 0x69
 8004308:	33ff      	adds	r3, #255	; 0xff
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	18d3      	adds	r3, r2, r3
 800430e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004310:	2308      	movs	r3, #8
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	b29a      	uxth	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	80da      	strh	r2, [r3, #6]
 8004328:	e00b      	b.n	8004342 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2201      	movs	r2, #1
 800432e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	b29a      	uxth	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0c1b      	lsrs	r3, r3, #16
 800433c:	b29a      	uxth	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b007      	add	sp, #28
 800434a:	bd90      	pop	{r4, r7, pc}

0800434c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	23ba      	movs	r3, #186	; 0xba
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	2101      	movs	r1, #1
 8004362:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	23b8      	movs	r3, #184	; 0xb8
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	2100      	movs	r1, #0
 800436c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2254      	movs	r2, #84	; 0x54
 8004372:	5a9b      	ldrh	r3, [r3, r2]
 8004374:	b29b      	uxth	r3, r3
 8004376:	2201      	movs	r2, #1
 8004378:	4313      	orrs	r3, r2
 800437a:	b299      	uxth	r1, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2254      	movs	r2, #84	; 0x54
 8004380:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2254      	movs	r2, #84	; 0x54
 8004386:	5a9b      	ldrh	r3, [r3, r2]
 8004388:	b29b      	uxth	r3, r3
 800438a:	2202      	movs	r2, #2
 800438c:	4313      	orrs	r3, r2
 800438e:	b299      	uxth	r1, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2254      	movs	r2, #84	; 0x54
 8004394:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	b004      	add	sp, #16
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	000a      	movs	r2, r1
 80043aa:	1cfb      	adds	r3, r7, #3
 80043ac:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b002      	add	sp, #8
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d102      	bne.n	80043cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f000 fb76 	bl	8004ab8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2201      	movs	r2, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	d100      	bne.n	80043d8 <HAL_RCC_OscConfig+0x20>
 80043d6:	e08e      	b.n	80044f6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043d8:	4bc5      	ldr	r3, [pc, #788]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	220c      	movs	r2, #12
 80043de:	4013      	ands	r3, r2
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d00e      	beq.n	8004402 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043e4:	4bc2      	ldr	r3, [pc, #776]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	220c      	movs	r2, #12
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d117      	bne.n	8004420 <HAL_RCC_OscConfig+0x68>
 80043f0:	4bbf      	ldr	r3, [pc, #764]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	23c0      	movs	r3, #192	; 0xc0
 80043f6:	025b      	lsls	r3, r3, #9
 80043f8:	401a      	ands	r2, r3
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	429a      	cmp	r2, r3
 8004400:	d10e      	bne.n	8004420 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004402:	4bbb      	ldr	r3, [pc, #748]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	029b      	lsls	r3, r3, #10
 800440a:	4013      	ands	r3, r2
 800440c:	d100      	bne.n	8004410 <HAL_RCC_OscConfig+0x58>
 800440e:	e071      	b.n	80044f4 <HAL_RCC_OscConfig+0x13c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d000      	beq.n	800441a <HAL_RCC_OscConfig+0x62>
 8004418:	e06c      	b.n	80044f4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f000 fb4c 	bl	8004ab8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x80>
 8004428:	4bb1      	ldr	r3, [pc, #708]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4bb0      	ldr	r3, [pc, #704]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	0249      	lsls	r1, r1, #9
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e02f      	b.n	8004498 <HAL_RCC_OscConfig+0xe0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10c      	bne.n	800445a <HAL_RCC_OscConfig+0xa2>
 8004440:	4bab      	ldr	r3, [pc, #684]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4baa      	ldr	r3, [pc, #680]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004446:	49ab      	ldr	r1, [pc, #684]	; (80046f4 <HAL_RCC_OscConfig+0x33c>)
 8004448:	400a      	ands	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	4ba8      	ldr	r3, [pc, #672]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4ba7      	ldr	r3, [pc, #668]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004452:	49a9      	ldr	r1, [pc, #676]	; (80046f8 <HAL_RCC_OscConfig+0x340>)
 8004454:	400a      	ands	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e01e      	b.n	8004498 <HAL_RCC_OscConfig+0xe0>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b05      	cmp	r3, #5
 8004460:	d10e      	bne.n	8004480 <HAL_RCC_OscConfig+0xc8>
 8004462:	4ba3      	ldr	r3, [pc, #652]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4ba2      	ldr	r3, [pc, #648]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	02c9      	lsls	r1, r1, #11
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	4b9f      	ldr	r3, [pc, #636]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b9e      	ldr	r3, [pc, #632]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004476:	2180      	movs	r1, #128	; 0x80
 8004478:	0249      	lsls	r1, r1, #9
 800447a:	430a      	orrs	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0xe0>
 8004480:	4b9b      	ldr	r3, [pc, #620]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b9a      	ldr	r3, [pc, #616]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004486:	499b      	ldr	r1, [pc, #620]	; (80046f4 <HAL_RCC_OscConfig+0x33c>)
 8004488:	400a      	ands	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	4b98      	ldr	r3, [pc, #608]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b97      	ldr	r3, [pc, #604]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004492:	4999      	ldr	r1, [pc, #612]	; (80046f8 <HAL_RCC_OscConfig+0x340>)
 8004494:	400a      	ands	r2, r1
 8004496:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d014      	beq.n	80044ca <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fd fa96 	bl	80019d0 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044aa:	f7fd fa91 	bl	80019d0 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	; 0x64
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e2fd      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044bc:	4b8c      	ldr	r3, [pc, #560]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	4013      	ands	r3, r2
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0xf2>
 80044c8:	e015      	b.n	80044f6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fd fa81 	bl	80019d0 <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fa7c 	bl	80019d0 <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e2e8      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	4b82      	ldr	r3, [pc, #520]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	4013      	ands	r3, r2
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x11c>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2202      	movs	r2, #2
 80044fc:	4013      	ands	r3, r2
 80044fe:	d100      	bne.n	8004502 <HAL_RCC_OscConfig+0x14a>
 8004500:	e06c      	b.n	80045dc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004502:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	220c      	movs	r2, #12
 8004508:	4013      	ands	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800450c:	4b78      	ldr	r3, [pc, #480]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	220c      	movs	r2, #12
 8004512:	4013      	ands	r3, r2
 8004514:	2b08      	cmp	r3, #8
 8004516:	d11f      	bne.n	8004558 <HAL_RCC_OscConfig+0x1a0>
 8004518:	4b75      	ldr	r3, [pc, #468]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	23c0      	movs	r3, #192	; 0xc0
 800451e:	025b      	lsls	r3, r3, #9
 8004520:	401a      	ands	r2, r3
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	429a      	cmp	r2, r3
 8004528:	d116      	bne.n	8004558 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	4b71      	ldr	r3, [pc, #452]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d005      	beq.n	8004540 <HAL_RCC_OscConfig+0x188>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e2bb      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b6b      	ldr	r3, [pc, #428]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	22f8      	movs	r2, #248	; 0xf8
 8004546:	4393      	bics	r3, r2
 8004548:	0019      	movs	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00da      	lsls	r2, r3, #3
 8004550:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	e041      	b.n	80045dc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d024      	beq.n	80045aa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004560:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b62      	ldr	r3, [pc, #392]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004566:	2101      	movs	r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fd fa30 	bl	80019d0 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004576:	f7fd fa2b 	bl	80019d0 <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e297      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2202      	movs	r2, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d0f1      	beq.n	8004576 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004592:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	22f8      	movs	r2, #248	; 0xf8
 8004598:	4393      	bics	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	00da      	lsls	r2, r3, #3
 80045a2:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e018      	b.n	80045dc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045aa:	4b51      	ldr	r3, [pc, #324]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80045b0:	2101      	movs	r1, #1
 80045b2:	438a      	bics	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b6:	f7fd fa0b 	bl	80019d0 <HAL_GetTick>
 80045ba:	0003      	movs	r3, r0
 80045bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c0:	f7fd fa06 	bl	80019d0 <HAL_GetTick>
 80045c4:	0002      	movs	r2, r0
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e272      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2202      	movs	r2, #2
 80045d8:	4013      	ands	r3, r2
 80045da:	d1f1      	bne.n	80045c0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2208      	movs	r2, #8
 80045e2:	4013      	ands	r3, r2
 80045e4:	d036      	beq.n	8004654 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80045f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80045f4:	2101      	movs	r1, #1
 80045f6:	430a      	orrs	r2, r1
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fa:	f7fd f9e9 	bl	80019d0 <HAL_GetTick>
 80045fe:	0003      	movs	r3, r0
 8004600:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004604:	f7fd f9e4 	bl	80019d0 <HAL_GetTick>
 8004608:	0002      	movs	r2, r0
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e250      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2202      	movs	r2, #2
 800461c:	4013      	ands	r3, r2
 800461e:	d0f1      	beq.n	8004604 <HAL_RCC_OscConfig+0x24c>
 8004620:	e018      	b.n	8004654 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004622:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004626:	4b32      	ldr	r3, [pc, #200]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004628:	2101      	movs	r1, #1
 800462a:	438a      	bics	r2, r1
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462e:	f7fd f9cf 	bl	80019d0 <HAL_GetTick>
 8004632:	0003      	movs	r3, r0
 8004634:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004638:	f7fd f9ca 	bl	80019d0 <HAL_GetTick>
 800463c:	0002      	movs	r2, r0
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e236      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464a:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2202      	movs	r2, #2
 8004650:	4013      	ands	r3, r2
 8004652:	d1f1      	bne.n	8004638 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2204      	movs	r2, #4
 800465a:	4013      	ands	r3, r2
 800465c:	d100      	bne.n	8004660 <HAL_RCC_OscConfig+0x2a8>
 800465e:	e0b5      	b.n	80047cc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004660:	231f      	movs	r3, #31
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004668:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	055b      	lsls	r3, r3, #21
 8004670:	4013      	ands	r3, r2
 8004672:	d111      	bne.n	8004698 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004674:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 800467a:	2180      	movs	r1, #128	; 0x80
 800467c:	0549      	lsls	r1, r1, #21
 800467e:	430a      	orrs	r2, r1
 8004680:	61da      	str	r2, [r3, #28]
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	055b      	lsls	r3, r3, #21
 800468a:	4013      	ands	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004690:	231f      	movs	r3, #31
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <HAL_RCC_OscConfig+0x344>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4013      	ands	r3, r2
 80046a2:	d11a      	bne.n	80046da <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_RCC_OscConfig+0x344>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b14      	ldr	r3, [pc, #80]	; (80046fc <HAL_RCC_OscConfig+0x344>)
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	0049      	lsls	r1, r1, #1
 80046ae:	430a      	orrs	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b2:	f7fd f98d 	bl	80019d0 <HAL_GetTick>
 80046b6:	0003      	movs	r3, r0
 80046b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046bc:	f7fd f988 	bl	80019d0 <HAL_GetTick>
 80046c0:	0002      	movs	r2, r0
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e1f4      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_OscConfig+0x344>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4013      	ands	r3, r2
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d10e      	bne.n	8004700 <HAL_RCC_OscConfig+0x348>
 80046e2:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80046e4:	6a1a      	ldr	r2, [r3, #32]
 80046e6:	4b02      	ldr	r3, [pc, #8]	; (80046f0 <HAL_RCC_OscConfig+0x338>)
 80046e8:	2101      	movs	r1, #1
 80046ea:	430a      	orrs	r2, r1
 80046ec:	621a      	str	r2, [r3, #32]
 80046ee:	e035      	b.n	800475c <HAL_RCC_OscConfig+0x3a4>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	fffeffff 	.word	0xfffeffff
 80046f8:	fffbffff 	.word	0xfffbffff
 80046fc:	40007000 	.word	0x40007000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10c      	bne.n	8004722 <HAL_RCC_OscConfig+0x36a>
 8004708:	4bca      	ldr	r3, [pc, #808]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800470a:	6a1a      	ldr	r2, [r3, #32]
 800470c:	4bc9      	ldr	r3, [pc, #804]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800470e:	2101      	movs	r1, #1
 8004710:	438a      	bics	r2, r1
 8004712:	621a      	str	r2, [r3, #32]
 8004714:	4bc7      	ldr	r3, [pc, #796]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004716:	6a1a      	ldr	r2, [r3, #32]
 8004718:	4bc6      	ldr	r3, [pc, #792]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800471a:	2104      	movs	r1, #4
 800471c:	438a      	bics	r2, r1
 800471e:	621a      	str	r2, [r3, #32]
 8004720:	e01c      	b.n	800475c <HAL_RCC_OscConfig+0x3a4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b05      	cmp	r3, #5
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x38c>
 800472a:	4bc2      	ldr	r3, [pc, #776]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800472c:	6a1a      	ldr	r2, [r3, #32]
 800472e:	4bc1      	ldr	r3, [pc, #772]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004730:	2104      	movs	r1, #4
 8004732:	430a      	orrs	r2, r1
 8004734:	621a      	str	r2, [r3, #32]
 8004736:	4bbf      	ldr	r3, [pc, #764]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004738:	6a1a      	ldr	r2, [r3, #32]
 800473a:	4bbe      	ldr	r3, [pc, #760]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800473c:	2101      	movs	r1, #1
 800473e:	430a      	orrs	r2, r1
 8004740:	621a      	str	r2, [r3, #32]
 8004742:	e00b      	b.n	800475c <HAL_RCC_OscConfig+0x3a4>
 8004744:	4bbb      	ldr	r3, [pc, #748]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	4bba      	ldr	r3, [pc, #744]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	621a      	str	r2, [r3, #32]
 8004750:	4bb8      	ldr	r3, [pc, #736]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	4bb7      	ldr	r3, [pc, #732]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004756:	2104      	movs	r1, #4
 8004758:	438a      	bics	r2, r1
 800475a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d014      	beq.n	800478e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004764:	f7fd f934 	bl	80019d0 <HAL_GetTick>
 8004768:	0003      	movs	r3, r0
 800476a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	e009      	b.n	8004782 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fd f92f 	bl	80019d0 <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	4aaf      	ldr	r2, [pc, #700]	; (8004a38 <HAL_RCC_OscConfig+0x680>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e19a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004782:	4bac      	ldr	r3, [pc, #688]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2202      	movs	r2, #2
 8004788:	4013      	ands	r3, r2
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x3b6>
 800478c:	e013      	b.n	80047b6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478e:	f7fd f91f 	bl	80019d0 <HAL_GetTick>
 8004792:	0003      	movs	r3, r0
 8004794:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004796:	e009      	b.n	80047ac <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004798:	f7fd f91a 	bl	80019d0 <HAL_GetTick>
 800479c:	0002      	movs	r2, r0
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	4aa5      	ldr	r2, [pc, #660]	; (8004a38 <HAL_RCC_OscConfig+0x680>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e185      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ac:	4ba1      	ldr	r3, [pc, #644]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	2202      	movs	r2, #2
 80047b2:	4013      	ands	r3, r2
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047b6:	231f      	movs	r3, #31
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d105      	bne.n	80047cc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c0:	4b9c      	ldr	r3, [pc, #624]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	4b9b      	ldr	r3, [pc, #620]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80047c6:	499d      	ldr	r1, [pc, #628]	; (8004a3c <HAL_RCC_OscConfig+0x684>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2210      	movs	r2, #16
 80047d2:	4013      	ands	r3, r2
 80047d4:	d063      	beq.n	800489e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d12a      	bne.n	8004834 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047de:	4b95      	ldr	r3, [pc, #596]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80047e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e2:	4b94      	ldr	r3, [pc, #592]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80047e4:	2104      	movs	r1, #4
 80047e6:	430a      	orrs	r2, r1
 80047e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80047ea:	4b92      	ldr	r3, [pc, #584]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80047ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ee:	4b91      	ldr	r3, [pc, #580]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80047f0:	2101      	movs	r1, #1
 80047f2:	430a      	orrs	r2, r1
 80047f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fd f8eb 	bl	80019d0 <HAL_GetTick>
 80047fa:	0003      	movs	r3, r0
 80047fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004800:	f7fd f8e6 	bl	80019d0 <HAL_GetTick>
 8004804:	0002      	movs	r2, r0
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e152      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004812:	4b88      	ldr	r3, [pc, #544]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	2202      	movs	r2, #2
 8004818:	4013      	ands	r3, r2
 800481a:	d0f1      	beq.n	8004800 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800481c:	4b85      	ldr	r3, [pc, #532]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	22f8      	movs	r2, #248	; 0xf8
 8004822:	4393      	bics	r3, r2
 8004824:	0019      	movs	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	00da      	lsls	r2, r3, #3
 800482c:	4b81      	ldr	r3, [pc, #516]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800482e:	430a      	orrs	r2, r1
 8004830:	635a      	str	r2, [r3, #52]	; 0x34
 8004832:	e034      	b.n	800489e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	3305      	adds	r3, #5
 800483a:	d111      	bne.n	8004860 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800483c:	4b7d      	ldr	r3, [pc, #500]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800483e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004840:	4b7c      	ldr	r3, [pc, #496]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004842:	2104      	movs	r1, #4
 8004844:	438a      	bics	r2, r1
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004848:	4b7a      	ldr	r3, [pc, #488]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	22f8      	movs	r2, #248	; 0xf8
 800484e:	4393      	bics	r3, r2
 8004850:	0019      	movs	r1, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	00da      	lsls	r2, r3, #3
 8004858:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800485a:	430a      	orrs	r2, r1
 800485c:	635a      	str	r2, [r3, #52]	; 0x34
 800485e:	e01e      	b.n	800489e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004860:	4b74      	ldr	r3, [pc, #464]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004864:	4b73      	ldr	r3, [pc, #460]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004866:	2104      	movs	r1, #4
 8004868:	430a      	orrs	r2, r1
 800486a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800486c:	4b71      	ldr	r3, [pc, #452]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800486e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004870:	4b70      	ldr	r3, [pc, #448]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004872:	2101      	movs	r1, #1
 8004874:	438a      	bics	r2, r1
 8004876:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004878:	f7fd f8aa 	bl	80019d0 <HAL_GetTick>
 800487c:	0003      	movs	r3, r0
 800487e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004882:	f7fd f8a5 	bl	80019d0 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e111      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004894:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	2202      	movs	r2, #2
 800489a:	4013      	ands	r3, r2
 800489c:	d1f1      	bne.n	8004882 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2220      	movs	r2, #32
 80048a4:	4013      	ands	r3, r2
 80048a6:	d05c      	beq.n	8004962 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048a8:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	220c      	movs	r2, #12
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d00e      	beq.n	80048d2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048b4:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	220c      	movs	r2, #12
 80048ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d114      	bne.n	80048ea <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048c0:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	23c0      	movs	r3, #192	; 0xc0
 80048c6:	025b      	lsls	r3, r3, #9
 80048c8:	401a      	ands	r2, r3
 80048ca:	23c0      	movs	r3, #192	; 0xc0
 80048cc:	025b      	lsls	r3, r3, #9
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d10b      	bne.n	80048ea <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80048d2:	4b58      	ldr	r3, [pc, #352]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80048d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	025b      	lsls	r3, r3, #9
 80048da:	4013      	ands	r3, r2
 80048dc:	d040      	beq.n	8004960 <HAL_RCC_OscConfig+0x5a8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d03c      	beq.n	8004960 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0e6      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01b      	beq.n	800492a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80048f2:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80048f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f6:	4b4f      	ldr	r3, [pc, #316]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	0249      	lsls	r1, r1, #9
 80048fc:	430a      	orrs	r2, r1
 80048fe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd f866 	bl	80019d0 <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490a:	f7fd f861 	bl	80019d0 <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0cd      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800491c:	4b45      	ldr	r3, [pc, #276]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800491e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	025b      	lsls	r3, r3, #9
 8004924:	4013      	ands	r3, r2
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x552>
 8004928:	e01b      	b.n	8004962 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800492a:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800492c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004930:	4943      	ldr	r1, [pc, #268]	; (8004a40 <HAL_RCC_OscConfig+0x688>)
 8004932:	400a      	ands	r2, r1
 8004934:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fd f84b 	bl	80019d0 <HAL_GetTick>
 800493a:	0003      	movs	r3, r0
 800493c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004940:	f7fd f846 	bl	80019d0 <HAL_GetTick>
 8004944:	0002      	movs	r2, r0
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e0b2      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004952:	4b38      	ldr	r3, [pc, #224]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	025b      	lsls	r3, r3, #9
 800495a:	4013      	ands	r3, r2
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x588>
 800495e:	e000      	b.n	8004962 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004960:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d100      	bne.n	800496c <HAL_RCC_OscConfig+0x5b4>
 800496a:	e0a4      	b.n	8004ab6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	220c      	movs	r2, #12
 8004972:	4013      	ands	r3, r2
 8004974:	2b08      	cmp	r3, #8
 8004976:	d100      	bne.n	800497a <HAL_RCC_OscConfig+0x5c2>
 8004978:	e078      	b.n	8004a6c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b02      	cmp	r3, #2
 8004980:	d14c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004988:	492e      	ldr	r1, [pc, #184]	; (8004a44 <HAL_RCC_OscConfig+0x68c>)
 800498a:	400a      	ands	r2, r1
 800498c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fd f81f 	bl	80019d0 <HAL_GetTick>
 8004992:	0003      	movs	r3, r0
 8004994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fd f81a 	bl	80019d0 <HAL_GetTick>
 800499c:	0002      	movs	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e086      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049aa:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	049b      	lsls	r3, r3, #18
 80049b2:	4013      	ands	r3, r2
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	220f      	movs	r2, #15
 80049bc:	4393      	bics	r3, r2
 80049be:	0019      	movs	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80049c6:	430a      	orrs	r2, r1
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80049ca:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4a1e      	ldr	r2, [pc, #120]	; (8004a48 <HAL_RCC_OscConfig+0x690>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	431a      	orrs	r2, r3
 80049de:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	0449      	lsls	r1, r1, #17
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fc ffed 	bl	80019d0 <HAL_GetTick>
 80049f6:	0003      	movs	r3, r0
 80049f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fc ffe8 	bl	80019d0 <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e054      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	049b      	lsls	r3, r3, #18
 8004a16:	4013      	ands	r3, r2
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0x644>
 8004a1a:	e04c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_RCC_OscConfig+0x67c>)
 8004a22:	4908      	ldr	r1, [pc, #32]	; (8004a44 <HAL_RCC_OscConfig+0x68c>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fc ffd2 	bl	80019d0 <HAL_GetTick>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a30:	e015      	b.n	8004a5e <HAL_RCC_OscConfig+0x6a6>
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	40021000 	.word	0x40021000
 8004a38:	00001388 	.word	0x00001388
 8004a3c:	efffffff 	.word	0xefffffff
 8004a40:	fffeffff 	.word	0xfffeffff
 8004a44:	feffffff 	.word	0xfeffffff
 8004a48:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fc ffc0 	bl	80019d0 <HAL_GetTick>
 8004a50:	0002      	movs	r2, r0
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e02c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5e:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_RCC_OscConfig+0x708>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	049b      	lsls	r3, r3, #18
 8004a66:	4013      	ands	r3, r2
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x694>
 8004a6a:	e024      	b.n	8004ab6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e01f      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_RCC_OscConfig+0x708>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <HAL_RCC_OscConfig+0x708>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	23c0      	movs	r3, #192	; 0xc0
 8004a88:	025b      	lsls	r3, r3, #9
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d10e      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	220f      	movs	r2, #15
 8004a98:	401a      	ands	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	23f0      	movs	r3, #240	; 0xf0
 8004aa6:	039b      	lsls	r3, r3, #14
 8004aa8:	401a      	ands	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d001      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b008      	add	sp, #32
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0bf      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b61      	ldr	r3, [pc, #388]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2201      	movs	r2, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d911      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b5e      	ldr	r3, [pc, #376]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	4393      	bics	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	4b5b      	ldr	r3, [pc, #364]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af8:	4b59      	ldr	r3, [pc, #356]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2201      	movs	r2, #1
 8004afe:	4013      	ands	r3, r2
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d001      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0a6      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	d015      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d006      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b1e:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b24:	21e0      	movs	r1, #224	; 0xe0
 8004b26:	00c9      	lsls	r1, r1, #3
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	22f0      	movs	r2, #240	; 0xf0
 8004b32:	4393      	bics	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2201      	movs	r2, #1
 8004b46:	4013      	ands	r3, r2
 8004b48:	d04c      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b44      	ldr	r3, [pc, #272]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	029b      	lsls	r3, r3, #10
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d120      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07a      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6a:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	049b      	lsls	r3, r3, #18
 8004b72:	4013      	ands	r3, r2
 8004b74:	d114      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e06e      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d107      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b82:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	025b      	lsls	r3, r3, #9
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d108      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e062      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b92:	4b34      	ldr	r3, [pc, #208]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2202      	movs	r2, #2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e05b      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba0:	4b30      	ldr	r3, [pc, #192]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	4393      	bics	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb4:	f7fc ff0c 	bl	80019d0 <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbc:	e009      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbe:	f7fc ff07 	bl	80019d0 <HAL_GetTick>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <HAL_RCC_ClockConfig+0x1a4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e042      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	401a      	ands	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1ec      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be4:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	4013      	ands	r3, r2
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d211      	bcs.n	8004c16 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_RCC_ClockConfig+0x19c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e020      	b.n	8004c58 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c20:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <HAL_RCC_ClockConfig+0x1a8>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c34:	f000 f820 	bl	8004c78 <HAL_RCC_GetSysClockFreq>
 8004c38:	0001      	movs	r1, r0
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_RCC_ClockConfig+0x1a0>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	220f      	movs	r2, #15
 8004c42:	4013      	ands	r3, r2
 8004c44:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <HAL_RCC_ClockConfig+0x1ac>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	000a      	movs	r2, r1
 8004c4a:	40da      	lsrs	r2, r3
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_RCC_ClockConfig+0x1b0>)
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c50:	2000      	movs	r0, #0
 8004c52:	f7fc fe77 	bl	8001944 <HAL_InitTick>
  
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b004      	add	sp, #16
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40022000 	.word	0x40022000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	00001388 	.word	0x00001388
 8004c6c:	fffff8ff 	.word	0xfffff8ff
 8004c70:	08009f1c 	.word	0x08009f1c
 8004c74:	20000004 	.word	0x20000004

08004c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b08f      	sub	sp, #60	; 0x3c
 8004c7c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004c7e:	2314      	movs	r3, #20
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	4a37      	ldr	r2, [pc, #220]	; (8004d60 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004c84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c86:	c313      	stmia	r3!, {r0, r1, r4}
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	4a35      	ldr	r2, [pc, #212]	; (8004d64 <HAL_RCC_GetSysClockFreq+0xec>)
 8004c90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c92:	c313      	stmia	r3!, {r0, r1, r4}
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004cac:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	220c      	movs	r2, #12
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d006      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x52>
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d043      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0xd0>
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d144      	bne.n	8004d4e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004cc8:	e044      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	0c9b      	lsrs	r3, r3, #18
 8004cce:	220f      	movs	r2, #15
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2214      	movs	r2, #20
 8004cd4:	18ba      	adds	r2, r7, r2
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004cda:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	220f      	movs	r2, #15
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	1d3a      	adds	r2, r7, #4
 8004ce4:	5cd3      	ldrb	r3, [r2, r3]
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cea:	23c0      	movs	r3, #192	; 0xc0
 8004cec:	025b      	lsls	r3, r3, #9
 8004cee:	401a      	ands	r2, r3
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	025b      	lsls	r3, r3, #9
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cfa:	481c      	ldr	r0, [pc, #112]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004cfc:	f7fb fa04 	bl	8000108 <__udivsi3>
 8004d00:	0003      	movs	r3, r0
 8004d02:	001a      	movs	r2, r3
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	4353      	muls	r3, r2
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0a:	e01a      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d0e:	23c0      	movs	r3, #192	; 0xc0
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	401a      	ands	r2, r3
 8004d14:	23c0      	movs	r3, #192	; 0xc0
 8004d16:	025b      	lsls	r3, r3, #9
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d109      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	4814      	ldr	r0, [pc, #80]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d20:	f7fb f9f2 	bl	8000108 <__udivsi3>
 8004d24:	0003      	movs	r3, r0
 8004d26:	001a      	movs	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	4353      	muls	r3, r2
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d32:	480e      	ldr	r0, [pc, #56]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004d34:	f7fb f9e8 	bl	8000108 <__udivsi3>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	4353      	muls	r3, r2
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d46:	e005      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d4c:	e002      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004d50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d52:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b00f      	add	sp, #60	; 0x3c
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	08009e00 	.word	0x08009e00
 8004d64:	08009e10 	.word	0x08009e10
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	007a1200 	.word	0x007a1200
 8004d70:	02dc6c00 	.word	0x02dc6c00

08004d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	025b      	lsls	r3, r3, #9
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004d90:	e08f      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004d92:	2317      	movs	r3, #23
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9a:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	055b      	lsls	r3, r3, #21
 8004da2:	4013      	ands	r3, r2
 8004da4:	d111      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	4b6c      	ldr	r3, [pc, #432]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004dac:	2180      	movs	r1, #128	; 0x80
 8004dae:	0549      	lsls	r1, r1, #21
 8004db0:	430a      	orrs	r2, r1
 8004db2:	61da      	str	r2, [r3, #28]
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	055b      	lsls	r3, r3, #21
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc2:	2317      	movs	r3, #23
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dca:	4b64      	ldr	r3, [pc, #400]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d11a      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd6:	4b61      	ldr	r3, [pc, #388]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	0049      	lsls	r1, r1, #1
 8004de0:	430a      	orrs	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de4:	f7fc fdf4 	bl	80019d0 <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fc fdef 	bl	80019d0 <HAL_GetTick>
 8004df2:	0002      	movs	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b64      	cmp	r3, #100	; 0x64
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e0a6      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0c:	4b52      	ldr	r3, [pc, #328]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	23c0      	movs	r3, #192	; 0xc0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d034      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	23c0      	movs	r3, #192	; 0xc0
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4013      	ands	r3, r2
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d02c      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2e:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4a4b      	ldr	r2, [pc, #300]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e38:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	0249      	lsls	r1, r1, #9
 8004e42:	430a      	orrs	r2, r1
 8004e44:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e46:	4b44      	ldr	r3, [pc, #272]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e4c:	4945      	ldr	r1, [pc, #276]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e4e:	400a      	ands	r2, r1
 8004e50:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e52:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fc fdb6 	bl	80019d0 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e009      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fc fdb1 	bl	80019d0 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	4a3c      	ldr	r2, [pc, #240]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e067      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e88:	4b33      	ldr	r3, [pc, #204]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4a34      	ldr	r2, [pc, #208]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e9c:	2317      	movs	r3, #23
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004eac:	492f      	ldr	r1, [pc, #188]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eae:	400a      	ands	r2, r1
 8004eb0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ebc:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	4393      	bics	r3, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eda:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004eea:	430a      	orrs	r2, r1
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2210      	movs	r2, #16
 8004efe:	4393      	bics	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	029b      	lsls	r3, r3, #10
 8004f14:	4013      	ands	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	2280      	movs	r2, #128	; 0x80
 8004f1e:	4393      	bics	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4013      	ands	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	4393      	bics	r3, r2
 8004f40:	0019      	movs	r1, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b006      	add	sp, #24
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	fffffcff 	.word	0xfffffcff
 8004f64:	fffeffff 	.word	0xfffeffff
 8004f68:	00001388 	.word	0x00001388
 8004f6c:	efffffff 	.word	0xefffffff
 8004f70:	fffcffff 	.word	0xfffcffff

08004f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e01e      	b.n	8004fc4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	223d      	movs	r2, #61	; 0x3d
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	223c      	movs	r2, #60	; 0x3c
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fc fb9b 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	223d      	movs	r2, #61	; 0x3d
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f000 fa27 	bl	8005408 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	223d      	movs	r2, #61	; 0x3d
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2101      	movs	r1, #1
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2207      	movs	r2, #7
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d007      	beq.n	8005006 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b004      	add	sp, #16
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2202      	movs	r2, #2
 8005020:	4013      	ands	r3, r2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d124      	bne.n	8005070 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2202      	movs	r2, #2
 800502e:	4013      	ands	r3, r2
 8005030:	2b02      	cmp	r3, #2
 8005032:	d11d      	bne.n	8005070 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2203      	movs	r2, #3
 800503a:	4252      	negs	r2, r2
 800503c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2203      	movs	r2, #3
 800504c:	4013      	ands	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	0018      	movs	r0, r3
 8005054:	f000 f9c0 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 8005058:	e007      	b.n	800506a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	0018      	movs	r0, r3
 800505e:	f000 f9b3 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f000 f9bf 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2204      	movs	r2, #4
 8005078:	4013      	ands	r3, r2
 800507a:	2b04      	cmp	r3, #4
 800507c:	d125      	bne.n	80050ca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2204      	movs	r2, #4
 8005086:	4013      	ands	r3, r2
 8005088:	2b04      	cmp	r3, #4
 800508a:	d11e      	bne.n	80050ca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2205      	movs	r2, #5
 8005092:	4252      	negs	r2, r2
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	23c0      	movs	r3, #192	; 0xc0
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4013      	ands	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f000 f993 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 80050b2:	e007      	b.n	80050c4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f000 f986 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 f992 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2208      	movs	r2, #8
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d124      	bne.n	8005122 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2208      	movs	r2, #8
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d11d      	bne.n	8005122 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2209      	movs	r2, #9
 80050ec:	4252      	negs	r2, r2
 80050ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2204      	movs	r2, #4
 80050f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	2203      	movs	r2, #3
 80050fe:	4013      	ands	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	0018      	movs	r0, r3
 8005106:	f000 f967 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 800510a:	e007      	b.n	800511c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	0018      	movs	r0, r3
 8005110:	f000 f95a 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	0018      	movs	r0, r3
 8005118:	f000 f966 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2210      	movs	r2, #16
 800512a:	4013      	ands	r3, r2
 800512c:	2b10      	cmp	r3, #16
 800512e:	d125      	bne.n	800517c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2210      	movs	r2, #16
 8005138:	4013      	ands	r3, r2
 800513a:	2b10      	cmp	r3, #16
 800513c:	d11e      	bne.n	800517c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2211      	movs	r2, #17
 8005144:	4252      	negs	r2, r2
 8005146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2208      	movs	r2, #8
 800514c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	23c0      	movs	r3, #192	; 0xc0
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4013      	ands	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f000 f93a 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 8005164:	e007      	b.n	8005176 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0018      	movs	r0, r3
 800516a:	f000 f92d 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 f939 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2201      	movs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	2b01      	cmp	r3, #1
 8005188:	d10f      	bne.n	80051aa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	4013      	ands	r3, r2
 8005194:	2b01      	cmp	r3, #1
 8005196:	d108      	bne.n	80051aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2202      	movs	r2, #2
 800519e:	4252      	negs	r2, r2
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 f907 	bl	80053b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2280      	movs	r2, #128	; 0x80
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d10f      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d108      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2281      	movs	r2, #129	; 0x81
 80051cc:	4252      	negs	r2, r2
 80051ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 fa98 	bl	8005708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2240      	movs	r2, #64	; 0x40
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d10f      	bne.n	8005206 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2240      	movs	r2, #64	; 0x40
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	d108      	bne.n	8005206 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2241      	movs	r2, #65	; 0x41
 80051fa:	4252      	negs	r2, r2
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 f8f9 	bl	80053f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2220      	movs	r2, #32
 800520e:	4013      	ands	r3, r2
 8005210:	2b20      	cmp	r3, #32
 8005212:	d10f      	bne.n	8005234 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	4013      	ands	r3, r2
 800521e:	2b20      	cmp	r3, #32
 8005220:	d108      	bne.n	8005234 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2221      	movs	r2, #33	; 0x21
 8005228:	4252      	negs	r2, r2
 800522a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	0018      	movs	r0, r3
 8005230:	f000 fa62 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b002      	add	sp, #8
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	223c      	movs	r2, #60	; 0x3c
 800524a:	5c9b      	ldrb	r3, [r3, r2]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_TIM_ConfigClockSource+0x18>
 8005250:	2302      	movs	r3, #2
 8005252:	e0ab      	b.n	80053ac <HAL_TIM_ConfigClockSource+0x170>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	223c      	movs	r2, #60	; 0x3c
 8005258:	2101      	movs	r1, #1
 800525a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	223d      	movs	r2, #61	; 0x3d
 8005260:	2102      	movs	r1, #2
 8005262:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2277      	movs	r2, #119	; 0x77
 8005270:	4393      	bics	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a4f      	ldr	r2, [pc, #316]	; (80053b4 <HAL_TIM_ConfigClockSource+0x178>)
 8005278:	4013      	ands	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d100      	bne.n	800528e <HAL_TIM_ConfigClockSource+0x52>
 800528c:	e06b      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x12a>
 800528e:	d80e      	bhi.n	80052ae <HAL_TIM_ConfigClockSource+0x72>
 8005290:	2b10      	cmp	r3, #16
 8005292:	d100      	bne.n	8005296 <HAL_TIM_ConfigClockSource+0x5a>
 8005294:	e077      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x14a>
 8005296:	d803      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x64>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d100      	bne.n	800529e <HAL_TIM_ConfigClockSource+0x62>
 800529c:	e073      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800529e:	e07c      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d100      	bne.n	80052a6 <HAL_TIM_ConfigClockSource+0x6a>
 80052a4:	e06f      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x14a>
 80052a6:	2b30      	cmp	r3, #48	; 0x30
 80052a8:	d100      	bne.n	80052ac <HAL_TIM_ConfigClockSource+0x70>
 80052aa:	e06c      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80052ac:	e075      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80052ae:	2b70      	cmp	r3, #112	; 0x70
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0x94>
 80052b2:	d804      	bhi.n	80052be <HAL_TIM_ConfigClockSource+0x82>
 80052b4:	2b50      	cmp	r3, #80	; 0x50
 80052b6:	d036      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0xea>
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d044      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80052bc:	e06d      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	0152      	lsls	r2, r2, #5
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d068      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x15c>
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	0192      	lsls	r2, r2, #6
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d017      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80052ce:	e064      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6899      	ldr	r1, [r3, #8]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f000 f98c 	bl	80055fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2277      	movs	r2, #119	; 0x77
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
      break;
 80052fc:	e04d      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f000 f975 	bl	80055fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	01c9      	lsls	r1, r1, #7
 8005320:	430a      	orrs	r2, r1
 8005322:	609a      	str	r2, [r3, #8]
      break;
 8005324:	e039      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	001a      	movs	r2, r3
 8005334:	f000 f8e8 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2150      	movs	r1, #80	; 0x50
 800533e:	0018      	movs	r0, r3
 8005340:	f000 f942 	bl	80055c8 <TIM_ITRx_SetConfig>
      break;
 8005344:	e029      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	001a      	movs	r2, r3
 8005354:	f000 f906 	bl	8005564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2160      	movs	r1, #96	; 0x60
 800535e:	0018      	movs	r0, r3
 8005360:	f000 f932 	bl	80055c8 <TIM_ITRx_SetConfig>
      break;
 8005364:	e019      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	001a      	movs	r2, r3
 8005374:	f000 f8c8 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	0018      	movs	r0, r3
 8005380:	f000 f922 	bl	80055c8 <TIM_ITRx_SetConfig>
      break;
 8005384:	e009      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	0019      	movs	r1, r3
 8005390:	0010      	movs	r0, r2
 8005392:	f000 f919 	bl	80055c8 <TIM_ITRx_SetConfig>
      break;
 8005396:	e000      	b.n	800539a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005398:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	223d      	movs	r2, #61	; 0x3d
 800539e:	2101      	movs	r1, #1
 80053a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	223c      	movs	r2, #60	; 0x3c
 80053a6:	2100      	movs	r1, #0
 80053a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b004      	add	sp, #16
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	ffff00ff 	.word	0xffff00ff

080053b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b002      	add	sp, #8
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b002      	add	sp, #8
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053e0:	46c0      	nop			; (mov r8, r8)
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b002      	add	sp, #8
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b002      	add	sp, #8
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}

08005408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a34      	ldr	r2, [pc, #208]	; (80054ec <TIM_Base_SetConfig+0xe4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d008      	beq.n	8005432 <TIM_Base_SetConfig+0x2a>
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	05db      	lsls	r3, r3, #23
 8005426:	429a      	cmp	r2, r3
 8005428:	d003      	beq.n	8005432 <TIM_Base_SetConfig+0x2a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <TIM_Base_SetConfig+0xe8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d108      	bne.n	8005444 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2270      	movs	r2, #112	; 0x70
 8005436:	4393      	bics	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a29      	ldr	r2, [pc, #164]	; (80054ec <TIM_Base_SetConfig+0xe4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <TIM_Base_SetConfig+0x76>
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	05db      	lsls	r3, r3, #23
 8005452:	429a      	cmp	r2, r3
 8005454:	d013      	beq.n	800547e <TIM_Base_SetConfig+0x76>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0xe8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00f      	beq.n	800547e <TIM_Base_SetConfig+0x76>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <TIM_Base_SetConfig+0xec>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00b      	beq.n	800547e <TIM_Base_SetConfig+0x76>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <TIM_Base_SetConfig+0xf0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d007      	beq.n	800547e <TIM_Base_SetConfig+0x76>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <TIM_Base_SetConfig+0xf4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_Base_SetConfig+0x76>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <TIM_Base_SetConfig+0xf8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a20      	ldr	r2, [pc, #128]	; (8005504 <TIM_Base_SetConfig+0xfc>)
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	4393      	bics	r3, r2
 8005496:	001a      	movs	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <TIM_Base_SetConfig+0xe4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0xce>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <TIM_Base_SetConfig+0xf0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0xce>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a0c      	ldr	r2, [pc, #48]	; (80054fc <TIM_Base_SetConfig+0xf4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0xce>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0b      	ldr	r2, [pc, #44]	; (8005500 <TIM_Base_SetConfig+0xf8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d103      	bne.n	80054de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	615a      	str	r2, [r3, #20]
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b004      	add	sp, #16
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40002000 	.word	0x40002000
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800
 8005504:	fffffcff 	.word	0xfffffcff

08005508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	2201      	movs	r2, #1
 8005520:	4393      	bics	r3, r2
 8005522:	001a      	movs	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	22f0      	movs	r2, #240	; 0xf0
 8005532:	4393      	bics	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	220a      	movs	r2, #10
 8005544:	4393      	bics	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	b006      	add	sp, #24
 8005562:	bd80      	pop	{r7, pc}

08005564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	2210      	movs	r2, #16
 8005576:	4393      	bics	r3, r2
 8005578:	001a      	movs	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <TIM_TI2_ConfigInputStage+0x60>)
 800558e:	4013      	ands	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	031b      	lsls	r3, r3, #12
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	22a0      	movs	r2, #160	; 0xa0
 80055a0:	4393      	bics	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	46bd      	mov	sp, r7
 80055be:	b006      	add	sp, #24
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	ffff0fff 	.word	0xffff0fff

080055c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2270      	movs	r2, #112	; 0x70
 80055dc:	4393      	bics	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	2207      	movs	r2, #7
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	609a      	str	r2, [r3, #8]
}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b004      	add	sp, #16
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4a09      	ldr	r2, [pc, #36]	; (8005638 <TIM_ETR_SetConfig+0x3c>)
 8005614:	4013      	ands	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	431a      	orrs	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b006      	add	sp, #24
 8005636:	bd80      	pop	{r7, pc}
 8005638:	ffff00ff 	.word	0xffff00ff

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223c      	movs	r2, #60	; 0x3c
 800564a:	5c9b      	ldrb	r3, [r3, r2]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e047      	b.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	223c      	movs	r2, #60	; 0x3c
 8005658:	2101      	movs	r1, #1
 800565a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	223d      	movs	r2, #61	; 0x3d
 8005660:	2102      	movs	r1, #2
 8005662:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2270      	movs	r2, #112	; 0x70
 8005678:	4393      	bics	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00f      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	05db      	lsls	r3, r3, #23
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d009      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a10      	ldr	r2, [pc, #64]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10c      	bne.n	80056d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	4393      	bics	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	223d      	movs	r2, #61	; 0x3d
 80056d6:	2101      	movs	r1, #1
 80056d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	223c      	movs	r2, #60	; 0x3c
 80056de:	2100      	movs	r1, #0
 80056e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b004      	add	sp, #16
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40014000 	.word	0x40014000

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	46bd      	mov	sp, r7
 8005704:	b002      	add	sp, #8
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}

08005718 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2244      	movs	r2, #68	; 0x44
 8005724:	2100      	movs	r1, #0
 8005726:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <USB_EnableGlobalInt+0x28>)
 800572a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	b299      	uxth	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2240      	movs	r2, #64	; 0x40
 8005734:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b004      	add	sp, #16
 800573e:	bd80      	pop	{r7, pc}
 8005740:	0000bf80 	.word	0x0000bf80

08005744 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <USB_DisableGlobalInt+0x30>)
 800574e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	5a9b      	ldrh	r3, [r3, r2]
 8005756:	b29b      	uxth	r3, r3
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	b292      	uxth	r2, r2
 800575c:	43d2      	mvns	r2, r2
 800575e:	b292      	uxth	r2, r2
 8005760:	4013      	ands	r3, r2
 8005762:	b299      	uxth	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b004      	add	sp, #16
 8005772:	bd80      	pop	{r7, pc}
 8005774:	0000bf80 	.word	0x0000bf80

08005778 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005778:	b084      	sub	sp, #16
 800577a:	b590      	push	{r4, r7, lr}
 800577c:	46c6      	mov	lr, r8
 800577e:	b500      	push	{lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	2004      	movs	r0, #4
 8005788:	2410      	movs	r4, #16
 800578a:	46a4      	mov	ip, r4
 800578c:	2408      	movs	r4, #8
 800578e:	46a0      	mov	r8, r4
 8005790:	44b8      	add	r8, r7
 8005792:	44c4      	add	ip, r8
 8005794:	4460      	add	r0, ip
 8005796:	6001      	str	r1, [r0, #0]
 8005798:	6042      	str	r2, [r0, #4]
 800579a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	2101      	movs	r1, #1
 80057a2:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2240      	movs	r2, #64	; 0x40
 80057a8:	2100      	movs	r1, #0
 80057aa:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2244      	movs	r2, #68	; 0x44
 80057b0:	2100      	movs	r1, #0
 80057b2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2250      	movs	r2, #80	; 0x50
 80057b8:	2100      	movs	r1, #0
 80057ba:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b002      	add	sp, #8
 80057c4:	bc04      	pop	{r2}
 80057c6:	4690      	mov	r8, r2
 80057c8:	bc90      	pop	{r4, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	b004      	add	sp, #16
 80057ce:	4718      	bx	r3

080057d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b09a      	sub	sp, #104	; 0x68
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057da:	2367      	movs	r3, #103	; 0x67
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	2364      	movs	r3, #100	; 0x64
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	49cf      	ldr	r1, [pc, #828]	; (8005b34 <USB_ActivateEndpoint+0x364>)
 80057f6:	400a      	ands	r2, r1
 80057f8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d020      	beq.n	8005844 <USB_ActivateEndpoint+0x74>
 8005802:	dc02      	bgt.n	800580a <USB_ActivateEndpoint+0x3a>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <USB_ActivateEndpoint+0x44>
 8005808:	e025      	b.n	8005856 <USB_ActivateEndpoint+0x86>
 800580a:	2b02      	cmp	r3, #2
 800580c:	d00b      	beq.n	8005826 <USB_ActivateEndpoint+0x56>
 800580e:	2b03      	cmp	r3, #3
 8005810:	d00f      	beq.n	8005832 <USB_ActivateEndpoint+0x62>
 8005812:	e020      	b.n	8005856 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005814:	2264      	movs	r2, #100	; 0x64
 8005816:	18bb      	adds	r3, r7, r2
 8005818:	18ba      	adds	r2, r7, r2
 800581a:	8812      	ldrh	r2, [r2, #0]
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	0089      	lsls	r1, r1, #2
 8005820:	430a      	orrs	r2, r1
 8005822:	801a      	strh	r2, [r3, #0]
      break;
 8005824:	e01c      	b.n	8005860 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8005826:	2264      	movs	r2, #100	; 0x64
 8005828:	18bb      	adds	r3, r7, r2
 800582a:	18ba      	adds	r2, r7, r2
 800582c:	8812      	ldrh	r2, [r2, #0]
 800582e:	801a      	strh	r2, [r3, #0]
      break;
 8005830:	e016      	b.n	8005860 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005832:	2264      	movs	r2, #100	; 0x64
 8005834:	18bb      	adds	r3, r7, r2
 8005836:	18ba      	adds	r2, r7, r2
 8005838:	8812      	ldrh	r2, [r2, #0]
 800583a:	21c0      	movs	r1, #192	; 0xc0
 800583c:	00c9      	lsls	r1, r1, #3
 800583e:	430a      	orrs	r2, r1
 8005840:	801a      	strh	r2, [r3, #0]
      break;
 8005842:	e00d      	b.n	8005860 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005844:	2264      	movs	r2, #100	; 0x64
 8005846:	18bb      	adds	r3, r7, r2
 8005848:	18ba      	adds	r2, r7, r2
 800584a:	8812      	ldrh	r2, [r2, #0]
 800584c:	2180      	movs	r1, #128	; 0x80
 800584e:	00c9      	lsls	r1, r1, #3
 8005850:	430a      	orrs	r2, r1
 8005852:	801a      	strh	r2, [r3, #0]
      break;
 8005854:	e004      	b.n	8005860 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8005856:	2367      	movs	r3, #103	; 0x67
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	2201      	movs	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
      break;
 800585e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	18d3      	adds	r3, r2, r3
 800586a:	2264      	movs	r2, #100	; 0x64
 800586c:	18ba      	adds	r2, r7, r2
 800586e:	8812      	ldrh	r2, [r2, #0]
 8005870:	49b1      	ldr	r1, [pc, #708]	; (8005b38 <USB_ActivateEndpoint+0x368>)
 8005872:	430a      	orrs	r2, r1
 8005874:	b292      	uxth	r2, r2
 8005876:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	18d3      	adds	r3, r2, r3
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	b21b      	sxth	r3, r3
 8005888:	4aac      	ldr	r2, [pc, #688]	; (8005b3c <USB_ActivateEndpoint+0x36c>)
 800588a:	4013      	ands	r3, r2
 800588c:	b21a      	sxth	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	b21b      	sxth	r3, r3
 8005894:	4313      	orrs	r3, r2
 8005896:	b21a      	sxth	r2, r3
 8005898:	215e      	movs	r1, #94	; 0x5e
 800589a:	187b      	adds	r3, r7, r1
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	18d3      	adds	r3, r2, r3
 80058a8:	187a      	adds	r2, r7, r1
 80058aa:	8812      	ldrh	r2, [r2, #0]
 80058ac:	49a2      	ldr	r1, [pc, #648]	; (8005b38 <USB_ActivateEndpoint+0x368>)
 80058ae:	430a      	orrs	r2, r1
 80058b0:	b292      	uxth	r2, r2
 80058b2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	7b1b      	ldrb	r3, [r3, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d000      	beq.n	80058be <USB_ActivateEndpoint+0xee>
 80058bc:	e150      	b.n	8005b60 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d100      	bne.n	80058c8 <USB_ActivateEndpoint+0xf8>
 80058c6:	e07a      	b.n	80059be <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2250      	movs	r2, #80	; 0x50
 80058d0:	5a9b      	ldrh	r3, [r3, r2]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	001a      	movs	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	189b      	adds	r3, r3, r2
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	00da      	lsls	r2, r3, #3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	18d3      	adds	r3, r2, r3
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	00d2      	lsls	r2, r2, #3
 80058ea:	4694      	mov	ip, r2
 80058ec:	4463      	add	r3, ip
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	88db      	ldrh	r3, [r3, #6]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	18db      	adds	r3, r3, r3
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	18d2      	adds	r2, r2, r3
 800590a:	210e      	movs	r1, #14
 800590c:	187b      	adds	r3, r7, r1
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	187b      	adds	r3, r7, r1
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	2240      	movs	r2, #64	; 0x40
 8005918:	4013      	ands	r3, r2
 800591a:	d016      	beq.n	800594a <USB_ActivateEndpoint+0x17a>
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	18d3      	adds	r3, r2, r3
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29a      	uxth	r2, r3
 800592a:	200c      	movs	r0, #12
 800592c:	183b      	adds	r3, r7, r0
 800592e:	4983      	ldr	r1, [pc, #524]	; (8005b3c <USB_ActivateEndpoint+0x36c>)
 8005930:	400a      	ands	r2, r1
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	18d3      	adds	r3, r2, r3
 800593e:	183a      	adds	r2, r7, r0
 8005940:	8812      	ldrh	r2, [r2, #0]
 8005942:	497f      	ldr	r1, [pc, #508]	; (8005b40 <USB_ActivateEndpoint+0x370>)
 8005944:	430a      	orrs	r2, r1
 8005946:	b292      	uxth	r2, r2
 8005948:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	78db      	ldrb	r3, [r3, #3]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d01d      	beq.n	800598e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	18d3      	adds	r3, r2, r3
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29a      	uxth	r2, r3
 8005960:	2008      	movs	r0, #8
 8005962:	183b      	adds	r3, r7, r0
 8005964:	4977      	ldr	r1, [pc, #476]	; (8005b44 <USB_ActivateEndpoint+0x374>)
 8005966:	400a      	ands	r2, r1
 8005968:	801a      	strh	r2, [r3, #0]
 800596a:	183b      	adds	r3, r7, r0
 800596c:	183a      	adds	r2, r7, r0
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	2120      	movs	r1, #32
 8005972:	404a      	eors	r2, r1
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	18d3      	adds	r3, r2, r3
 8005980:	183a      	adds	r2, r7, r0
 8005982:	8812      	ldrh	r2, [r2, #0]
 8005984:	496c      	ldr	r1, [pc, #432]	; (8005b38 <USB_ActivateEndpoint+0x368>)
 8005986:	430a      	orrs	r2, r1
 8005988:	b292      	uxth	r2, r2
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e25e      	b.n	8005e4c <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	18d3      	adds	r3, r2, r3
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29a      	uxth	r2, r3
 800599c:	200a      	movs	r0, #10
 800599e:	183b      	adds	r3, r7, r0
 80059a0:	4968      	ldr	r1, [pc, #416]	; (8005b44 <USB_ActivateEndpoint+0x374>)
 80059a2:	400a      	ands	r2, r1
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	18d3      	adds	r3, r2, r3
 80059b0:	183a      	adds	r2, r7, r0
 80059b2:	8812      	ldrh	r2, [r2, #0]
 80059b4:	4960      	ldr	r1, [pc, #384]	; (8005b38 <USB_ActivateEndpoint+0x368>)
 80059b6:	430a      	orrs	r2, r1
 80059b8:	b292      	uxth	r2, r2
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e246      	b.n	8005e4c <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2250      	movs	r2, #80	; 0x50
 80059c6:	5a9b      	ldrh	r3, [r3, r2]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	001a      	movs	r2, r3
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	00da      	lsls	r2, r3, #3
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	18d3      	adds	r3, r2, r3
 80059dc:	4a5a      	ldr	r2, [pc, #360]	; (8005b48 <USB_ActivateEndpoint+0x378>)
 80059de:	4694      	mov	ip, r2
 80059e0:	4463      	add	r3, ip
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	88db      	ldrh	r3, [r3, #6]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	18db      	adds	r3, r3, r3
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2250      	movs	r2, #80	; 0x50
 80059fc:	5a9b      	ldrh	r3, [r3, r2]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	001a      	movs	r2, r3
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	189b      	adds	r3, r3, r2
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00da      	lsls	r2, r3, #3
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	18d3      	adds	r3, r2, r3
 8005a12:	4a4e      	ldr	r2, [pc, #312]	; (8005b4c <USB_ActivateEndpoint+0x37c>)
 8005a14:	4694      	mov	ip, r2
 8005a16:	4463      	add	r3, ip
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d110      	bne.n	8005a44 <USB_ActivateEndpoint+0x274>
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4a49      	ldr	r2, [pc, #292]	; (8005b50 <USB_ActivateEndpoint+0x380>)
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4a46      	ldr	r2, [pc, #280]	; (8005b54 <USB_ActivateEndpoint+0x384>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	801a      	strh	r2, [r3, #0]
 8005a42:	e02b      	b.n	8005a9c <USB_ActivateEndpoint+0x2cc>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b3e      	cmp	r3, #62	; 0x3e
 8005a4a:	d812      	bhi.n	8005a72 <USB_ActivateEndpoint+0x2a2>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	663b      	str	r3, [r7, #96]	; 0x60
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d002      	beq.n	8005a64 <USB_ActivateEndpoint+0x294>
 8005a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a60:	3301      	adds	r3, #1
 8005a62:	663b      	str	r3, [r7, #96]	; 0x60
 8005a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	e014      	b.n	8005a9c <USB_ActivateEndpoint+0x2cc>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	663b      	str	r3, [r7, #96]	; 0x60
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	221f      	movs	r2, #31
 8005a80:	4013      	ands	r3, r2
 8005a82:	d102      	bne.n	8005a8a <USB_ActivateEndpoint+0x2ba>
 8005a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a86:	3b01      	subs	r3, #1
 8005a88:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	029b      	lsls	r3, r3, #10
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	4a30      	ldr	r2, [pc, #192]	; (8005b54 <USB_ActivateEndpoint+0x384>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	18d2      	adds	r2, r2, r3
 8005aa6:	211e      	movs	r1, #30
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	8812      	ldrh	r2, [r2, #0]
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	187b      	adds	r3, r7, r1
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	01db      	lsls	r3, r3, #7
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d016      	beq.n	8005ae8 <USB_ActivateEndpoint+0x318>
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	201c      	movs	r0, #28
 8005aca:	183b      	adds	r3, r7, r0
 8005acc:	491b      	ldr	r1, [pc, #108]	; (8005b3c <USB_ActivateEndpoint+0x36c>)
 8005ace:	400a      	ands	r2, r1
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	18d3      	adds	r3, r2, r3
 8005adc:	183a      	adds	r2, r7, r0
 8005ade:	8812      	ldrh	r2, [r2, #0]
 8005ae0:	491d      	ldr	r1, [pc, #116]	; (8005b58 <USB_ActivateEndpoint+0x388>)
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	18d3      	adds	r3, r2, r3
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	201a      	movs	r0, #26
 8005af8:	183b      	adds	r3, r7, r0
 8005afa:	4918      	ldr	r1, [pc, #96]	; (8005b5c <USB_ActivateEndpoint+0x38c>)
 8005afc:	400a      	ands	r2, r1
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	183b      	adds	r3, r7, r0
 8005b02:	183a      	adds	r2, r7, r0
 8005b04:	8812      	ldrh	r2, [r2, #0]
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	0149      	lsls	r1, r1, #5
 8005b0a:	404a      	eors	r2, r1
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	183a      	adds	r2, r7, r0
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	0189      	lsls	r1, r1, #6
 8005b18:	404a      	eors	r2, r1
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	18d3      	adds	r3, r2, r3
 8005b26:	183a      	adds	r2, r7, r0
 8005b28:	8812      	ldrh	r2, [r2, #0]
 8005b2a:	4903      	ldr	r1, [pc, #12]	; (8005b38 <USB_ActivateEndpoint+0x368>)
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	e18b      	b.n	8005e4c <USB_ActivateEndpoint+0x67c>
 8005b34:	ffff898f 	.word	0xffff898f
 8005b38:	ffff8080 	.word	0xffff8080
 8005b3c:	ffff8f8f 	.word	0xffff8f8f
 8005b40:	ffff80c0 	.word	0xffff80c0
 8005b44:	ffff8fbf 	.word	0xffff8fbf
 8005b48:	00000404 	.word	0x00000404
 8005b4c:	00000406 	.word	0x00000406
 8005b50:	ffff83ff 	.word	0xffff83ff
 8005b54:	ffff8000 	.word	0xffff8000
 8005b58:	ffffc080 	.word	0xffffc080
 8005b5c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	205c      	movs	r0, #92	; 0x5c
 8005b70:	183b      	adds	r3, r7, r0
 8005b72:	49ba      	ldr	r1, [pc, #744]	; (8005e5c <USB_ActivateEndpoint+0x68c>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	183a      	adds	r2, r7, r0
 8005b84:	8812      	ldrh	r2, [r2, #0]
 8005b86:	49b6      	ldr	r1, [pc, #728]	; (8005e60 <USB_ActivateEndpoint+0x690>)
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2250      	movs	r2, #80	; 0x50
 8005b96:	5a9b      	ldrh	r3, [r3, r2]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	001a      	movs	r2, r3
 8005b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	00da      	lsls	r2, r3, #3
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005baa:	18d3      	adds	r3, r2, r3
 8005bac:	2280      	movs	r2, #128	; 0x80
 8005bae:	00d2      	lsls	r2, r2, #3
 8005bb0:	4694      	mov	ip, r2
 8005bb2:	4463      	add	r3, ip
 8005bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	891b      	ldrh	r3, [r3, #8]
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	18db      	adds	r3, r3, r3
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2250      	movs	r2, #80	; 0x50
 8005bce:	5a9b      	ldrh	r3, [r3, r2]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd6:	189b      	adds	r3, r3, r2
 8005bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	00da      	lsls	r2, r3, #3
 8005be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be2:	18d3      	adds	r3, r2, r3
 8005be4:	4a9f      	ldr	r2, [pc, #636]	; (8005e64 <USB_ActivateEndpoint+0x694>)
 8005be6:	4694      	mov	ip, r2
 8005be8:	4463      	add	r3, ip
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	18db      	adds	r3, r3, r3
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d000      	beq.n	8005c06 <USB_ActivateEndpoint+0x436>
 8005c04:	e087      	b.n	8005d16 <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	18d2      	adds	r2, r2, r3
 8005c10:	213c      	movs	r1, #60	; 0x3c
 8005c12:	187b      	adds	r3, r7, r1
 8005c14:	8812      	ldrh	r2, [r2, #0]
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	187b      	adds	r3, r7, r1
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	01db      	lsls	r3, r3, #7
 8005c20:	4013      	ands	r3, r2
 8005c22:	d016      	beq.n	8005c52 <USB_ActivateEndpoint+0x482>
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	18d3      	adds	r3, r2, r3
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	203a      	movs	r0, #58	; 0x3a
 8005c34:	183b      	adds	r3, r7, r0
 8005c36:	4989      	ldr	r1, [pc, #548]	; (8005e5c <USB_ActivateEndpoint+0x68c>)
 8005c38:	400a      	ands	r2, r1
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	18d3      	adds	r3, r2, r3
 8005c46:	183a      	adds	r2, r7, r0
 8005c48:	8812      	ldrh	r2, [r2, #0]
 8005c4a:	4987      	ldr	r1, [pc, #540]	; (8005e68 <USB_ActivateEndpoint+0x698>)
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	18d2      	adds	r2, r2, r3
 8005c5c:	2138      	movs	r1, #56	; 0x38
 8005c5e:	187b      	adds	r3, r7, r1
 8005c60:	8812      	ldrh	r2, [r2, #0]
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	187b      	adds	r3, r7, r1
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	2240      	movs	r2, #64	; 0x40
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d016      	beq.n	8005c9c <USB_ActivateEndpoint+0x4cc>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	18d3      	adds	r3, r2, r3
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	2036      	movs	r0, #54	; 0x36
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	4976      	ldr	r1, [pc, #472]	; (8005e5c <USB_ActivateEndpoint+0x68c>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	183a      	adds	r2, r7, r0
 8005c92:	8812      	ldrh	r2, [r2, #0]
 8005c94:	4975      	ldr	r1, [pc, #468]	; (8005e6c <USB_ActivateEndpoint+0x69c>)
 8005c96:	430a      	orrs	r2, r1
 8005c98:	b292      	uxth	r2, r2
 8005c9a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	18d3      	adds	r3, r2, r3
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	2034      	movs	r0, #52	; 0x34
 8005cac:	183b      	adds	r3, r7, r0
 8005cae:	4970      	ldr	r1, [pc, #448]	; (8005e70 <USB_ActivateEndpoint+0x6a0>)
 8005cb0:	400a      	ands	r2, r1
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	183b      	adds	r3, r7, r0
 8005cb6:	183a      	adds	r2, r7, r0
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	0149      	lsls	r1, r1, #5
 8005cbe:	404a      	eors	r2, r1
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	183b      	adds	r3, r7, r0
 8005cc4:	183a      	adds	r2, r7, r0
 8005cc6:	8812      	ldrh	r2, [r2, #0]
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	0189      	lsls	r1, r1, #6
 8005ccc:	404a      	eors	r2, r1
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	18d3      	adds	r3, r2, r3
 8005cda:	183a      	adds	r2, r7, r0
 8005cdc:	8812      	ldrh	r2, [r2, #0]
 8005cde:	4965      	ldr	r1, [pc, #404]	; (8005e74 <USB_ActivateEndpoint+0x6a4>)
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	18d3      	adds	r3, r2, r3
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	2032      	movs	r0, #50	; 0x32
 8005cf6:	183b      	adds	r3, r7, r0
 8005cf8:	495f      	ldr	r1, [pc, #380]	; (8005e78 <USB_ActivateEndpoint+0x6a8>)
 8005cfa:	400a      	ands	r2, r1
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	18d3      	adds	r3, r2, r3
 8005d08:	183a      	adds	r2, r7, r0
 8005d0a:	8812      	ldrh	r2, [r2, #0]
 8005d0c:	4959      	ldr	r1, [pc, #356]	; (8005e74 <USB_ActivateEndpoint+0x6a4>)
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	b292      	uxth	r2, r2
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	e09a      	b.n	8005e4c <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	18d2      	adds	r2, r2, r3
 8005d20:	214a      	movs	r1, #74	; 0x4a
 8005d22:	187b      	adds	r3, r7, r1
 8005d24:	8812      	ldrh	r2, [r2, #0]
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	01db      	lsls	r3, r3, #7
 8005d30:	4013      	ands	r3, r2
 8005d32:	d016      	beq.n	8005d62 <USB_ActivateEndpoint+0x592>
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	18d3      	adds	r3, r2, r3
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	2048      	movs	r0, #72	; 0x48
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	4945      	ldr	r1, [pc, #276]	; (8005e5c <USB_ActivateEndpoint+0x68c>)
 8005d48:	400a      	ands	r2, r1
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	18d3      	adds	r3, r2, r3
 8005d56:	183a      	adds	r2, r7, r0
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	4943      	ldr	r1, [pc, #268]	; (8005e68 <USB_ActivateEndpoint+0x698>)
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	18d2      	adds	r2, r2, r3
 8005d6c:	2146      	movs	r1, #70	; 0x46
 8005d6e:	187b      	adds	r3, r7, r1
 8005d70:	8812      	ldrh	r2, [r2, #0]
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	187b      	adds	r3, r7, r1
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	2240      	movs	r2, #64	; 0x40
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d016      	beq.n	8005dac <USB_ActivateEndpoint+0x5dc>
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	18d3      	adds	r3, r2, r3
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	2044      	movs	r0, #68	; 0x44
 8005d8e:	183b      	adds	r3, r7, r0
 8005d90:	4932      	ldr	r1, [pc, #200]	; (8005e5c <USB_ActivateEndpoint+0x68c>)
 8005d92:	400a      	ands	r2, r1
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	18d3      	adds	r3, r2, r3
 8005da0:	183a      	adds	r2, r7, r0
 8005da2:	8812      	ldrh	r2, [r2, #0]
 8005da4:	4931      	ldr	r1, [pc, #196]	; (8005e6c <USB_ActivateEndpoint+0x69c>)
 8005da6:	430a      	orrs	r2, r1
 8005da8:	b292      	uxth	r2, r2
 8005daa:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d01d      	beq.n	8005df0 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	2040      	movs	r0, #64	; 0x40
 8005dc4:	183b      	adds	r3, r7, r0
 8005dc6:	492c      	ldr	r1, [pc, #176]	; (8005e78 <USB_ActivateEndpoint+0x6a8>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	183b      	adds	r3, r7, r0
 8005dce:	183a      	adds	r2, r7, r0
 8005dd0:	8812      	ldrh	r2, [r2, #0]
 8005dd2:	2120      	movs	r1, #32
 8005dd4:	404a      	eors	r2, r1
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	18d3      	adds	r3, r2, r3
 8005de2:	183a      	adds	r2, r7, r0
 8005de4:	8812      	ldrh	r2, [r2, #0]
 8005de6:	4923      	ldr	r1, [pc, #140]	; (8005e74 <USB_ActivateEndpoint+0x6a4>)
 8005de8:	430a      	orrs	r2, r1
 8005dea:	b292      	uxth	r2, r2
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	e016      	b.n	8005e1e <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	18d3      	adds	r3, r2, r3
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	2042      	movs	r0, #66	; 0x42
 8005e00:	183b      	adds	r3, r7, r0
 8005e02:	491d      	ldr	r1, [pc, #116]	; (8005e78 <USB_ActivateEndpoint+0x6a8>)
 8005e04:	400a      	ands	r2, r1
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	18d3      	adds	r3, r2, r3
 8005e12:	183a      	adds	r2, r7, r0
 8005e14:	8812      	ldrh	r2, [r2, #0]
 8005e16:	4917      	ldr	r1, [pc, #92]	; (8005e74 <USB_ActivateEndpoint+0x6a4>)
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	b292      	uxth	r2, r2
 8005e1c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	203e      	movs	r0, #62	; 0x3e
 8005e2e:	183b      	adds	r3, r7, r0
 8005e30:	490f      	ldr	r1, [pc, #60]	; (8005e70 <USB_ActivateEndpoint+0x6a0>)
 8005e32:	400a      	ands	r2, r1
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	18d3      	adds	r3, r2, r3
 8005e40:	183a      	adds	r2, r7, r0
 8005e42:	8812      	ldrh	r2, [r2, #0]
 8005e44:	490b      	ldr	r1, [pc, #44]	; (8005e74 <USB_ActivateEndpoint+0x6a4>)
 8005e46:	430a      	orrs	r2, r1
 8005e48:	b292      	uxth	r2, r2
 8005e4a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005e4c:	2367      	movs	r3, #103	; 0x67
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	781b      	ldrb	r3, [r3, #0]
}
 8005e52:	0018      	movs	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b01a      	add	sp, #104	; 0x68
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	ffff8f8f 	.word	0xffff8f8f
 8005e60:	ffff8180 	.word	0xffff8180
 8005e64:	00000404 	.word	0x00000404
 8005e68:	ffffc080 	.word	0xffffc080
 8005e6c:	ffff80c0 	.word	0xffff80c0
 8005e70:	ffffbf8f 	.word	0xffffbf8f
 8005e74:	ffff8080 	.word	0xffff8080
 8005e78:	ffff8fbf 	.word	0xffff8fbf

08005e7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08c      	sub	sp, #48	; 0x30
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	7b1b      	ldrb	r3, [r3, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d000      	beq.n	8005e90 <USB_DeactivateEndpoint+0x14>
 8005e8e:	e07e      	b.n	8005f8e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d03c      	beq.n	8005f12 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	18d2      	adds	r2, r2, r3
 8005ea2:	210c      	movs	r1, #12
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	8812      	ldrh	r2, [r2, #0]
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d016      	beq.n	8005ee2 <USB_DeactivateEndpoint+0x66>
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	18d3      	adds	r3, r2, r3
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	200a      	movs	r0, #10
 8005ec4:	183b      	adds	r3, r7, r0
 8005ec6:	49c7      	ldr	r1, [pc, #796]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 8005ec8:	400a      	ands	r2, r1
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	18d3      	adds	r3, r2, r3
 8005ed6:	183a      	adds	r2, r7, r0
 8005ed8:	8812      	ldrh	r2, [r2, #0]
 8005eda:	49c3      	ldr	r1, [pc, #780]	; (80061e8 <USB_DeactivateEndpoint+0x36c>)
 8005edc:	430a      	orrs	r2, r1
 8005ede:	b292      	uxth	r2, r2
 8005ee0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	18d3      	adds	r3, r2, r3
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	2008      	movs	r0, #8
 8005ef2:	183b      	adds	r3, r7, r0
 8005ef4:	49bd      	ldr	r1, [pc, #756]	; (80061ec <USB_DeactivateEndpoint+0x370>)
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	183a      	adds	r2, r7, r0
 8005f06:	8812      	ldrh	r2, [r2, #0]
 8005f08:	49b9      	ldr	r1, [pc, #740]	; (80061f0 <USB_DeactivateEndpoint+0x374>)
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	b292      	uxth	r2, r2
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e163      	b.n	80061da <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	18d2      	adds	r2, r2, r3
 8005f1c:	2112      	movs	r1, #18
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	8812      	ldrh	r2, [r2, #0]
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	187b      	adds	r3, r7, r1
 8005f26:	881a      	ldrh	r2, [r3, #0]
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	01db      	lsls	r3, r3, #7
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d016      	beq.n	8005f5e <USB_DeactivateEndpoint+0xe2>
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	2010      	movs	r0, #16
 8005f40:	183b      	adds	r3, r7, r0
 8005f42:	49a8      	ldr	r1, [pc, #672]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 8005f44:	400a      	ands	r2, r1
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	18d3      	adds	r3, r2, r3
 8005f52:	183a      	adds	r2, r7, r0
 8005f54:	8812      	ldrh	r2, [r2, #0]
 8005f56:	49a7      	ldr	r1, [pc, #668]	; (80061f4 <USB_DeactivateEndpoint+0x378>)
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	18d3      	adds	r3, r2, r3
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	200e      	movs	r0, #14
 8005f6e:	183b      	adds	r3, r7, r0
 8005f70:	49a1      	ldr	r1, [pc, #644]	; (80061f8 <USB_DeactivateEndpoint+0x37c>)
 8005f72:	400a      	ands	r2, r1
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	18d3      	adds	r3, r2, r3
 8005f80:	183a      	adds	r2, r7, r0
 8005f82:	8812      	ldrh	r2, [r2, #0]
 8005f84:	499a      	ldr	r1, [pc, #616]	; (80061f0 <USB_DeactivateEndpoint+0x374>)
 8005f86:	430a      	orrs	r2, r1
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e125      	b.n	80061da <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d000      	beq.n	8005f98 <USB_DeactivateEndpoint+0x11c>
 8005f96:	e090      	b.n	80060ba <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	18d2      	adds	r2, r2, r3
 8005fa2:	2120      	movs	r1, #32
 8005fa4:	187b      	adds	r3, r7, r1
 8005fa6:	8812      	ldrh	r2, [r2, #0]
 8005fa8:	801a      	strh	r2, [r3, #0]
 8005faa:	187b      	adds	r3, r7, r1
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	01db      	lsls	r3, r3, #7
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d016      	beq.n	8005fe4 <USB_DeactivateEndpoint+0x168>
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	18d3      	adds	r3, r2, r3
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	201e      	movs	r0, #30
 8005fc6:	183b      	adds	r3, r7, r0
 8005fc8:	4986      	ldr	r1, [pc, #536]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 8005fca:	400a      	ands	r2, r1
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	18d3      	adds	r3, r2, r3
 8005fd8:	183a      	adds	r2, r7, r0
 8005fda:	8812      	ldrh	r2, [r2, #0]
 8005fdc:	4985      	ldr	r1, [pc, #532]	; (80061f4 <USB_DeactivateEndpoint+0x378>)
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	b292      	uxth	r2, r2
 8005fe2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	18d2      	adds	r2, r2, r3
 8005fee:	211c      	movs	r1, #28
 8005ff0:	187b      	adds	r3, r7, r1
 8005ff2:	8812      	ldrh	r2, [r2, #0]
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	2240      	movs	r2, #64	; 0x40
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d016      	beq.n	800602e <USB_DeactivateEndpoint+0x1b2>
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	18d3      	adds	r3, r2, r3
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29a      	uxth	r2, r3
 800600e:	201a      	movs	r0, #26
 8006010:	183b      	adds	r3, r7, r0
 8006012:	4974      	ldr	r1, [pc, #464]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 8006014:	400a      	ands	r2, r1
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	18d3      	adds	r3, r2, r3
 8006022:	183a      	adds	r2, r7, r0
 8006024:	8812      	ldrh	r2, [r2, #0]
 8006026:	4970      	ldr	r1, [pc, #448]	; (80061e8 <USB_DeactivateEndpoint+0x36c>)
 8006028:	430a      	orrs	r2, r1
 800602a:	b292      	uxth	r2, r2
 800602c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	18d3      	adds	r3, r2, r3
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29a      	uxth	r2, r3
 800603c:	2018      	movs	r0, #24
 800603e:	183b      	adds	r3, r7, r0
 8006040:	4968      	ldr	r1, [pc, #416]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 8006042:	400a      	ands	r2, r1
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	18d3      	adds	r3, r2, r3
 8006050:	183a      	adds	r2, r7, r0
 8006052:	8812      	ldrh	r2, [r2, #0]
 8006054:	4964      	ldr	r1, [pc, #400]	; (80061e8 <USB_DeactivateEndpoint+0x36c>)
 8006056:	430a      	orrs	r2, r1
 8006058:	b292      	uxth	r2, r2
 800605a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	18d3      	adds	r3, r2, r3
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29a      	uxth	r2, r3
 800606a:	2016      	movs	r0, #22
 800606c:	183b      	adds	r3, r7, r0
 800606e:	4962      	ldr	r1, [pc, #392]	; (80061f8 <USB_DeactivateEndpoint+0x37c>)
 8006070:	400a      	ands	r2, r1
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	18d3      	adds	r3, r2, r3
 800607e:	183a      	adds	r2, r7, r0
 8006080:	8812      	ldrh	r2, [r2, #0]
 8006082:	495b      	ldr	r1, [pc, #364]	; (80061f0 <USB_DeactivateEndpoint+0x374>)
 8006084:	430a      	orrs	r2, r1
 8006086:	b292      	uxth	r2, r2
 8006088:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	18d3      	adds	r3, r2, r3
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29a      	uxth	r2, r3
 8006098:	2014      	movs	r0, #20
 800609a:	183b      	adds	r3, r7, r0
 800609c:	4953      	ldr	r1, [pc, #332]	; (80061ec <USB_DeactivateEndpoint+0x370>)
 800609e:	400a      	ands	r2, r1
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	18d3      	adds	r3, r2, r3
 80060ac:	183a      	adds	r2, r7, r0
 80060ae:	8812      	ldrh	r2, [r2, #0]
 80060b0:	494f      	ldr	r1, [pc, #316]	; (80061f0 <USB_DeactivateEndpoint+0x374>)
 80060b2:	430a      	orrs	r2, r1
 80060b4:	b292      	uxth	r2, r2
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	e08f      	b.n	80061da <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	18d2      	adds	r2, r2, r3
 80060c4:	212e      	movs	r1, #46	; 0x2e
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	8812      	ldrh	r2, [r2, #0]
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	881a      	ldrh	r2, [r3, #0]
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	01db      	lsls	r3, r3, #7
 80060d4:	4013      	ands	r3, r2
 80060d6:	d016      	beq.n	8006106 <USB_DeactivateEndpoint+0x28a>
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	18d3      	adds	r3, r2, r3
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	202c      	movs	r0, #44	; 0x2c
 80060e8:	183b      	adds	r3, r7, r0
 80060ea:	493e      	ldr	r1, [pc, #248]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 80060ec:	400a      	ands	r2, r1
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	18d3      	adds	r3, r2, r3
 80060fa:	183a      	adds	r2, r7, r0
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	493d      	ldr	r1, [pc, #244]	; (80061f4 <USB_DeactivateEndpoint+0x378>)
 8006100:	430a      	orrs	r2, r1
 8006102:	b292      	uxth	r2, r2
 8006104:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	18d2      	adds	r2, r2, r3
 8006110:	212a      	movs	r1, #42	; 0x2a
 8006112:	187b      	adds	r3, r7, r1
 8006114:	8812      	ldrh	r2, [r2, #0]
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	187b      	adds	r3, r7, r1
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	2240      	movs	r2, #64	; 0x40
 800611e:	4013      	ands	r3, r2
 8006120:	d016      	beq.n	8006150 <USB_DeactivateEndpoint+0x2d4>
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	18d3      	adds	r3, r2, r3
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29a      	uxth	r2, r3
 8006130:	2028      	movs	r0, #40	; 0x28
 8006132:	183b      	adds	r3, r7, r0
 8006134:	492b      	ldr	r1, [pc, #172]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 8006136:	400a      	ands	r2, r1
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	183a      	adds	r2, r7, r0
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	4927      	ldr	r1, [pc, #156]	; (80061e8 <USB_DeactivateEndpoint+0x36c>)
 800614a:	430a      	orrs	r2, r1
 800614c:	b292      	uxth	r2, r2
 800614e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	18d3      	adds	r3, r2, r3
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29a      	uxth	r2, r3
 800615e:	2026      	movs	r0, #38	; 0x26
 8006160:	183b      	adds	r3, r7, r0
 8006162:	4920      	ldr	r1, [pc, #128]	; (80061e4 <USB_DeactivateEndpoint+0x368>)
 8006164:	400a      	ands	r2, r1
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	18d3      	adds	r3, r2, r3
 8006172:	183a      	adds	r2, r7, r0
 8006174:	8812      	ldrh	r2, [r2, #0]
 8006176:	491f      	ldr	r1, [pc, #124]	; (80061f4 <USB_DeactivateEndpoint+0x378>)
 8006178:	430a      	orrs	r2, r1
 800617a:	b292      	uxth	r2, r2
 800617c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	18d3      	adds	r3, r2, r3
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29a      	uxth	r2, r3
 800618c:	2024      	movs	r0, #36	; 0x24
 800618e:	183b      	adds	r3, r7, r0
 8006190:	4916      	ldr	r1, [pc, #88]	; (80061ec <USB_DeactivateEndpoint+0x370>)
 8006192:	400a      	ands	r2, r1
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	18d3      	adds	r3, r2, r3
 80061a0:	183a      	adds	r2, r7, r0
 80061a2:	8812      	ldrh	r2, [r2, #0]
 80061a4:	4912      	ldr	r1, [pc, #72]	; (80061f0 <USB_DeactivateEndpoint+0x374>)
 80061a6:	430a      	orrs	r2, r1
 80061a8:	b292      	uxth	r2, r2
 80061aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	18d3      	adds	r3, r2, r3
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	2022      	movs	r0, #34	; 0x22
 80061bc:	183b      	adds	r3, r7, r0
 80061be:	490e      	ldr	r1, [pc, #56]	; (80061f8 <USB_DeactivateEndpoint+0x37c>)
 80061c0:	400a      	ands	r2, r1
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	18d3      	adds	r3, r2, r3
 80061ce:	183a      	adds	r2, r7, r0
 80061d0:	8812      	ldrh	r2, [r2, #0]
 80061d2:	4907      	ldr	r1, [pc, #28]	; (80061f0 <USB_DeactivateEndpoint+0x374>)
 80061d4:	430a      	orrs	r2, r1
 80061d6:	b292      	uxth	r2, r2
 80061d8:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	0018      	movs	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	b00c      	add	sp, #48	; 0x30
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	ffff8f8f 	.word	0xffff8f8f
 80061e8:	ffff80c0 	.word	0xffff80c0
 80061ec:	ffff8fbf 	.word	0xffff8fbf
 80061f0:	ffff8080 	.word	0xffff8080
 80061f4:	ffffc080 	.word	0xffffc080
 80061f8:	ffffbf8f 	.word	0xffffbf8f

080061fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061fc:	b5b0      	push	{r4, r5, r7, lr}
 80061fe:	b0c4      	sub	sp, #272	; 0x110
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d001      	beq.n	8006212 <USB_EPStartXfer+0x16>
 800620e:	f000 fd63 	bl	8006cd8 <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	429a      	cmp	r2, r3
 800621c:	d906      	bls.n	800622c <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2286      	movs	r2, #134	; 0x86
 8006224:	0052      	lsls	r2, r2, #1
 8006226:	18ba      	adds	r2, r7, r2
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e005      	b.n	8006238 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2286      	movs	r2, #134	; 0x86
 8006232:	0052      	lsls	r2, r2, #1
 8006234:	18ba      	adds	r2, r7, r2
 8006236:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	7b1b      	ldrb	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d125      	bne.n	800628c <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6959      	ldr	r1, [r3, #20]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	88da      	ldrh	r2, [r3, #6]
 8006248:	2486      	movs	r4, #134	; 0x86
 800624a:	0064      	lsls	r4, r4, #1
 800624c:	193b      	adds	r3, r7, r4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fa62 	bl	800771c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2250      	movs	r2, #80	; 0x50
 8006260:	5a9b      	ldrh	r3, [r3, r2]
 8006262:	b29b      	uxth	r3, r3
 8006264:	001a      	movs	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	189b      	adds	r3, r3, r2
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	00da      	lsls	r2, r3, #3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	18d3      	adds	r3, r2, r3
 8006276:	4ad4      	ldr	r2, [pc, #848]	; (80065c8 <USB_EPStartXfer+0x3cc>)
 8006278:	4694      	mov	ip, r2
 800627a:	4463      	add	r3, ip
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	193b      	adds	r3, r7, r4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	b29a      	uxth	r2, r3
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	f000 fce4 	bl	8006c54 <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	78db      	ldrb	r3, [r3, #3]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d000      	beq.n	8006296 <USB_EPStartXfer+0x9a>
 8006294:	e358      	b.n	8006948 <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d800      	bhi.n	80062a4 <USB_EPStartXfer+0xa8>
 80062a2:	e2fe      	b.n	80068a2 <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	18d3      	adds	r3, r2, r3
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	205a      	movs	r0, #90	; 0x5a
 80062b4:	183b      	adds	r3, r7, r0
 80062b6:	49c5      	ldr	r1, [pc, #788]	; (80065cc <USB_EPStartXfer+0x3d0>)
 80062b8:	400a      	ands	r2, r1
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	18d3      	adds	r3, r2, r3
 80062c6:	183a      	adds	r2, r7, r0
 80062c8:	8812      	ldrh	r2, [r2, #0]
 80062ca:	49c1      	ldr	r1, [pc, #772]	; (80065d0 <USB_EPStartXfer+0x3d4>)
 80062cc:	430a      	orrs	r2, r1
 80062ce:	b292      	uxth	r2, r2
 80062d0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	2386      	movs	r3, #134	; 0x86
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	1ad2      	subs	r2, r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	18d3      	adds	r3, r2, r3
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	001a      	movs	r2, r3
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	4013      	ands	r3, r2
 80062f8:	d100      	bne.n	80062fc <USB_EPStartXfer+0x100>
 80062fa:	e171      	b.n	80065e0 <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d16c      	bne.n	80063e2 <USB_EPStartXfer+0x1e6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2250      	movs	r2, #80	; 0x50
 8006310:	5a9b      	ldrh	r3, [r3, r2]
 8006312:	b29b      	uxth	r3, r3
 8006314:	001a      	movs	r2, r3
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	189b      	adds	r3, r3, r2
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	00da      	lsls	r2, r3, #3
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	18d3      	adds	r3, r2, r3
 8006326:	4aab      	ldr	r2, [pc, #684]	; (80065d4 <USB_EPStartXfer+0x3d8>)
 8006328:	4694      	mov	ip, r2
 800632a:	4463      	add	r3, ip
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28
 800632e:	2386      	movs	r3, #134	; 0x86
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USB_EPStartXfer+0x160>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	4aa5      	ldr	r2, [pc, #660]	; (80065d8 <USB_EPStartXfer+0x3dc>)
 8006342:	4013      	ands	r3, r2
 8006344:	b29a      	uxth	r2, r3
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	4aa2      	ldr	r2, [pc, #648]	; (80065dc <USB_EPStartXfer+0x3e0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	b29a      	uxth	r2, r3
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	e05e      	b.n	800641a <USB_EPStartXfer+0x21e>
 800635c:	2386      	movs	r3, #134	; 0x86
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b3e      	cmp	r3, #62	; 0x3e
 8006366:	d81c      	bhi.n	80063a2 <USB_EPStartXfer+0x1a6>
 8006368:	2286      	movs	r2, #134	; 0x86
 800636a:	0052      	lsls	r2, r2, #1
 800636c:	18bb      	adds	r3, r7, r2
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	1d79      	adds	r1, r7, #5
 8006374:	31ff      	adds	r1, #255	; 0xff
 8006376:	600b      	str	r3, [r1, #0]
 8006378:	18bb      	adds	r3, r7, r2
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2201      	movs	r2, #1
 800637e:	4013      	ands	r3, r2
 8006380:	d006      	beq.n	8006390 <USB_EPStartXfer+0x194>
 8006382:	1d7b      	adds	r3, r7, #5
 8006384:	33ff      	adds	r3, #255	; 0xff
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	1d7a      	adds	r2, r7, #5
 800638c:	32ff      	adds	r2, #255	; 0xff
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	1d7b      	adds	r3, r7, #5
 8006392:	33ff      	adds	r3, #255	; 0xff
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	029b      	lsls	r3, r3, #10
 800639a:	b29a      	uxth	r2, r3
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e03b      	b.n	800641a <USB_EPStartXfer+0x21e>
 80063a2:	2286      	movs	r2, #134	; 0x86
 80063a4:	0052      	lsls	r2, r2, #1
 80063a6:	18bb      	adds	r3, r7, r2
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	1d79      	adds	r1, r7, #5
 80063ae:	31ff      	adds	r1, #255	; 0xff
 80063b0:	600b      	str	r3, [r1, #0]
 80063b2:	18bb      	adds	r3, r7, r2
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	221f      	movs	r2, #31
 80063b8:	4013      	ands	r3, r2
 80063ba:	d106      	bne.n	80063ca <USB_EPStartXfer+0x1ce>
 80063bc:	1d7b      	adds	r3, r7, #5
 80063be:	33ff      	adds	r3, #255	; 0xff
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	1d7a      	adds	r2, r7, #5
 80063c6:	32ff      	adds	r2, #255	; 0xff
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	1d7b      	adds	r3, r7, #5
 80063cc:	33ff      	adds	r3, #255	; 0xff
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	4a81      	ldr	r2, [pc, #516]	; (80065dc <USB_EPStartXfer+0x3e0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	e01b      	b.n	800641a <USB_EPStartXfer+0x21e>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d117      	bne.n	800641a <USB_EPStartXfer+0x21e>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2250      	movs	r2, #80	; 0x50
 80063ee:	5a9b      	ldrh	r3, [r3, r2]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	001a      	movs	r2, r3
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f6:	189b      	adds	r3, r3, r2
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	18d3      	adds	r3, r2, r3
 8006404:	4a73      	ldr	r2, [pc, #460]	; (80065d4 <USB_EPStartXfer+0x3d8>)
 8006406:	4694      	mov	ip, r2
 8006408:	4463      	add	r3, ip
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
 800640c:	2386      	movs	r3, #134	; 0x86
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	18fb      	adds	r3, r7, r3
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b29a      	uxth	r2, r3
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800641a:	2085      	movs	r0, #133	; 0x85
 800641c:	0040      	lsls	r0, r0, #1
 800641e:	183b      	adds	r3, r7, r0
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	8952      	ldrh	r2, [r2, #10]
 8006424:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6959      	ldr	r1, [r3, #20]
 800642a:	2586      	movs	r5, #134	; 0x86
 800642c:	006d      	lsls	r5, r5, #1
 800642e:	197b      	adds	r3, r7, r5
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b29c      	uxth	r4, r3
 8006434:	183b      	adds	r3, r7, r0
 8006436:	881a      	ldrh	r2, [r3, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	0023      	movs	r3, r4
 800643c:	f001 f96e 	bl	800771c <USB_WritePMA>
            ep->xfer_buff += len;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	197b      	adds	r3, r7, r5
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	18d2      	adds	r2, r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d909      	bls.n	800646e <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	2386      	movs	r3, #134	; 0x86
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	621a      	str	r2, [r3, #32]
 800646c:	e008      	b.n	8006480 <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	2286      	movs	r2, #134	; 0x86
 8006474:	0052      	lsls	r2, r2, #1
 8006476:	18ba      	adds	r2, r7, r2
 8006478:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2200      	movs	r2, #0
 800647e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d16c      	bne.n	8006562 <USB_EPStartXfer+0x366>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2250      	movs	r2, #80	; 0x50
 8006490:	5a9b      	ldrh	r3, [r3, r2]
 8006492:	b29b      	uxth	r3, r3
 8006494:	001a      	movs	r2, r3
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	189b      	adds	r3, r3, r2
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	00da      	lsls	r2, r3, #3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	18d3      	adds	r3, r2, r3
 80064a6:	4a48      	ldr	r2, [pc, #288]	; (80065c8 <USB_EPStartXfer+0x3cc>)
 80064a8:	4694      	mov	ip, r2
 80064aa:	4463      	add	r3, ip
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	2386      	movs	r3, #134	; 0x86
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d110      	bne.n	80064dc <USB_EPStartXfer+0x2e0>
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	4a45      	ldr	r2, [pc, #276]	; (80065d8 <USB_EPStartXfer+0x3dc>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4a42      	ldr	r2, [pc, #264]	; (80065dc <USB_EPStartXfer+0x3e0>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	e060      	b.n	800659e <USB_EPStartXfer+0x3a2>
 80064dc:	2386      	movs	r3, #134	; 0x86
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b3e      	cmp	r3, #62	; 0x3e
 80064e6:	d81c      	bhi.n	8006522 <USB_EPStartXfer+0x326>
 80064e8:	2286      	movs	r2, #134	; 0x86
 80064ea:	0052      	lsls	r2, r2, #1
 80064ec:	18bb      	adds	r3, r7, r2
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	1c79      	adds	r1, r7, #1
 80064f4:	31ff      	adds	r1, #255	; 0xff
 80064f6:	600b      	str	r3, [r1, #0]
 80064f8:	18bb      	adds	r3, r7, r2
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	4013      	ands	r3, r2
 8006500:	d006      	beq.n	8006510 <USB_EPStartXfer+0x314>
 8006502:	1c7b      	adds	r3, r7, #1
 8006504:	33ff      	adds	r3, #255	; 0xff
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	1c7a      	adds	r2, r7, #1
 800650c:	32ff      	adds	r2, #255	; 0xff
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	1c7b      	adds	r3, r7, #1
 8006512:	33ff      	adds	r3, #255	; 0xff
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	029b      	lsls	r3, r3, #10
 800651a:	b29a      	uxth	r2, r3
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e03d      	b.n	800659e <USB_EPStartXfer+0x3a2>
 8006522:	2286      	movs	r2, #134	; 0x86
 8006524:	0052      	lsls	r2, r2, #1
 8006526:	18bb      	adds	r3, r7, r2
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	1c79      	adds	r1, r7, #1
 800652e:	31ff      	adds	r1, #255	; 0xff
 8006530:	600b      	str	r3, [r1, #0]
 8006532:	18bb      	adds	r3, r7, r2
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	221f      	movs	r2, #31
 8006538:	4013      	ands	r3, r2
 800653a:	d106      	bne.n	800654a <USB_EPStartXfer+0x34e>
 800653c:	1c7b      	adds	r3, r7, #1
 800653e:	33ff      	adds	r3, #255	; 0xff
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3b01      	subs	r3, #1
 8006544:	1c7a      	adds	r2, r7, #1
 8006546:	32ff      	adds	r2, #255	; 0xff
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	1c7b      	adds	r3, r7, #1
 800654c:	33ff      	adds	r3, #255	; 0xff
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	029b      	lsls	r3, r3, #10
 8006554:	b29b      	uxth	r3, r3
 8006556:	4a21      	ldr	r2, [pc, #132]	; (80065dc <USB_EPStartXfer+0x3e0>)
 8006558:	4313      	orrs	r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	e01d      	b.n	800659e <USB_EPStartXfer+0x3a2>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d119      	bne.n	800659e <USB_EPStartXfer+0x3a2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2250      	movs	r2, #80	; 0x50
 8006572:	5a9b      	ldrh	r3, [r3, r2]
 8006574:	b29b      	uxth	r3, r3
 8006576:	001a      	movs	r2, r3
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	189b      	adds	r3, r3, r2
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	00da      	lsls	r2, r3, #3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	18d3      	adds	r3, r2, r3
 8006588:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <USB_EPStartXfer+0x3cc>)
 800658a:	4694      	mov	ip, r2
 800658c:	4463      	add	r3, ip
 800658e:	623b      	str	r3, [r7, #32]
 8006590:	2386      	movs	r3, #134	; 0x86
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	b29a      	uxth	r2, r3
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800659e:	2085      	movs	r0, #133	; 0x85
 80065a0:	0040      	lsls	r0, r0, #1
 80065a2:	183b      	adds	r3, r7, r0
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	8912      	ldrh	r2, [r2, #8]
 80065a8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6959      	ldr	r1, [r3, #20]
 80065ae:	2386      	movs	r3, #134	; 0x86
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	b29c      	uxth	r4, r3
 80065b8:	183b      	adds	r3, r7, r0
 80065ba:	881a      	ldrh	r2, [r3, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	0023      	movs	r3, r4
 80065c0:	f001 f8ac 	bl	800771c <USB_WritePMA>
 80065c4:	e346      	b.n	8006c54 <USB_EPStartXfer+0xa58>
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	00000402 	.word	0x00000402
 80065cc:	ffff8f8f 	.word	0xffff8f8f
 80065d0:	ffff8180 	.word	0xffff8180
 80065d4:	00000406 	.word	0x00000406
 80065d8:	ffff83ff 	.word	0xffff83ff
 80065dc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d16a      	bne.n	80066be <USB_EPStartXfer+0x4c2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2250      	movs	r2, #80	; 0x50
 80065f0:	5a9b      	ldrh	r3, [r3, r2]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	001a      	movs	r2, r3
 80065f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f8:	189b      	adds	r3, r3, r2
 80065fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	00da      	lsls	r2, r3, #3
 8006602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006604:	18d3      	adds	r3, r2, r3
 8006606:	4aca      	ldr	r2, [pc, #808]	; (8006930 <USB_EPStartXfer+0x734>)
 8006608:	4694      	mov	ip, r2
 800660a:	4463      	add	r3, ip
 800660c:	64bb      	str	r3, [r7, #72]	; 0x48
 800660e:	2386      	movs	r3, #134	; 0x86
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d110      	bne.n	800663c <USB_EPStartXfer+0x440>
 800661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	4ac4      	ldr	r2, [pc, #784]	; (8006934 <USB_EPStartXfer+0x738>)
 8006622:	4013      	ands	r3, r2
 8006624:	b29a      	uxth	r2, r3
 8006626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	4ac1      	ldr	r2, [pc, #772]	; (8006938 <USB_EPStartXfer+0x73c>)
 8006632:	4313      	orrs	r3, r2
 8006634:	b29a      	uxth	r2, r3
 8006636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e05e      	b.n	80066fa <USB_EPStartXfer+0x4fe>
 800663c:	2386      	movs	r3, #134	; 0x86
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b3e      	cmp	r3, #62	; 0x3e
 8006646:	d81b      	bhi.n	8006680 <USB_EPStartXfer+0x484>
 8006648:	2286      	movs	r2, #134	; 0x86
 800664a:	0052      	lsls	r2, r2, #1
 800664c:	18bb      	adds	r3, r7, r2
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	21fc      	movs	r1, #252	; 0xfc
 8006654:	1879      	adds	r1, r7, r1
 8006656:	600b      	str	r3, [r1, #0]
 8006658:	18bb      	adds	r3, r7, r2
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2201      	movs	r2, #1
 800665e:	4013      	ands	r3, r2
 8006660:	d005      	beq.n	800666e <USB_EPStartXfer+0x472>
 8006662:	22fc      	movs	r2, #252	; 0xfc
 8006664:	18bb      	adds	r3, r7, r2
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	18ba      	adds	r2, r7, r2
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	23fc      	movs	r3, #252	; 0xfc
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	029b      	lsls	r3, r3, #10
 8006678:	b29a      	uxth	r2, r3
 800667a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e03c      	b.n	80066fa <USB_EPStartXfer+0x4fe>
 8006680:	2286      	movs	r2, #134	; 0x86
 8006682:	0052      	lsls	r2, r2, #1
 8006684:	18bb      	adds	r3, r7, r2
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	21fc      	movs	r1, #252	; 0xfc
 800668c:	1879      	adds	r1, r7, r1
 800668e:	600b      	str	r3, [r1, #0]
 8006690:	18bb      	adds	r3, r7, r2
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	221f      	movs	r2, #31
 8006696:	4013      	ands	r3, r2
 8006698:	d105      	bne.n	80066a6 <USB_EPStartXfer+0x4aa>
 800669a:	22fc      	movs	r2, #252	; 0xfc
 800669c:	18bb      	adds	r3, r7, r2
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	18ba      	adds	r2, r7, r2
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	23fc      	movs	r3, #252	; 0xfc
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	029b      	lsls	r3, r3, #10
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	4aa1      	ldr	r2, [pc, #644]	; (8006938 <USB_EPStartXfer+0x73c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	e01d      	b.n	80066fa <USB_EPStartXfer+0x4fe>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d119      	bne.n	80066fa <USB_EPStartXfer+0x4fe>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	657b      	str	r3, [r7, #84]	; 0x54
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2250      	movs	r2, #80	; 0x50
 80066ce:	5a9b      	ldrh	r3, [r3, r2]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	001a      	movs	r2, r3
 80066d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d6:	189b      	adds	r3, r3, r2
 80066d8:	657b      	str	r3, [r7, #84]	; 0x54
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	00da      	lsls	r2, r3, #3
 80066e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e2:	18d3      	adds	r3, r2, r3
 80066e4:	4a92      	ldr	r2, [pc, #584]	; (8006930 <USB_EPStartXfer+0x734>)
 80066e6:	4694      	mov	ip, r2
 80066e8:	4463      	add	r3, ip
 80066ea:	653b      	str	r3, [r7, #80]	; 0x50
 80066ec:	2386      	movs	r3, #134	; 0x86
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066fa:	2085      	movs	r0, #133	; 0x85
 80066fc:	0040      	lsls	r0, r0, #1
 80066fe:	183b      	adds	r3, r7, r0
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	8912      	ldrh	r2, [r2, #8]
 8006704:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6959      	ldr	r1, [r3, #20]
 800670a:	2586      	movs	r5, #134	; 0x86
 800670c:	006d      	lsls	r5, r5, #1
 800670e:	197b      	adds	r3, r7, r5
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	b29c      	uxth	r4, r3
 8006714:	183b      	adds	r3, r7, r0
 8006716:	881a      	ldrh	r2, [r3, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	0023      	movs	r3, r4
 800671c:	f000 fffe 	bl	800771c <USB_WritePMA>
            ep->xfer_buff += len;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	197b      	adds	r3, r7, r5
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	18d2      	adds	r2, r2, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d909      	bls.n	800674e <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6a1a      	ldr	r2, [r3, #32]
 800673e:	2386      	movs	r3, #134	; 0x86
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	621a      	str	r2, [r3, #32]
 800674c:	e008      	b.n	8006760 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	2286      	movs	r2, #134	; 0x86
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	18ba      	adds	r2, r7, r2
 8006758:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d16a      	bne.n	8006842 <USB_EPStartXfer+0x646>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2250      	movs	r2, #80	; 0x50
 8006774:	5a9b      	ldrh	r3, [r3, r2]
 8006776:	b29b      	uxth	r3, r3
 8006778:	001a      	movs	r2, r3
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677c:	189b      	adds	r3, r3, r2
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	00da      	lsls	r2, r3, #3
 8006786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006788:	18d3      	adds	r3, r2, r3
 800678a:	4a6c      	ldr	r2, [pc, #432]	; (800693c <USB_EPStartXfer+0x740>)
 800678c:	4694      	mov	ip, r2
 800678e:	4463      	add	r3, ip
 8006790:	63bb      	str	r3, [r7, #56]	; 0x38
 8006792:	2386      	movs	r3, #134	; 0x86
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d110      	bne.n	80067c0 <USB_EPStartXfer+0x5c4>
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	4a63      	ldr	r2, [pc, #396]	; (8006934 <USB_EPStartXfer+0x738>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	4a60      	ldr	r2, [pc, #384]	; (8006938 <USB_EPStartXfer+0x73c>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e05c      	b.n	800687a <USB_EPStartXfer+0x67e>
 80067c0:	2386      	movs	r3, #134	; 0x86
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	18fb      	adds	r3, r7, r3
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b3e      	cmp	r3, #62	; 0x3e
 80067ca:	d81b      	bhi.n	8006804 <USB_EPStartXfer+0x608>
 80067cc:	2286      	movs	r2, #134	; 0x86
 80067ce:	0052      	lsls	r2, r2, #1
 80067d0:	18bb      	adds	r3, r7, r2
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	21f8      	movs	r1, #248	; 0xf8
 80067d8:	1879      	adds	r1, r7, r1
 80067da:	600b      	str	r3, [r1, #0]
 80067dc:	18bb      	adds	r3, r7, r2
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2201      	movs	r2, #1
 80067e2:	4013      	ands	r3, r2
 80067e4:	d005      	beq.n	80067f2 <USB_EPStartXfer+0x5f6>
 80067e6:	22f8      	movs	r2, #248	; 0xf8
 80067e8:	18bb      	adds	r3, r7, r2
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	18ba      	adds	r2, r7, r2
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	23f8      	movs	r3, #248	; 0xf8
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	029b      	lsls	r3, r3, #10
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	e03a      	b.n	800687a <USB_EPStartXfer+0x67e>
 8006804:	2286      	movs	r2, #134	; 0x86
 8006806:	0052      	lsls	r2, r2, #1
 8006808:	18bb      	adds	r3, r7, r2
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	21f8      	movs	r1, #248	; 0xf8
 8006810:	1879      	adds	r1, r7, r1
 8006812:	600b      	str	r3, [r1, #0]
 8006814:	18bb      	adds	r3, r7, r2
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	221f      	movs	r2, #31
 800681a:	4013      	ands	r3, r2
 800681c:	d105      	bne.n	800682a <USB_EPStartXfer+0x62e>
 800681e:	22f8      	movs	r2, #248	; 0xf8
 8006820:	18bb      	adds	r3, r7, r2
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3b01      	subs	r3, #1
 8006826:	18ba      	adds	r2, r7, r2
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	23f8      	movs	r3, #248	; 0xf8
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	029b      	lsls	r3, r3, #10
 8006834:	b29b      	uxth	r3, r3
 8006836:	4a40      	ldr	r2, [pc, #256]	; (8006938 <USB_EPStartXfer+0x73c>)
 8006838:	4313      	orrs	r3, r2
 800683a:	b29a      	uxth	r2, r3
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e01b      	b.n	800687a <USB_EPStartXfer+0x67e>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d117      	bne.n	800687a <USB_EPStartXfer+0x67e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2250      	movs	r2, #80	; 0x50
 800684e:	5a9b      	ldrh	r3, [r3, r2]
 8006850:	b29b      	uxth	r3, r3
 8006852:	001a      	movs	r2, r3
 8006854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006856:	189b      	adds	r3, r3, r2
 8006858:	647b      	str	r3, [r7, #68]	; 0x44
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	00da      	lsls	r2, r3, #3
 8006860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006862:	18d3      	adds	r3, r2, r3
 8006864:	4a35      	ldr	r2, [pc, #212]	; (800693c <USB_EPStartXfer+0x740>)
 8006866:	4694      	mov	ip, r2
 8006868:	4463      	add	r3, ip
 800686a:	643b      	str	r3, [r7, #64]	; 0x40
 800686c:	2386      	movs	r3, #134	; 0x86
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	b29a      	uxth	r2, r3
 8006876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006878:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800687a:	2085      	movs	r0, #133	; 0x85
 800687c:	0040      	lsls	r0, r0, #1
 800687e:	183b      	adds	r3, r7, r0
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	8952      	ldrh	r2, [r2, #10]
 8006884:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6959      	ldr	r1, [r3, #20]
 800688a:	2386      	movs	r3, #134	; 0x86
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	b29c      	uxth	r4, r3
 8006894:	183b      	adds	r3, r7, r0
 8006896:	881a      	ldrh	r2, [r3, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	0023      	movs	r3, r4
 800689c:	f000 ff3e 	bl	800771c <USB_WritePMA>
 80068a0:	e1d8      	b.n	8006c54 <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	2086      	movs	r0, #134	; 0x86
 80068a8:	0040      	lsls	r0, r0, #1
 80068aa:	183a      	adds	r2, r7, r0
 80068ac:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	18d3      	adds	r3, r2, r3
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	2466      	movs	r4, #102	; 0x66
 80068be:	193b      	adds	r3, r7, r4
 80068c0:	491f      	ldr	r1, [pc, #124]	; (8006940 <USB_EPStartXfer+0x744>)
 80068c2:	400a      	ands	r2, r1
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	18d3      	adds	r3, r2, r3
 80068d0:	193a      	adds	r2, r7, r4
 80068d2:	8812      	ldrh	r2, [r2, #0]
 80068d4:	491b      	ldr	r1, [pc, #108]	; (8006944 <USB_EPStartXfer+0x748>)
 80068d6:	430a      	orrs	r2, r1
 80068d8:	b292      	uxth	r2, r2
 80068da:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	663b      	str	r3, [r7, #96]	; 0x60
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2250      	movs	r2, #80	; 0x50
 80068e4:	5a9b      	ldrh	r3, [r3, r2]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	001a      	movs	r2, r3
 80068ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ec:	189b      	adds	r3, r3, r2
 80068ee:	663b      	str	r3, [r7, #96]	; 0x60
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	00da      	lsls	r2, r3, #3
 80068f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f8:	18d3      	adds	r3, r2, r3
 80068fa:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <USB_EPStartXfer+0x734>)
 80068fc:	4694      	mov	ip, r2
 80068fe:	4463      	add	r3, ip
 8006900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006902:	183b      	adds	r3, r7, r0
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	b29a      	uxth	r2, r3
 8006908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800690c:	2585      	movs	r5, #133	; 0x85
 800690e:	006d      	lsls	r5, r5, #1
 8006910:	197b      	adds	r3, r7, r5
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	8912      	ldrh	r2, [r2, #8]
 8006916:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	6959      	ldr	r1, [r3, #20]
 800691c:	183b      	adds	r3, r7, r0
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	b29c      	uxth	r4, r3
 8006922:	197b      	adds	r3, r7, r5
 8006924:	881a      	ldrh	r2, [r3, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	0023      	movs	r3, r4
 800692a:	f000 fef7 	bl	800771c <USB_WritePMA>
 800692e:	e191      	b.n	8006c54 <USB_EPStartXfer+0xa58>
 8006930:	00000402 	.word	0x00000402
 8006934:	ffff83ff 	.word	0xffff83ff
 8006938:	ffff8000 	.word	0xffff8000
 800693c:	00000406 	.word	0x00000406
 8006940:	ffff8e8f 	.word	0xffff8e8f
 8006944:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	18d3      	adds	r3, r2, r3
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	001a      	movs	r2, r3
 8006958:	2340      	movs	r3, #64	; 0x40
 800695a:	4013      	ands	r3, r2
 800695c:	d100      	bne.n	8006960 <USB_EPStartXfer+0x764>
 800695e:	e093      	b.n	8006a88 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	67bb      	str	r3, [r7, #120]	; 0x78
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d16a      	bne.n	8006a42 <USB_EPStartXfer+0x846>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	673b      	str	r3, [r7, #112]	; 0x70
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2250      	movs	r2, #80	; 0x50
 8006974:	5a9b      	ldrh	r3, [r3, r2]
 8006976:	b29b      	uxth	r3, r3
 8006978:	001a      	movs	r2, r3
 800697a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800697c:	189b      	adds	r3, r3, r2
 800697e:	673b      	str	r3, [r7, #112]	; 0x70
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	00da      	lsls	r2, r3, #3
 8006986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006988:	18d3      	adds	r3, r2, r3
 800698a:	4ae0      	ldr	r2, [pc, #896]	; (8006d0c <USB_EPStartXfer+0xb10>)
 800698c:	4694      	mov	ip, r2
 800698e:	4463      	add	r3, ip
 8006990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006992:	2386      	movs	r3, #134	; 0x86
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d110      	bne.n	80069c0 <USB_EPStartXfer+0x7c4>
 800699e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4ada      	ldr	r2, [pc, #872]	; (8006d10 <USB_EPStartXfer+0xb14>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4ad7      	ldr	r2, [pc, #860]	; (8006d14 <USB_EPStartXfer+0xb18>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	e05c      	b.n	8006a7a <USB_EPStartXfer+0x87e>
 80069c0:	2386      	movs	r3, #134	; 0x86
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b3e      	cmp	r3, #62	; 0x3e
 80069ca:	d81b      	bhi.n	8006a04 <USB_EPStartXfer+0x808>
 80069cc:	2286      	movs	r2, #134	; 0x86
 80069ce:	0052      	lsls	r2, r2, #1
 80069d0:	18bb      	adds	r3, r7, r2
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	21f4      	movs	r1, #244	; 0xf4
 80069d8:	1879      	adds	r1, r7, r1
 80069da:	600b      	str	r3, [r1, #0]
 80069dc:	18bb      	adds	r3, r7, r2
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	4013      	ands	r3, r2
 80069e4:	d005      	beq.n	80069f2 <USB_EPStartXfer+0x7f6>
 80069e6:	22f4      	movs	r2, #244	; 0xf4
 80069e8:	18bb      	adds	r3, r7, r2
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	18ba      	adds	r2, r7, r2
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	23f4      	movs	r3, #244	; 0xf4
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e03a      	b.n	8006a7a <USB_EPStartXfer+0x87e>
 8006a04:	2286      	movs	r2, #134	; 0x86
 8006a06:	0052      	lsls	r2, r2, #1
 8006a08:	18bb      	adds	r3, r7, r2
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	21f4      	movs	r1, #244	; 0xf4
 8006a10:	1879      	adds	r1, r7, r1
 8006a12:	600b      	str	r3, [r1, #0]
 8006a14:	18bb      	adds	r3, r7, r2
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	221f      	movs	r2, #31
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d105      	bne.n	8006a2a <USB_EPStartXfer+0x82e>
 8006a1e:	22f4      	movs	r2, #244	; 0xf4
 8006a20:	18bb      	adds	r3, r7, r2
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	18ba      	adds	r2, r7, r2
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	23f4      	movs	r3, #244	; 0xf4
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	029b      	lsls	r3, r3, #10
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4ab7      	ldr	r2, [pc, #732]	; (8006d14 <USB_EPStartXfer+0xb18>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	e01b      	b.n	8006a7a <USB_EPStartXfer+0x87e>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d117      	bne.n	8006a7a <USB_EPStartXfer+0x87e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2250      	movs	r2, #80	; 0x50
 8006a4e:	5a9b      	ldrh	r3, [r3, r2]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	001a      	movs	r2, r3
 8006a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	00da      	lsls	r2, r3, #3
 8006a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a62:	18d3      	adds	r3, r2, r3
 8006a64:	4aa9      	ldr	r2, [pc, #676]	; (8006d0c <USB_EPStartXfer+0xb10>)
 8006a66:	4694      	mov	ip, r2
 8006a68:	4463      	add	r3, ip
 8006a6a:	677b      	str	r3, [r7, #116]	; 0x74
 8006a6c:	2386      	movs	r3, #134	; 0x86
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a7a:	2385      	movs	r3, #133	; 0x85
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	8952      	ldrh	r2, [r2, #10]
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	e09f      	b.n	8006bc8 <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d16f      	bne.n	8006b70 <USB_EPStartXfer+0x974>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	187a      	adds	r2, r7, r1
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2250      	movs	r2, #80	; 0x50
 8006a9c:	5a9b      	ldrh	r3, [r3, r2]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	001a      	movs	r2, r3
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	189b      	adds	r3, r3, r2
 8006aa8:	187a      	adds	r2, r7, r1
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	00da      	lsls	r2, r3, #3
 8006ab2:	187b      	adds	r3, r7, r1
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	18d3      	adds	r3, r2, r3
 8006ab8:	4a97      	ldr	r2, [pc, #604]	; (8006d18 <USB_EPStartXfer+0xb1c>)
 8006aba:	4694      	mov	ip, r2
 8006abc:	4463      	add	r3, ip
 8006abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ac0:	2386      	movs	r3, #134	; 0x86
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d110      	bne.n	8006aee <USB_EPStartXfer+0x8f2>
 8006acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	4a8f      	ldr	r2, [pc, #572]	; (8006d10 <USB_EPStartXfer+0xb14>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ada:	801a      	strh	r2, [r3, #0]
 8006adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4a8c      	ldr	r2, [pc, #560]	; (8006d14 <USB_EPStartXfer+0xb18>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	e066      	b.n	8006bbc <USB_EPStartXfer+0x9c0>
 8006aee:	2386      	movs	r3, #134	; 0x86
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	18fb      	adds	r3, r7, r3
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b3e      	cmp	r3, #62	; 0x3e
 8006af8:	d81b      	bhi.n	8006b32 <USB_EPStartXfer+0x936>
 8006afa:	2286      	movs	r2, #134	; 0x86
 8006afc:	0052      	lsls	r2, r2, #1
 8006afe:	18bb      	adds	r3, r7, r2
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	21f0      	movs	r1, #240	; 0xf0
 8006b06:	1879      	adds	r1, r7, r1
 8006b08:	600b      	str	r3, [r1, #0]
 8006b0a:	18bb      	adds	r3, r7, r2
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4013      	ands	r3, r2
 8006b12:	d005      	beq.n	8006b20 <USB_EPStartXfer+0x924>
 8006b14:	22f0      	movs	r2, #240	; 0xf0
 8006b16:	18bb      	adds	r3, r7, r2
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	18ba      	adds	r2, r7, r2
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	23f0      	movs	r3, #240	; 0xf0
 8006b22:	18fb      	adds	r3, r7, r3
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	029b      	lsls	r3, r3, #10
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e044      	b.n	8006bbc <USB_EPStartXfer+0x9c0>
 8006b32:	2286      	movs	r2, #134	; 0x86
 8006b34:	0052      	lsls	r2, r2, #1
 8006b36:	18bb      	adds	r3, r7, r2
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	21f0      	movs	r1, #240	; 0xf0
 8006b3e:	1879      	adds	r1, r7, r1
 8006b40:	600b      	str	r3, [r1, #0]
 8006b42:	18bb      	adds	r3, r7, r2
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	221f      	movs	r2, #31
 8006b48:	4013      	ands	r3, r2
 8006b4a:	d105      	bne.n	8006b58 <USB_EPStartXfer+0x95c>
 8006b4c:	22f0      	movs	r2, #240	; 0xf0
 8006b4e:	18bb      	adds	r3, r7, r2
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	18ba      	adds	r2, r7, r2
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	23f0      	movs	r3, #240	; 0xf0
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	029b      	lsls	r3, r3, #10
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4a6b      	ldr	r2, [pc, #428]	; (8006d14 <USB_EPStartXfer+0xb18>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b6c:	801a      	strh	r2, [r3, #0]
 8006b6e:	e025      	b.n	8006bbc <USB_EPStartXfer+0x9c0>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d121      	bne.n	8006bbc <USB_EPStartXfer+0x9c0>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2188      	movs	r1, #136	; 0x88
 8006b7c:	187a      	adds	r2, r7, r1
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2250      	movs	r2, #80	; 0x50
 8006b84:	5a9b      	ldrh	r3, [r3, r2]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	001a      	movs	r2, r3
 8006b8a:	187b      	adds	r3, r7, r1
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	189b      	adds	r3, r3, r2
 8006b90:	187a      	adds	r2, r7, r1
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	00da      	lsls	r2, r3, #3
 8006b9a:	187b      	adds	r3, r7, r1
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	18d3      	adds	r3, r2, r3
 8006ba0:	4a5d      	ldr	r2, [pc, #372]	; (8006d18 <USB_EPStartXfer+0xb1c>)
 8006ba2:	4694      	mov	ip, r2
 8006ba4:	4463      	add	r3, ip
 8006ba6:	2184      	movs	r1, #132	; 0x84
 8006ba8:	187a      	adds	r2, r7, r1
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	2386      	movs	r3, #134	; 0x86
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bbc:	2385      	movs	r3, #133	; 0x85
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	8912      	ldrh	r2, [r2, #8]
 8006bc6:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	6959      	ldr	r1, [r3, #20]
 8006bcc:	2386      	movs	r3, #134	; 0x86
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	b29c      	uxth	r4, r3
 8006bd6:	2385      	movs	r3, #133	; 0x85
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	881a      	ldrh	r2, [r3, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	0023      	movs	r3, r4
 8006be2:	f000 fd9b 	bl	800771c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d117      	bne.n	8006c1e <USB_EPStartXfer+0xa22>
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	18d3      	adds	r3, r2, r3
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	2068      	movs	r0, #104	; 0x68
 8006bfe:	183b      	adds	r3, r7, r0
 8006c00:	4946      	ldr	r1, [pc, #280]	; (8006d1c <USB_EPStartXfer+0xb20>)
 8006c02:	400a      	ands	r2, r1
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	18d3      	adds	r3, r2, r3
 8006c10:	183a      	adds	r2, r7, r0
 8006c12:	8812      	ldrh	r2, [r2, #0]
 8006c14:	4942      	ldr	r1, [pc, #264]	; (8006d20 <USB_EPStartXfer+0xb24>)
 8006c16:	430a      	orrs	r2, r1
 8006c18:	b292      	uxth	r2, r2
 8006c1a:	801a      	strh	r2, [r3, #0]
 8006c1c:	e01a      	b.n	8006c54 <USB_EPStartXfer+0xa58>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d116      	bne.n	8006c54 <USB_EPStartXfer+0xa58>
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	18d3      	adds	r3, r2, r3
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	206a      	movs	r0, #106	; 0x6a
 8006c36:	183b      	adds	r3, r7, r0
 8006c38:	4938      	ldr	r1, [pc, #224]	; (8006d1c <USB_EPStartXfer+0xb20>)
 8006c3a:	400a      	ands	r2, r1
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	18d3      	adds	r3, r2, r3
 8006c48:	183a      	adds	r2, r7, r0
 8006c4a:	8812      	ldrh	r2, [r2, #0]
 8006c4c:	4935      	ldr	r1, [pc, #212]	; (8006d24 <USB_EPStartXfer+0xb28>)
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	b292      	uxth	r2, r2
 8006c52:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	18d3      	adds	r3, r2, r3
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <USB_EPStartXfer+0xb2c>)
 8006c64:	2188      	movs	r1, #136	; 0x88
 8006c66:	0049      	lsls	r1, r1, #1
 8006c68:	468c      	mov	ip, r1
 8006c6a:	44bc      	add	ip, r7
 8006c6c:	4463      	add	r3, ip
 8006c6e:	492f      	ldr	r1, [pc, #188]	; (8006d2c <USB_EPStartXfer+0xb30>)
 8006c70:	400a      	ands	r2, r1
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	4b2c      	ldr	r3, [pc, #176]	; (8006d28 <USB_EPStartXfer+0xb2c>)
 8006c76:	2288      	movs	r2, #136	; 0x88
 8006c78:	0052      	lsls	r2, r2, #1
 8006c7a:	4694      	mov	ip, r2
 8006c7c:	44bc      	add	ip, r7
 8006c7e:	4463      	add	r3, ip
 8006c80:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <USB_EPStartXfer+0xb2c>)
 8006c82:	2188      	movs	r1, #136	; 0x88
 8006c84:	0049      	lsls	r1, r1, #1
 8006c86:	468c      	mov	ip, r1
 8006c88:	44bc      	add	ip, r7
 8006c8a:	4462      	add	r2, ip
 8006c8c:	8812      	ldrh	r2, [r2, #0]
 8006c8e:	2110      	movs	r1, #16
 8006c90:	404a      	eors	r2, r1
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <USB_EPStartXfer+0xb2c>)
 8006c96:	2288      	movs	r2, #136	; 0x88
 8006c98:	0052      	lsls	r2, r2, #1
 8006c9a:	4694      	mov	ip, r2
 8006c9c:	44bc      	add	ip, r7
 8006c9e:	4463      	add	r3, ip
 8006ca0:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <USB_EPStartXfer+0xb2c>)
 8006ca2:	2188      	movs	r1, #136	; 0x88
 8006ca4:	0049      	lsls	r1, r1, #1
 8006ca6:	468c      	mov	ip, r1
 8006ca8:	44bc      	add	ip, r7
 8006caa:	4462      	add	r2, ip
 8006cac:	8812      	ldrh	r2, [r2, #0]
 8006cae:	2120      	movs	r1, #32
 8006cb0:	404a      	eors	r2, r1
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	18d3      	adds	r3, r2, r3
 8006cbe:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <USB_EPStartXfer+0xb2c>)
 8006cc0:	2188      	movs	r1, #136	; 0x88
 8006cc2:	0049      	lsls	r1, r1, #1
 8006cc4:	468c      	mov	ip, r1
 8006cc6:	44bc      	add	ip, r7
 8006cc8:	4462      	add	r2, ip
 8006cca:	8812      	ldrh	r2, [r2, #0]
 8006ccc:	4918      	ldr	r1, [pc, #96]	; (8006d30 <USB_EPStartXfer+0xb34>)
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	b292      	uxth	r2, r2
 8006cd2:	801a      	strh	r2, [r3, #0]
 8006cd4:	f000 fbdd 	bl	8007492 <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	7b1b      	ldrb	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d000      	beq.n	8006ce2 <USB_EPStartXfer+0xae6>
 8006ce0:	e0ac      	b.n	8006e3c <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d922      	bls.n	8006d34 <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2186      	movs	r1, #134	; 0x86
 8006cf4:	0049      	lsls	r1, r1, #1
 8006cf6:	187a      	adds	r2, r7, r1
 8006cf8:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	187b      	adds	r3, r7, r1
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	619a      	str	r2, [r3, #24]
 8006d08:	e01d      	b.n	8006d46 <USB_EPStartXfer+0xb4a>
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	00000406 	.word	0x00000406
 8006d10:	ffff83ff 	.word	0xffff83ff
 8006d14:	ffff8000 	.word	0xffff8000
 8006d18:	00000402 	.word	0x00000402
 8006d1c:	ffff8f8f 	.word	0xffff8f8f
 8006d20:	ffff80c0 	.word	0xffff80c0
 8006d24:	ffffc080 	.word	0xffffc080
 8006d28:	fffffefe 	.word	0xfffffefe
 8006d2c:	ffff8fbf 	.word	0xffff8fbf
 8006d30:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2286      	movs	r2, #134	; 0x86
 8006d3a:	0052      	lsls	r2, r2, #1
 8006d3c:	18ba      	adds	r2, r7, r2
 8006d3e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2200      	movs	r2, #0
 8006d44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2194      	movs	r1, #148	; 0x94
 8006d4a:	187a      	adds	r2, r7, r1
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2250      	movs	r2, #80	; 0x50
 8006d52:	5a9b      	ldrh	r3, [r3, r2]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	001a      	movs	r2, r3
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	189b      	adds	r3, r3, r2
 8006d5e:	187a      	adds	r2, r7, r1
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	00da      	lsls	r2, r3, #3
 8006d68:	187b      	adds	r3, r7, r1
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	18d3      	adds	r3, r2, r3
 8006d6e:	4ac2      	ldr	r2, [pc, #776]	; (8007078 <USB_EPStartXfer+0xe7c>)
 8006d70:	4694      	mov	ip, r2
 8006d72:	4463      	add	r3, ip
 8006d74:	2290      	movs	r2, #144	; 0x90
 8006d76:	18ba      	adds	r2, r7, r2
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	2386      	movs	r3, #134	; 0x86
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d115      	bne.n	8006db2 <USB_EPStartXfer+0xbb6>
 8006d86:	2190      	movs	r1, #144	; 0x90
 8006d88:	187b      	adds	r3, r7, r1
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4aba      	ldr	r2, [pc, #744]	; (800707c <USB_EPStartXfer+0xe80>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	187b      	adds	r3, r7, r1
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	187b      	adds	r3, r7, r1
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	4ab6      	ldr	r2, [pc, #728]	; (8007080 <USB_EPStartXfer+0xe84>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	187b      	adds	r3, r7, r1
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e34a      	b.n	8007448 <USB_EPStartXfer+0x124c>
 8006db2:	2386      	movs	r3, #134	; 0x86
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b3e      	cmp	r3, #62	; 0x3e
 8006dbc:	d81d      	bhi.n	8006dfa <USB_EPStartXfer+0xbfe>
 8006dbe:	2286      	movs	r2, #134	; 0x86
 8006dc0:	0052      	lsls	r2, r2, #1
 8006dc2:	18bb      	adds	r3, r7, r2
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	21ec      	movs	r1, #236	; 0xec
 8006dca:	1879      	adds	r1, r7, r1
 8006dcc:	600b      	str	r3, [r1, #0]
 8006dce:	18bb      	adds	r3, r7, r2
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d005      	beq.n	8006de4 <USB_EPStartXfer+0xbe8>
 8006dd8:	22ec      	movs	r2, #236	; 0xec
 8006dda:	18bb      	adds	r3, r7, r2
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3301      	adds	r3, #1
 8006de0:	18ba      	adds	r2, r7, r2
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	23ec      	movs	r3, #236	; 0xec
 8006de6:	18fb      	adds	r3, r7, r3
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	2390      	movs	r3, #144	; 0x90
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	e326      	b.n	8007448 <USB_EPStartXfer+0x124c>
 8006dfa:	2286      	movs	r2, #134	; 0x86
 8006dfc:	0052      	lsls	r2, r2, #1
 8006dfe:	18bb      	adds	r3, r7, r2
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	21ec      	movs	r1, #236	; 0xec
 8006e06:	1879      	adds	r1, r7, r1
 8006e08:	600b      	str	r3, [r1, #0]
 8006e0a:	18bb      	adds	r3, r7, r2
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	221f      	movs	r2, #31
 8006e10:	4013      	ands	r3, r2
 8006e12:	d105      	bne.n	8006e20 <USB_EPStartXfer+0xc24>
 8006e14:	22ec      	movs	r2, #236	; 0xec
 8006e16:	18bb      	adds	r3, r7, r2
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	18ba      	adds	r2, r7, r2
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	23ec      	movs	r3, #236	; 0xec
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	029b      	lsls	r3, r3, #10
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	4a94      	ldr	r2, [pc, #592]	; (8007080 <USB_EPStartXfer+0xe84>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	2390      	movs	r3, #144	; 0x90
 8006e34:	18fb      	adds	r3, r7, r3
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	e305      	b.n	8007448 <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d000      	beq.n	8006e46 <USB_EPStartXfer+0xc4a>
 8006e44:	e182      	b.n	800714c <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d000      	beq.n	8006e50 <USB_EPStartXfer+0xc54>
 8006e4e:	e072      	b.n	8006f36 <USB_EPStartXfer+0xd3a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	21b0      	movs	r1, #176	; 0xb0
 8006e54:	187a      	adds	r2, r7, r1
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2250      	movs	r2, #80	; 0x50
 8006e5c:	5a9b      	ldrh	r3, [r3, r2]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	001a      	movs	r2, r3
 8006e62:	187b      	adds	r3, r7, r1
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	189b      	adds	r3, r3, r2
 8006e68:	187a      	adds	r2, r7, r1
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	00da      	lsls	r2, r3, #3
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	18d3      	adds	r3, r2, r3
 8006e78:	4a82      	ldr	r2, [pc, #520]	; (8007084 <USB_EPStartXfer+0xe88>)
 8006e7a:	4694      	mov	ip, r2
 8006e7c:	4463      	add	r3, ip
 8006e7e:	22ac      	movs	r2, #172	; 0xac
 8006e80:	18ba      	adds	r2, r7, r2
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d115      	bne.n	8006eb8 <USB_EPStartXfer+0xcbc>
 8006e8c:	21ac      	movs	r1, #172	; 0xac
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	4a79      	ldr	r2, [pc, #484]	; (800707c <USB_EPStartXfer+0xe80>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	187b      	adds	r3, r7, r1
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	187b      	adds	r3, r7, r1
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4a75      	ldr	r2, [pc, #468]	; (8007080 <USB_EPStartXfer+0xe84>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	187b      	adds	r3, r7, r1
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e062      	b.n	8006f7e <USB_EPStartXfer+0xd82>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ebe:	d81b      	bhi.n	8006ef8 <USB_EPStartXfer+0xcfc>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	22e8      	movs	r2, #232	; 0xe8
 8006ec8:	18ba      	adds	r2, r7, r2
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d005      	beq.n	8006ee2 <USB_EPStartXfer+0xce6>
 8006ed6:	22e8      	movs	r2, #232	; 0xe8
 8006ed8:	18bb      	adds	r3, r7, r2
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3301      	adds	r3, #1
 8006ede:	18ba      	adds	r2, r7, r2
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	23e8      	movs	r3, #232	; 0xe8
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	23ac      	movs	r3, #172	; 0xac
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e042      	b.n	8006f7e <USB_EPStartXfer+0xd82>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	22e8      	movs	r2, #232	; 0xe8
 8006f00:	18ba      	adds	r2, r7, r2
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	221f      	movs	r2, #31
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d105      	bne.n	8006f1a <USB_EPStartXfer+0xd1e>
 8006f0e:	22e8      	movs	r2, #232	; 0xe8
 8006f10:	18bb      	adds	r3, r7, r2
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	18ba      	adds	r2, r7, r2
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	23e8      	movs	r3, #232	; 0xe8
 8006f1c:	18fb      	adds	r3, r7, r3
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	029b      	lsls	r3, r3, #10
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4a56      	ldr	r2, [pc, #344]	; (8007080 <USB_EPStartXfer+0xe84>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	23ac      	movs	r3, #172	; 0xac
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e023      	b.n	8006f7e <USB_EPStartXfer+0xd82>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d11f      	bne.n	8006f7e <USB_EPStartXfer+0xd82>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	21b8      	movs	r1, #184	; 0xb8
 8006f42:	187a      	adds	r2, r7, r1
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2250      	movs	r2, #80	; 0x50
 8006f4a:	5a9b      	ldrh	r3, [r3, r2]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	001a      	movs	r2, r3
 8006f50:	187b      	adds	r3, r7, r1
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	189b      	adds	r3, r3, r2
 8006f56:	187a      	adds	r2, r7, r1
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	00da      	lsls	r2, r3, #3
 8006f60:	187b      	adds	r3, r7, r1
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	18d3      	adds	r3, r2, r3
 8006f66:	4a47      	ldr	r2, [pc, #284]	; (8007084 <USB_EPStartXfer+0xe88>)
 8006f68:	4694      	mov	ip, r2
 8006f6a:	4463      	add	r3, ip
 8006f6c:	21b4      	movs	r1, #180	; 0xb4
 8006f6e:	187a      	adds	r2, r7, r1
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	187b      	adds	r3, r7, r1
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	22a8      	movs	r2, #168	; 0xa8
 8006f82:	18ba      	adds	r2, r7, r2
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	785b      	ldrb	r3, [r3, #1]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d000      	beq.n	8006f90 <USB_EPStartXfer+0xd94>
 8006f8e:	e07b      	b.n	8007088 <USB_EPStartXfer+0xe8c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	21a0      	movs	r1, #160	; 0xa0
 8006f94:	187a      	adds	r2, r7, r1
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2250      	movs	r2, #80	; 0x50
 8006f9c:	5a9b      	ldrh	r3, [r3, r2]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	001a      	movs	r2, r3
 8006fa2:	187b      	adds	r3, r7, r1
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	187a      	adds	r2, r7, r1
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	00da      	lsls	r2, r3, #3
 8006fb2:	187b      	adds	r3, r7, r1
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	18d3      	adds	r3, r2, r3
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <USB_EPStartXfer+0xe7c>)
 8006fba:	4694      	mov	ip, r2
 8006fbc:	4463      	add	r3, ip
 8006fbe:	229c      	movs	r2, #156	; 0x9c
 8006fc0:	18ba      	adds	r2, r7, r2
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d115      	bne.n	8006ff8 <USB_EPStartXfer+0xdfc>
 8006fcc:	219c      	movs	r1, #156	; 0x9c
 8006fce:	187b      	adds	r3, r7, r1
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	4a29      	ldr	r2, [pc, #164]	; (800707c <USB_EPStartXfer+0xe80>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	187b      	adds	r3, r7, r1
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	187b      	adds	r3, r7, r1
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4a25      	ldr	r2, [pc, #148]	; (8007080 <USB_EPStartXfer+0xe84>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e068      	b.n	80070ca <USB_EPStartXfer+0xece>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffe:	d81b      	bhi.n	8007038 <USB_EPStartXfer+0xe3c>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	22e4      	movs	r2, #228	; 0xe4
 8007008:	18ba      	adds	r2, r7, r2
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2201      	movs	r2, #1
 8007012:	4013      	ands	r3, r2
 8007014:	d005      	beq.n	8007022 <USB_EPStartXfer+0xe26>
 8007016:	22e4      	movs	r2, #228	; 0xe4
 8007018:	18bb      	adds	r3, r7, r2
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3301      	adds	r3, #1
 800701e:	18ba      	adds	r2, r7, r2
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	23e4      	movs	r3, #228	; 0xe4
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	b29b      	uxth	r3, r3
 800702a:	029b      	lsls	r3, r3, #10
 800702c:	b29a      	uxth	r2, r3
 800702e:	239c      	movs	r3, #156	; 0x9c
 8007030:	18fb      	adds	r3, r7, r3
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e048      	b.n	80070ca <USB_EPStartXfer+0xece>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	22e4      	movs	r2, #228	; 0xe4
 8007040:	18ba      	adds	r2, r7, r2
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	221f      	movs	r2, #31
 800704a:	4013      	ands	r3, r2
 800704c:	d105      	bne.n	800705a <USB_EPStartXfer+0xe5e>
 800704e:	22e4      	movs	r2, #228	; 0xe4
 8007050:	18bb      	adds	r3, r7, r2
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3b01      	subs	r3, #1
 8007056:	18ba      	adds	r2, r7, r2
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	23e4      	movs	r3, #228	; 0xe4
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	b29b      	uxth	r3, r3
 8007062:	029b      	lsls	r3, r3, #10
 8007064:	b29b      	uxth	r3, r3
 8007066:	4a06      	ldr	r2, [pc, #24]	; (8007080 <USB_EPStartXfer+0xe84>)
 8007068:	4313      	orrs	r3, r2
 800706a:	b29a      	uxth	r2, r3
 800706c:	239c      	movs	r3, #156	; 0x9c
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e029      	b.n	80070ca <USB_EPStartXfer+0xece>
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	00000406 	.word	0x00000406
 800707c:	ffff83ff 	.word	0xffff83ff
 8007080:	ffff8000 	.word	0xffff8000
 8007084:	00000402 	.word	0x00000402
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d11c      	bne.n	80070ca <USB_EPStartXfer+0xece>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2250      	movs	r2, #80	; 0x50
 8007094:	5a9b      	ldrh	r3, [r3, r2]
 8007096:	b29b      	uxth	r3, r3
 8007098:	001a      	movs	r2, r3
 800709a:	21a8      	movs	r1, #168	; 0xa8
 800709c:	187b      	adds	r3, r7, r1
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	187a      	adds	r2, r7, r1
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	00da      	lsls	r2, r3, #3
 80070ac:	187b      	adds	r3, r7, r1
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	18d3      	adds	r3, r2, r3
 80070b2:	4acc      	ldr	r2, [pc, #816]	; (80073e4 <USB_EPStartXfer+0x11e8>)
 80070b4:	4694      	mov	ip, r2
 80070b6:	4463      	add	r3, ip
 80070b8:	21a4      	movs	r1, #164	; 0xa4
 80070ba:	187a      	adds	r2, r7, r1
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	187b      	adds	r3, r7, r1
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d100      	bne.n	80070d4 <USB_EPStartXfer+0xed8>
 80070d2:	e1b9      	b.n	8007448 <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	18d2      	adds	r2, r2, r3
 80070de:	219a      	movs	r1, #154	; 0x9a
 80070e0:	187b      	adds	r3, r7, r1
 80070e2:	8812      	ldrh	r2, [r2, #0]
 80070e4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070e6:	187b      	adds	r3, r7, r1
 80070e8:	881a      	ldrh	r2, [r3, #0]
 80070ea:	2380      	movs	r3, #128	; 0x80
 80070ec:	01db      	lsls	r3, r3, #7
 80070ee:	4013      	ands	r3, r2
 80070f0:	d005      	beq.n	80070fe <USB_EPStartXfer+0xf02>
 80070f2:	239a      	movs	r3, #154	; 0x9a
 80070f4:	18fb      	adds	r3, r7, r3
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	2240      	movs	r2, #64	; 0x40
 80070fa:	4013      	ands	r3, r2
 80070fc:	d10e      	bne.n	800711c <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070fe:	239a      	movs	r3, #154	; 0x9a
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	881a      	ldrh	r2, [r3, #0]
 8007104:	2380      	movs	r3, #128	; 0x80
 8007106:	01db      	lsls	r3, r3, #7
 8007108:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800710a:	d000      	beq.n	800710e <USB_EPStartXfer+0xf12>
 800710c:	e19c      	b.n	8007448 <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800710e:	239a      	movs	r3, #154	; 0x9a
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	2240      	movs	r2, #64	; 0x40
 8007116:	4013      	ands	r3, r2
 8007118:	d000      	beq.n	800711c <USB_EPStartXfer+0xf20>
 800711a:	e195      	b.n	8007448 <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	18d3      	adds	r3, r2, r3
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29a      	uxth	r2, r3
 800712a:	2098      	movs	r0, #152	; 0x98
 800712c:	183b      	adds	r3, r7, r0
 800712e:	49ae      	ldr	r1, [pc, #696]	; (80073e8 <USB_EPStartXfer+0x11ec>)
 8007130:	400a      	ands	r2, r1
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	18d3      	adds	r3, r2, r3
 800713e:	183a      	adds	r2, r7, r0
 8007140:	8812      	ldrh	r2, [r2, #0]
 8007142:	49aa      	ldr	r1, [pc, #680]	; (80073ec <USB_EPStartXfer+0x11f0>)
 8007144:	430a      	orrs	r2, r1
 8007146:	b292      	uxth	r2, r2
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e17d      	b.n	8007448 <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	78db      	ldrb	r3, [r3, #3]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d000      	beq.n	8007156 <USB_EPStartXfer+0xf5a>
 8007154:	e176      	b.n	8007444 <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d90d      	bls.n	800717e <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2186      	movs	r1, #134	; 0x86
 8007168:	0049      	lsls	r1, r1, #1
 800716a:	187a      	adds	r2, r7, r1
 800716c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	187b      	adds	r3, r7, r1
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	619a      	str	r2, [r3, #24]
 800717c:	e008      	b.n	8007190 <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2286      	movs	r2, #134	; 0x86
 8007184:	0052      	lsls	r2, r2, #1
 8007186:	18ba      	adds	r2, r7, r2
 8007188:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d000      	beq.n	800719a <USB_EPStartXfer+0xf9e>
 8007198:	e07a      	b.n	8007290 <USB_EPStartXfer+0x1094>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	21d0      	movs	r1, #208	; 0xd0
 800719e:	187a      	adds	r2, r7, r1
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2250      	movs	r2, #80	; 0x50
 80071a6:	5a9b      	ldrh	r3, [r3, r2]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	001a      	movs	r2, r3
 80071ac:	187b      	adds	r3, r7, r1
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	187a      	adds	r2, r7, r1
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	00da      	lsls	r2, r3, #3
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	18d3      	adds	r3, r2, r3
 80071c2:	4a8b      	ldr	r2, [pc, #556]	; (80073f0 <USB_EPStartXfer+0x11f4>)
 80071c4:	4694      	mov	ip, r2
 80071c6:	4463      	add	r3, ip
 80071c8:	22cc      	movs	r2, #204	; 0xcc
 80071ca:	18ba      	adds	r2, r7, r2
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	2386      	movs	r3, #134	; 0x86
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	18fb      	adds	r3, r7, r3
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d115      	bne.n	8007206 <USB_EPStartXfer+0x100a>
 80071da:	21cc      	movs	r1, #204	; 0xcc
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4a83      	ldr	r2, [pc, #524]	; (80073f4 <USB_EPStartXfer+0x11f8>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	187b      	adds	r3, r7, r1
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4a7f      	ldr	r2, [pc, #508]	; (80073f8 <USB_EPStartXfer+0x11fc>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e06a      	b.n	80072dc <USB_EPStartXfer+0x10e0>
 8007206:	2386      	movs	r3, #134	; 0x86
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b3e      	cmp	r3, #62	; 0x3e
 8007210:	d81d      	bhi.n	800724e <USB_EPStartXfer+0x1052>
 8007212:	2286      	movs	r2, #134	; 0x86
 8007214:	0052      	lsls	r2, r2, #1
 8007216:	18bb      	adds	r3, r7, r2
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	21e0      	movs	r1, #224	; 0xe0
 800721e:	1879      	adds	r1, r7, r1
 8007220:	600b      	str	r3, [r1, #0]
 8007222:	18bb      	adds	r3, r7, r2
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2201      	movs	r2, #1
 8007228:	4013      	ands	r3, r2
 800722a:	d005      	beq.n	8007238 <USB_EPStartXfer+0x103c>
 800722c:	22e0      	movs	r2, #224	; 0xe0
 800722e:	18bb      	adds	r3, r7, r2
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	18ba      	adds	r2, r7, r2
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	23e0      	movs	r3, #224	; 0xe0
 800723a:	18fb      	adds	r3, r7, r3
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	b29a      	uxth	r2, r3
 8007244:	23cc      	movs	r3, #204	; 0xcc
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	e046      	b.n	80072dc <USB_EPStartXfer+0x10e0>
 800724e:	2286      	movs	r2, #134	; 0x86
 8007250:	0052      	lsls	r2, r2, #1
 8007252:	18bb      	adds	r3, r7, r2
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	21e0      	movs	r1, #224	; 0xe0
 800725a:	1879      	adds	r1, r7, r1
 800725c:	600b      	str	r3, [r1, #0]
 800725e:	18bb      	adds	r3, r7, r2
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	221f      	movs	r2, #31
 8007264:	4013      	ands	r3, r2
 8007266:	d105      	bne.n	8007274 <USB_EPStartXfer+0x1078>
 8007268:	22e0      	movs	r2, #224	; 0xe0
 800726a:	18bb      	adds	r3, r7, r2
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3b01      	subs	r3, #1
 8007270:	18ba      	adds	r2, r7, r2
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	23e0      	movs	r3, #224	; 0xe0
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	029b      	lsls	r3, r3, #10
 800727e:	b29b      	uxth	r3, r3
 8007280:	4a5d      	ldr	r2, [pc, #372]	; (80073f8 <USB_EPStartXfer+0x11fc>)
 8007282:	4313      	orrs	r3, r2
 8007284:	b29a      	uxth	r2, r3
 8007286:	23cc      	movs	r3, #204	; 0xcc
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	801a      	strh	r2, [r3, #0]
 800728e:	e025      	b.n	80072dc <USB_EPStartXfer+0x10e0>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d121      	bne.n	80072dc <USB_EPStartXfer+0x10e0>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	21d8      	movs	r1, #216	; 0xd8
 800729c:	187a      	adds	r2, r7, r1
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2250      	movs	r2, #80	; 0x50
 80072a4:	5a9b      	ldrh	r3, [r3, r2]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	001a      	movs	r2, r3
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	189b      	adds	r3, r3, r2
 80072b0:	187a      	adds	r2, r7, r1
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	00da      	lsls	r2, r3, #3
 80072ba:	187b      	adds	r3, r7, r1
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	18d3      	adds	r3, r2, r3
 80072c0:	4a4b      	ldr	r2, [pc, #300]	; (80073f0 <USB_EPStartXfer+0x11f4>)
 80072c2:	4694      	mov	ip, r2
 80072c4:	4463      	add	r3, ip
 80072c6:	21d4      	movs	r1, #212	; 0xd4
 80072c8:	187a      	adds	r2, r7, r1
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	2386      	movs	r3, #134	; 0x86
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	187b      	adds	r3, r7, r1
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	22c8      	movs	r2, #200	; 0xc8
 80072e0:	18ba      	adds	r2, r7, r2
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d000      	beq.n	80072ee <USB_EPStartXfer+0x10f2>
 80072ec:	e086      	b.n	80073fc <USB_EPStartXfer+0x1200>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	21c0      	movs	r1, #192	; 0xc0
 80072f2:	187a      	adds	r2, r7, r1
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2250      	movs	r2, #80	; 0x50
 80072fa:	5a9b      	ldrh	r3, [r3, r2]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	001a      	movs	r2, r3
 8007300:	187b      	adds	r3, r7, r1
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	189b      	adds	r3, r3, r2
 8007306:	187a      	adds	r2, r7, r1
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	00da      	lsls	r2, r3, #3
 8007310:	187b      	adds	r3, r7, r1
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	18d3      	adds	r3, r2, r3
 8007316:	4a33      	ldr	r2, [pc, #204]	; (80073e4 <USB_EPStartXfer+0x11e8>)
 8007318:	4694      	mov	ip, r2
 800731a:	4463      	add	r3, ip
 800731c:	22bc      	movs	r2, #188	; 0xbc
 800731e:	18ba      	adds	r2, r7, r2
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	2386      	movs	r3, #134	; 0x86
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	18fb      	adds	r3, r7, r3
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d115      	bne.n	800735a <USB_EPStartXfer+0x115e>
 800732e:	21bc      	movs	r1, #188	; 0xbc
 8007330:	187b      	adds	r3, r7, r1
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	4a2e      	ldr	r2, [pc, #184]	; (80073f4 <USB_EPStartXfer+0x11f8>)
 800733a:	4013      	ands	r3, r2
 800733c:	b29a      	uxth	r2, r3
 800733e:	187b      	adds	r3, r7, r1
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	187b      	adds	r3, r7, r1
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <USB_EPStartXfer+0x11fc>)
 800734e:	4313      	orrs	r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	187b      	adds	r3, r7, r1
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e076      	b.n	8007448 <USB_EPStartXfer+0x124c>
 800735a:	2386      	movs	r3, #134	; 0x86
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	18fb      	adds	r3, r7, r3
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b3e      	cmp	r3, #62	; 0x3e
 8007364:	d81d      	bhi.n	80073a2 <USB_EPStartXfer+0x11a6>
 8007366:	2286      	movs	r2, #134	; 0x86
 8007368:	0052      	lsls	r2, r2, #1
 800736a:	18bb      	adds	r3, r7, r2
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	21dc      	movs	r1, #220	; 0xdc
 8007372:	1879      	adds	r1, r7, r1
 8007374:	600b      	str	r3, [r1, #0]
 8007376:	18bb      	adds	r3, r7, r2
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2201      	movs	r2, #1
 800737c:	4013      	ands	r3, r2
 800737e:	d005      	beq.n	800738c <USB_EPStartXfer+0x1190>
 8007380:	22dc      	movs	r2, #220	; 0xdc
 8007382:	18bb      	adds	r3, r7, r2
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3301      	adds	r3, #1
 8007388:	18ba      	adds	r2, r7, r2
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	23dc      	movs	r3, #220	; 0xdc
 800738e:	18fb      	adds	r3, r7, r3
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	029b      	lsls	r3, r3, #10
 8007396:	b29a      	uxth	r2, r3
 8007398:	23bc      	movs	r3, #188	; 0xbc
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	e052      	b.n	8007448 <USB_EPStartXfer+0x124c>
 80073a2:	2286      	movs	r2, #134	; 0x86
 80073a4:	0052      	lsls	r2, r2, #1
 80073a6:	18bb      	adds	r3, r7, r2
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	21dc      	movs	r1, #220	; 0xdc
 80073ae:	1879      	adds	r1, r7, r1
 80073b0:	600b      	str	r3, [r1, #0]
 80073b2:	18bb      	adds	r3, r7, r2
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	221f      	movs	r2, #31
 80073b8:	4013      	ands	r3, r2
 80073ba:	d105      	bne.n	80073c8 <USB_EPStartXfer+0x11cc>
 80073bc:	22dc      	movs	r2, #220	; 0xdc
 80073be:	18bb      	adds	r3, r7, r2
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	18ba      	adds	r2, r7, r2
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	23dc      	movs	r3, #220	; 0xdc
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	029b      	lsls	r3, r3, #10
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <USB_EPStartXfer+0x11fc>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	b29a      	uxth	r2, r3
 80073da:	23bc      	movs	r3, #188	; 0xbc
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	e031      	b.n	8007448 <USB_EPStartXfer+0x124c>
 80073e4:	00000406 	.word	0x00000406
 80073e8:	ffff8f8f 	.word	0xffff8f8f
 80073ec:	ffff80c0 	.word	0xffff80c0
 80073f0:	00000402 	.word	0x00000402
 80073f4:	ffff83ff 	.word	0xffff83ff
 80073f8:	ffff8000 	.word	0xffff8000
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d121      	bne.n	8007448 <USB_EPStartXfer+0x124c>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2250      	movs	r2, #80	; 0x50
 8007408:	5a9b      	ldrh	r3, [r3, r2]
 800740a:	b29b      	uxth	r3, r3
 800740c:	001a      	movs	r2, r3
 800740e:	21c8      	movs	r1, #200	; 0xc8
 8007410:	187b      	adds	r3, r7, r1
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	189b      	adds	r3, r3, r2
 8007416:	187a      	adds	r2, r7, r1
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	00da      	lsls	r2, r3, #3
 8007420:	187b      	adds	r3, r7, r1
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	18d3      	adds	r3, r2, r3
 8007426:	4a1d      	ldr	r2, [pc, #116]	; (800749c <USB_EPStartXfer+0x12a0>)
 8007428:	4694      	mov	ip, r2
 800742a:	4463      	add	r3, ip
 800742c:	21c4      	movs	r1, #196	; 0xc4
 800742e:	187a      	adds	r2, r7, r1
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	2386      	movs	r3, #134	; 0x86
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	18fb      	adds	r3, r7, r3
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	b29a      	uxth	r2, r3
 800743c:	187b      	adds	r3, r7, r1
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	e001      	b.n	8007448 <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e025      	b.n	8007494 <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	18d3      	adds	r3, r2, r3
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29a      	uxth	r2, r3
 8007456:	208e      	movs	r0, #142	; 0x8e
 8007458:	183b      	adds	r3, r7, r0
 800745a:	4911      	ldr	r1, [pc, #68]	; (80074a0 <USB_EPStartXfer+0x12a4>)
 800745c:	400a      	ands	r2, r1
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	183b      	adds	r3, r7, r0
 8007462:	183a      	adds	r2, r7, r0
 8007464:	8812      	ldrh	r2, [r2, #0]
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	0149      	lsls	r1, r1, #5
 800746a:	404a      	eors	r2, r1
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	183b      	adds	r3, r7, r0
 8007470:	183a      	adds	r2, r7, r0
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	2180      	movs	r1, #128	; 0x80
 8007476:	0189      	lsls	r1, r1, #6
 8007478:	404a      	eors	r2, r1
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	18d3      	adds	r3, r2, r3
 8007486:	183a      	adds	r2, r7, r0
 8007488:	8812      	ldrh	r2, [r2, #0]
 800748a:	4906      	ldr	r1, [pc, #24]	; (80074a4 <USB_EPStartXfer+0x12a8>)
 800748c:	430a      	orrs	r2, r1
 800748e:	b292      	uxth	r2, r2
 8007490:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	0018      	movs	r0, r3
 8007496:	46bd      	mov	sp, r7
 8007498:	b044      	add	sp, #272	; 0x110
 800749a:	bdb0      	pop	{r4, r5, r7, pc}
 800749c:	00000406 	.word	0x00000406
 80074a0:	ffffbf8f 	.word	0xffffbf8f
 80074a4:	ffff8080 	.word	0xffff8080

080074a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01d      	beq.n	80074f6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	18d3      	adds	r3, r2, r3
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	200c      	movs	r0, #12
 80074ca:	183b      	adds	r3, r7, r0
 80074cc:	491b      	ldr	r1, [pc, #108]	; (800753c <USB_EPSetStall+0x94>)
 80074ce:	400a      	ands	r2, r1
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	183b      	adds	r3, r7, r0
 80074d4:	183a      	adds	r2, r7, r0
 80074d6:	8812      	ldrh	r2, [r2, #0]
 80074d8:	2110      	movs	r1, #16
 80074da:	404a      	eors	r2, r1
 80074dc:	801a      	strh	r2, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	18d3      	adds	r3, r2, r3
 80074e8:	183a      	adds	r2, r7, r0
 80074ea:	8812      	ldrh	r2, [r2, #0]
 80074ec:	4914      	ldr	r1, [pc, #80]	; (8007540 <USB_EPSetStall+0x98>)
 80074ee:	430a      	orrs	r2, r1
 80074f0:	b292      	uxth	r2, r2
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e01d      	b.n	8007532 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	18d3      	adds	r3, r2, r3
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29a      	uxth	r2, r3
 8007504:	200e      	movs	r0, #14
 8007506:	183b      	adds	r3, r7, r0
 8007508:	490e      	ldr	r1, [pc, #56]	; (8007544 <USB_EPSetStall+0x9c>)
 800750a:	400a      	ands	r2, r1
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	183b      	adds	r3, r7, r0
 8007510:	183a      	adds	r2, r7, r0
 8007512:	8812      	ldrh	r2, [r2, #0]
 8007514:	2180      	movs	r1, #128	; 0x80
 8007516:	0149      	lsls	r1, r1, #5
 8007518:	404a      	eors	r2, r1
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	18d3      	adds	r3, r2, r3
 8007526:	183a      	adds	r2, r7, r0
 8007528:	8812      	ldrh	r2, [r2, #0]
 800752a:	4905      	ldr	r1, [pc, #20]	; (8007540 <USB_EPSetStall+0x98>)
 800752c:	430a      	orrs	r2, r1
 800752e:	b292      	uxth	r2, r2
 8007530:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	0018      	movs	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	b004      	add	sp, #16
 800753a:	bd80      	pop	{r7, pc}
 800753c:	ffff8fbf 	.word	0xffff8fbf
 8007540:	ffff8080 	.word	0xffff8080
 8007544:	ffffbf8f 	.word	0xffffbf8f

08007548 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	7b1b      	ldrb	r3, [r3, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d000      	beq.n	800755c <USB_EPClearStall+0x14>
 800755a:	e095      	b.n	8007688 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d046      	beq.n	80075f2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	18d2      	adds	r2, r2, r3
 800756e:	2110      	movs	r1, #16
 8007570:	187b      	adds	r3, r7, r1
 8007572:	8812      	ldrh	r2, [r2, #0]
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	187b      	adds	r3, r7, r1
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	2240      	movs	r2, #64	; 0x40
 800757c:	4013      	ands	r3, r2
 800757e:	d016      	beq.n	80075ae <USB_EPClearStall+0x66>
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	18d3      	adds	r3, r2, r3
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	200e      	movs	r0, #14
 8007590:	183b      	adds	r3, r7, r0
 8007592:	4940      	ldr	r1, [pc, #256]	; (8007694 <USB_EPClearStall+0x14c>)
 8007594:	400a      	ands	r2, r1
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	18d3      	adds	r3, r2, r3
 80075a2:	183a      	adds	r2, r7, r0
 80075a4:	8812      	ldrh	r2, [r2, #0]
 80075a6:	493c      	ldr	r1, [pc, #240]	; (8007698 <USB_EPClearStall+0x150>)
 80075a8:	430a      	orrs	r2, r1
 80075aa:	b292      	uxth	r2, r2
 80075ac:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d068      	beq.n	8007688 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	18d3      	adds	r3, r2, r3
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	200c      	movs	r0, #12
 80075c6:	183b      	adds	r3, r7, r0
 80075c8:	4934      	ldr	r1, [pc, #208]	; (800769c <USB_EPClearStall+0x154>)
 80075ca:	400a      	ands	r2, r1
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	183b      	adds	r3, r7, r0
 80075d0:	183a      	adds	r2, r7, r0
 80075d2:	8812      	ldrh	r2, [r2, #0]
 80075d4:	2120      	movs	r1, #32
 80075d6:	404a      	eors	r2, r1
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	18d3      	adds	r3, r2, r3
 80075e4:	183a      	adds	r2, r7, r0
 80075e6:	8812      	ldrh	r2, [r2, #0]
 80075e8:	492d      	ldr	r1, [pc, #180]	; (80076a0 <USB_EPClearStall+0x158>)
 80075ea:	430a      	orrs	r2, r1
 80075ec:	b292      	uxth	r2, r2
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e04a      	b.n	8007688 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	18d2      	adds	r2, r2, r3
 80075fc:	2116      	movs	r1, #22
 80075fe:	187b      	adds	r3, r7, r1
 8007600:	8812      	ldrh	r2, [r2, #0]
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	187b      	adds	r3, r7, r1
 8007606:	881a      	ldrh	r2, [r3, #0]
 8007608:	2380      	movs	r3, #128	; 0x80
 800760a:	01db      	lsls	r3, r3, #7
 800760c:	4013      	ands	r3, r2
 800760e:	d016      	beq.n	800763e <USB_EPClearStall+0xf6>
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	18d3      	adds	r3, r2, r3
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29a      	uxth	r2, r3
 800761e:	2014      	movs	r0, #20
 8007620:	183b      	adds	r3, r7, r0
 8007622:	491c      	ldr	r1, [pc, #112]	; (8007694 <USB_EPClearStall+0x14c>)
 8007624:	400a      	ands	r2, r1
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	18d3      	adds	r3, r2, r3
 8007632:	183a      	adds	r2, r7, r0
 8007634:	8812      	ldrh	r2, [r2, #0]
 8007636:	491b      	ldr	r1, [pc, #108]	; (80076a4 <USB_EPClearStall+0x15c>)
 8007638:	430a      	orrs	r2, r1
 800763a:	b292      	uxth	r2, r2
 800763c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	18d3      	adds	r3, r2, r3
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29a      	uxth	r2, r3
 800764c:	2012      	movs	r0, #18
 800764e:	183b      	adds	r3, r7, r0
 8007650:	4915      	ldr	r1, [pc, #84]	; (80076a8 <USB_EPClearStall+0x160>)
 8007652:	400a      	ands	r2, r1
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	183b      	adds	r3, r7, r0
 8007658:	183a      	adds	r2, r7, r0
 800765a:	8812      	ldrh	r2, [r2, #0]
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	0149      	lsls	r1, r1, #5
 8007660:	404a      	eors	r2, r1
 8007662:	801a      	strh	r2, [r3, #0]
 8007664:	183b      	adds	r3, r7, r0
 8007666:	183a      	adds	r2, r7, r0
 8007668:	8812      	ldrh	r2, [r2, #0]
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	0189      	lsls	r1, r1, #6
 800766e:	404a      	eors	r2, r1
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	183a      	adds	r2, r7, r0
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	4907      	ldr	r1, [pc, #28]	; (80076a0 <USB_EPClearStall+0x158>)
 8007682:	430a      	orrs	r2, r1
 8007684:	b292      	uxth	r2, r2
 8007686:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	0018      	movs	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	b006      	add	sp, #24
 8007690:	bd80      	pop	{r7, pc}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	ffff8f8f 	.word	0xffff8f8f
 8007698:	ffff80c0 	.word	0xffff80c0
 800769c:	ffff8fbf 	.word	0xffff8fbf
 80076a0:	ffff8080 	.word	0xffff8080
 80076a4:	ffffc080 	.word	0xffffc080
 80076a8:	ffffbf8f 	.word	0xffffbf8f

080076ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	000a      	movs	r2, r1
 80076b6:	1cfb      	adds	r3, r7, #3
 80076b8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80076ba:	1cfb      	adds	r3, r7, #3
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	224c      	movs	r2, #76	; 0x4c
 80076c6:	2180      	movs	r1, #128	; 0x80
 80076c8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	0018      	movs	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b002      	add	sp, #8
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2258      	movs	r2, #88	; 0x58
 80076e0:	5a9b      	ldrh	r3, [r3, r2]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4a05      	ldr	r2, [pc, #20]	; (80076fc <USB_DevConnect+0x28>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	b299      	uxth	r1, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2258      	movs	r2, #88	; 0x58
 80076ee:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	0018      	movs	r0, r3
 80076f4:	46bd      	mov	sp, r7
 80076f6:	b002      	add	sp, #8
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	ffff8000 	.word	0xffff8000

08007700 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2244      	movs	r2, #68	; 0x44
 800770c:	5a9b      	ldrh	r3, [r3, r2]
 800770e:	b29b      	uxth	r3, r3
 8007710:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	0018      	movs	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	b004      	add	sp, #16
 800771a:	bd80      	pop	{r7, pc}

0800771c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08c      	sub	sp, #48	; 0x30
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	0019      	movs	r1, r3
 8007728:	1dbb      	adds	r3, r7, #6
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	1d3b      	adds	r3, r7, #4
 800772e:	1c0a      	adds	r2, r1, #0
 8007730:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	3301      	adds	r3, #1
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007744:	1dbb      	adds	r3, r7, #6
 8007746:	881a      	ldrh	r2, [r3, #0]
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	18d3      	adds	r3, r2, r3
 800774c:	2280      	movs	r2, #128	; 0x80
 800774e:	00d2      	lsls	r2, r2, #3
 8007750:	4694      	mov	ip, r2
 8007752:	4463      	add	r3, ip
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800775a:	e01b      	b.n	8007794 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	3301      	adds	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	b29b      	uxth	r3, r3
 8007772:	001a      	movs	r2, r3
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	b29a      	uxth	r2, r3
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	3302      	adds	r3, #2
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	3301      	adds	r3, #1
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	3b01      	subs	r3, #1
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e0      	bne.n	800775c <USB_WritePMA+0x40>
  }
}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	46bd      	mov	sp, r7
 800779e:	b00c      	add	sp, #48	; 0x30
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b08a      	sub	sp, #40	; 0x28
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	0019      	movs	r1, r3
 80077ae:	1dbb      	adds	r3, r7, #6
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	1d3b      	adds	r3, r7, #4
 80077b4:	1c0a      	adds	r2, r1, #0
 80077b6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077b8:	1d3b      	adds	r3, r7, #4
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	b29b      	uxth	r3, r3
 80077c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077ca:	1dbb      	adds	r3, r7, #6
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	18d3      	adds	r3, r2, r3
 80077d2:	2280      	movs	r2, #128	; 0x80
 80077d4:	00d2      	lsls	r2, r2, #3
 80077d6:	4694      	mov	ip, r2
 80077d8:	4463      	add	r3, ip
 80077da:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
 80077e0:	e018      	b.n	8007814 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	3302      	adds	r3, #2
 80077ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	0a1b      	lsrs	r3, r3, #8
 8007802:	b2da      	uxtb	r2, r3
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	3301      	adds	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	3b01      	subs	r3, #1
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e3      	bne.n	80077e2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	2201      	movs	r2, #1
 8007820:	4013      	ands	r3, r2
 8007822:	b29b      	uxth	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	b2da      	uxtb	r2, r3
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	701a      	strb	r2, [r3, #0]
  }
}
 8007838:	46c0      	nop			; (mov r8, r8)
 800783a:	46bd      	mov	sp, r7
 800783c:	b00a      	add	sp, #40	; 0x28
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	000a      	movs	r2, r1
 800784a:	1cfb      	adds	r3, r7, #3
 800784c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800784e:	230f      	movs	r3, #15
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7c1b      	ldrb	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d116      	bne.n	800788c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800785e:	2380      	movs	r3, #128	; 0x80
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	2181      	movs	r1, #129	; 0x81
 8007868:	f002 f8a2 	bl	80099b0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	2101      	movs	r1, #1
 800787c:	f002 f898 	bl	80099b0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	23b6      	movs	r3, #182	; 0xb6
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	2101      	movs	r1, #1
 8007888:	50d1      	str	r1, [r2, r3]
 800788a:	e013      	b.n	80078b4 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	2340      	movs	r3, #64	; 0x40
 8007890:	2202      	movs	r2, #2
 8007892:	2181      	movs	r1, #129	; 0x81
 8007894:	f002 f88c 	bl	80099b0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	2202      	movs	r2, #2
 80078a4:	2101      	movs	r1, #1
 80078a6:	f002 f883 	bl	80099b0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	23b6      	movs	r3, #182	; 0xb6
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	2101      	movs	r1, #1
 80078b2:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	2308      	movs	r3, #8
 80078b8:	2203      	movs	r2, #3
 80078ba:	2182      	movs	r1, #130	; 0x82
 80078bc:	f002 f878 	bl	80099b0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078c6:	2387      	movs	r3, #135	; 0x87
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	0018      	movs	r0, r3
 80078cc:	f002 fa0e 	bl	8009cec <USBD_static_malloc>
 80078d0:	0001      	movs	r1, r0
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	23ae      	movs	r3, #174	; 0xae
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	23ae      	movs	r3, #174	; 0xae
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	58d3      	ldr	r3, [r2, r3]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80078e6:	230f      	movs	r3, #15
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	2201      	movs	r2, #1
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	e02c      	b.n	800794a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	23ae      	movs	r3, #174	; 0xae
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	58d3      	ldr	r3, [r2, r3]
 80078f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	23af      	movs	r3, #175	; 0xaf
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	58d3      	ldr	r3, [r2, r3]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	2385      	movs	r3, #133	; 0x85
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	2100      	movs	r1, #0
 800790e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	2386      	movs	r3, #134	; 0x86
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	2100      	movs	r1, #0
 8007918:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7c1b      	ldrb	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	2381      	movs	r3, #129	; 0x81
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	58d2      	ldr	r2, [r2, r3]
 800792a:	2380      	movs	r3, #128	; 0x80
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	2101      	movs	r1, #1
 8007932:	f002 f98d 	bl	8009c50 <USBD_LL_PrepareReceive>
 8007936:	e008      	b.n	800794a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	2381      	movs	r3, #129	; 0x81
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	58d2      	ldr	r2, [r2, r3]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	2101      	movs	r1, #1
 8007946:	f002 f983 	bl	8009c50 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800794a:	230f      	movs	r3, #15
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	781b      	ldrb	r3, [r3, #0]
}
 8007950:	0018      	movs	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	b004      	add	sp, #16
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	000a      	movs	r2, r1
 8007962:	1cfb      	adds	r3, r7, #3
 8007964:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007966:	230f      	movs	r3, #15
 8007968:	18fb      	adds	r3, r7, r3
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2181      	movs	r1, #129	; 0x81
 8007972:	0018      	movs	r0, r3
 8007974:	f002 f853 	bl	8009a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2101      	movs	r1, #1
 8007982:	0018      	movs	r0, r3
 8007984:	f002 f84b 	bl	8009a1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	23b6      	movs	r3, #182	; 0xb6
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	2100      	movs	r1, #0
 8007990:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2182      	movs	r1, #130	; 0x82
 8007996:	0018      	movs	r0, r3
 8007998:	f002 f841 	bl	8009a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	23ae      	movs	r3, #174	; 0xae
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	58d3      	ldr	r3, [r2, r3]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d011      	beq.n	80079d2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	23af      	movs	r3, #175	; 0xaf
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	58d3      	ldr	r3, [r2, r3]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	23ae      	movs	r3, #174	; 0xae
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	58d3      	ldr	r3, [r2, r3]
 80079c2:	0018      	movs	r0, r3
 80079c4:	f002 f99e 	bl	8009d04 <USBD_static_free>
    pdev->pClassData = NULL;
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	23ae      	movs	r3, #174	; 0xae
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	2100      	movs	r1, #0
 80079d0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80079d2:	230f      	movs	r3, #15
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	781b      	ldrb	r3, [r3, #0]
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b004      	add	sp, #16
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	23ae      	movs	r3, #174	; 0xae
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	58d3      	ldr	r3, [r2, r3]
 80079f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80079f4:	230f      	movs	r3, #15
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80079fc:	230c      	movs	r3, #12
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	2200      	movs	r2, #0
 8007a02:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8007a04:	2317      	movs	r3, #23
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	001a      	movs	r2, r3
 8007a12:	2360      	movs	r3, #96	; 0x60
 8007a14:	4013      	ands	r3, r2
 8007a16:	d03d      	beq.n	8007a94 <USBD_CDC_Setup+0xb4>
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d000      	beq.n	8007a1e <USBD_CDC_Setup+0x3e>
 8007a1c:	e092      	b.n	8007b44 <USBD_CDC_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d02b      	beq.n	8007a7e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da12      	bge.n	8007a56 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	23af      	movs	r3, #175	; 0xaf
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	58d3      	ldr	r3, [r2, r3]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007a3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	88d2      	ldrh	r2, [r2, #6]
 8007a44:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a46:	6939      	ldr	r1, [r7, #16]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	88da      	ldrh	r2, [r3, #6]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f001 fbbe 	bl	80091d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a54:	e081      	b.n	8007b5a <USBD_CDC_Setup+0x17a>
          hcdc->CmdOpCode = req->bRequest;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	7859      	ldrb	r1, [r3, #1]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	88db      	ldrh	r3, [r3, #6]
 8007a66:	b2d9      	uxtb	r1, r3
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4a3f      	ldr	r2, [pc, #252]	; (8007b68 <USBD_CDC_Setup+0x188>)
 8007a6c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a6e:	6939      	ldr	r1, [r7, #16]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	88da      	ldrh	r2, [r3, #6]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	0018      	movs	r0, r3
 8007a78:	f001 fbdd 	bl	8009236 <USBD_CtlPrepareRx>
      break;
 8007a7c:	e06d      	b.n	8007b5a <USBD_CDC_Setup+0x17a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	23af      	movs	r3, #175	; 0xaf
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	58d3      	ldr	r3, [r2, r3]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	7850      	ldrb	r0, [r2, #1]
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4798      	blx	r3
      break;
 8007a92:	e062      	b.n	8007b5a <USBD_CDC_Setup+0x17a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b0a      	cmp	r3, #10
 8007a9a:	d01c      	beq.n	8007ad6 <USBD_CDC_Setup+0xf6>
 8007a9c:	2b0b      	cmp	r3, #11
 8007a9e:	d033      	beq.n	8007b08 <USBD_CDC_Setup+0x128>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d142      	bne.n	8007b2a <USBD_CDC_Setup+0x14a>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	23a7      	movs	r3, #167	; 0xa7
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	5cd3      	ldrb	r3, [r2, r3]
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d107      	bne.n	8007ac0 <USBD_CDC_Setup+0xe0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	18f9      	adds	r1, r7, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f001 fb89 	bl	80091d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007abe:	e040      	b.n	8007b42 <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	0011      	movs	r1, r2
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f001 fb03 	bl	80090d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007acc:	2317      	movs	r3, #23
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	701a      	strb	r2, [r3, #0]
          break;
 8007ad4:	e035      	b.n	8007b42 <USBD_CDC_Setup+0x162>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	23a7      	movs	r3, #167	; 0xa7
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	5cd3      	ldrb	r3, [r2, r3]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d107      	bne.n	8007af2 <USBD_CDC_Setup+0x112>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ae2:	230f      	movs	r3, #15
 8007ae4:	18f9      	adds	r1, r7, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	0018      	movs	r0, r3
 8007aec:	f001 fb70 	bl	80091d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007af0:	e027      	b.n	8007b42 <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	0011      	movs	r1, r2
 8007af8:	0018      	movs	r0, r3
 8007afa:	f001 faea 	bl	80090d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007afe:	2317      	movs	r3, #23
 8007b00:	18fb      	adds	r3, r7, r3
 8007b02:	2202      	movs	r2, #2
 8007b04:	701a      	strb	r2, [r3, #0]
          break;
 8007b06:	e01c      	b.n	8007b42 <USBD_CDC_Setup+0x162>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	23a7      	movs	r3, #167	; 0xa7
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	5cd3      	ldrb	r3, [r2, r3]
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d015      	beq.n	8007b40 <USBD_CDC_Setup+0x160>
          {
            USBD_CtlError(pdev, req);
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	0011      	movs	r1, r2
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f001 fad9 	bl	80090d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b20:	2317      	movs	r3, #23
 8007b22:	18fb      	adds	r3, r7, r3
 8007b24:	2202      	movs	r2, #2
 8007b26:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007b28:	e00a      	b.n	8007b40 <USBD_CDC_Setup+0x160>

        default:
          USBD_CtlError(pdev, req);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	0011      	movs	r1, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f001 face 	bl	80090d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b36:	2317      	movs	r3, #23
 8007b38:	18fb      	adds	r3, r7, r3
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
          break;
 8007b3e:	e000      	b.n	8007b42 <USBD_CDC_Setup+0x162>
          break;
 8007b40:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007b42:	e00a      	b.n	8007b5a <USBD_CDC_Setup+0x17a>

    default:
      USBD_CtlError(pdev, req);
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0011      	movs	r1, r2
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f001 fac1 	bl	80090d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b50:	2317      	movs	r3, #23
 8007b52:	18fb      	adds	r3, r7, r3
 8007b54:	2202      	movs	r2, #2
 8007b56:	701a      	strb	r2, [r3, #0]
      break;
 8007b58:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007b5a:	2317      	movs	r3, #23
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	781b      	ldrb	r3, [r3, #0]
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b006      	add	sp, #24
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	00000201 	.word	0x00000201

08007b6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	000a      	movs	r2, r1
 8007b76:	1cfb      	adds	r3, r7, #3
 8007b78:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	23ae      	movs	r3, #174	; 0xae
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	58d3      	ldr	r3, [r2, r3]
 8007b82:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	23b0      	movs	r3, #176	; 0xb0
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	58d3      	ldr	r3, [r2, r3]
 8007b8c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	23ae      	movs	r3, #174	; 0xae
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	58d3      	ldr	r3, [r2, r3]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d03e      	beq.n	8007c18 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b9a:	1cfb      	adds	r3, r7, #3
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	0013      	movs	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	18cb      	adds	r3, r1, r3
 8007baa:	331c      	adds	r3, #28
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d02b      	beq.n	8007c0a <USBD_CDC_DataIn+0x9e>
 8007bb2:	1cfb      	adds	r3, r7, #3
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	0013      	movs	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	18cb      	adds	r3, r1, r3
 8007bc2:	331c      	adds	r3, #28
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	1cfb      	adds	r3, r7, #3
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	0013      	movs	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	189b      	adds	r3, r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	18cb      	adds	r3, r1, r3
 8007bd6:	3338      	adds	r3, #56	; 0x38
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	0019      	movs	r1, r3
 8007bdc:	f7f8 fb1a 	bl	8000214 <__aeabi_uidivmod>
 8007be0:	1e0b      	subs	r3, r1, #0
 8007be2:	d112      	bne.n	8007c0a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007be4:	1cfb      	adds	r3, r7, #3
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	0013      	movs	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	189b      	adds	r3, r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	18cb      	adds	r3, r1, r3
 8007bf4:	331c      	adds	r3, #28
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bfa:	1cfb      	adds	r3, r7, #3
 8007bfc:	7819      	ldrb	r1, [r3, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	2300      	movs	r3, #0
 8007c02:	2200      	movs	r2, #0
 8007c04:	f001 ffec 	bl	8009be0 <USBD_LL_Transmit>
 8007c08:	e004      	b.n	8007c14 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	2385      	movs	r3, #133	; 0x85
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	2100      	movs	r1, #0
 8007c12:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e000      	b.n	8007c1a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8007c18:	2302      	movs	r3, #2
  }
}
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	b004      	add	sp, #16
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	000a      	movs	r2, r1
 8007c2c:	1cfb      	adds	r3, r7, #3
 8007c2e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	23ae      	movs	r3, #174	; 0xae
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	58d3      	ldr	r3, [r2, r3]
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c3a:	1cfb      	adds	r3, r7, #3
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	0011      	movs	r1, r2
 8007c42:	0018      	movs	r0, r3
 8007c44:	f002 f83c 	bl	8009cc0 <USBD_LL_GetRxDataSize>
 8007c48:	0001      	movs	r1, r0
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	2383      	movs	r3, #131	; 0x83
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	23ae      	movs	r3, #174	; 0xae
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	58d3      	ldr	r3, [r2, r3]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	23af      	movs	r3, #175	; 0xaf
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	58d3      	ldr	r3, [r2, r3]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	68f9      	ldr	r1, [r7, #12]
 8007c6a:	2281      	movs	r2, #129	; 0x81
 8007c6c:	0092      	lsls	r2, r2, #2
 8007c6e:	5888      	ldr	r0, [r1, r2]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	2183      	movs	r1, #131	; 0x83
 8007c74:	0089      	lsls	r1, r1, #2
 8007c76:	468c      	mov	ip, r1
 8007c78:	4462      	add	r2, ip
 8007c7a:	0011      	movs	r1, r2
 8007c7c:	4798      	blx	r3

    return USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e000      	b.n	8007c84 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8007c82:	2302      	movs	r3, #2
  }
}
 8007c84:	0018      	movs	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b004      	add	sp, #16
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	23ae      	movs	r3, #174	; 0xae
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	58d3      	ldr	r3, [r2, r3]
 8007c9c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	23af      	movs	r3, #175	; 0xaf
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	58d3      	ldr	r3, [r2, r3]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01a      	beq.n	8007ce0 <USBD_CDC_EP0_RxReady+0x54>
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	2380      	movs	r3, #128	; 0x80
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	5cd3      	ldrb	r3, [r2, r3]
 8007cb2:	2bff      	cmp	r3, #255	; 0xff
 8007cb4:	d014      	beq.n	8007ce0 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	23af      	movs	r3, #175	; 0xaf
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	58d3      	ldr	r3, [r2, r3]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	68f9      	ldr	r1, [r7, #12]
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	0092      	lsls	r2, r2, #2
 8007cc6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8007cc8:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4907      	ldr	r1, [pc, #28]	; (8007cec <USBD_CDC_EP0_RxReady+0x60>)
 8007cce:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cd0:	b292      	uxth	r2, r2
 8007cd2:	0021      	movs	r1, r4
 8007cd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	21ff      	movs	r1, #255	; 0xff
 8007cde:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b005      	add	sp, #20
 8007ce8:	bd90      	pop	{r4, r7, pc}
 8007cea:	46c0      	nop			; (mov r8, r8)
 8007cec:	00000201 	.word	0x00000201

08007cf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2243      	movs	r2, #67	; 0x43
 8007cfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007cfe:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8007d00:	0018      	movs	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b002      	add	sp, #8
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20000098 	.word	0x20000098

08007d0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2243      	movs	r2, #67	; 0x43
 8007d18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007d1a:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b002      	add	sp, #8
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000054 	.word	0x20000054

08007d28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2243      	movs	r2, #67	; 0x43
 8007d34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d36:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8007d38:	0018      	movs	r0, r3
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b002      	add	sp, #8
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200000dc 	.word	0x200000dc

08007d44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	220a      	movs	r2, #10
 8007d50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d52:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8007d54:	0018      	movs	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b002      	add	sp, #8
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000010 	.word	0x20000010

08007d60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d6a:	230f      	movs	r3, #15
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData = fops;
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	23af      	movs	r3, #175	; 0xaf
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007d82:	230f      	movs	r3, #15
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007d8a:	230f      	movs	r3, #15
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	781b      	ldrb	r3, [r3, #0]
}
 8007d90:	0018      	movs	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b004      	add	sp, #16
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	1dbb      	adds	r3, r7, #6
 8007da4:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	23ae      	movs	r3, #174	; 0xae
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	58d3      	ldr	r3, [r2, r3]
 8007dae:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	2382      	movs	r3, #130	; 0x82
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8007dba:	1dbb      	adds	r3, r7, #6
 8007dbc:	8819      	ldrh	r1, [r3, #0]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	2384      	movs	r3, #132	; 0x84
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	0018      	movs	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b006      	add	sp, #24
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	23ae      	movs	r3, #174	; 0xae
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	58d3      	ldr	r3, [r2, r3]
 8007de2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	2381      	movs	r3, #129	; 0x81
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	0018      	movs	r0, r3
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b004      	add	sp, #16
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	23ae      	movs	r3, #174	; 0xae
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	58d3      	ldr	r3, [r2, r3]
 8007e08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	23ae      	movs	r3, #174	; 0xae
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	58d3      	ldr	r3, [r2, r3]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d022      	beq.n	8007e5c <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	2385      	movs	r3, #133	; 0x85
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	58d3      	ldr	r3, [r2, r3]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d11a      	bne.n	8007e58 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	2385      	movs	r3, #133	; 0x85
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	2101      	movs	r1, #1
 8007e2a:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	2384      	movs	r3, #132	; 0x84
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	58d2      	ldr	r2, [r2, r3]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	2382      	movs	r3, #130	; 0x82
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	2384      	movs	r3, #132	; 0x84
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	000a      	movs	r2, r1
 8007e4e:	2181      	movs	r1, #129	; 0x81
 8007e50:	f001 fec6 	bl	8009be0 <USBD_LL_Transmit>

      return USBD_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e002      	b.n	8007e5e <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e000      	b.n	8007e5e <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e5c:	2302      	movs	r3, #2
  }
}
 8007e5e:	0018      	movs	r0, r3
 8007e60:	46bd      	mov	sp, r7
 8007e62:	b004      	add	sp, #16
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	23ae      	movs	r3, #174	; 0xae
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	58d3      	ldr	r3, [r2, r3]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	23ae      	movs	r3, #174	; 0xae
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	58d3      	ldr	r3, [r2, r3]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d019      	beq.n	8007eb8 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7c1b      	ldrb	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	2381      	movs	r3, #129	; 0x81
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	58d2      	ldr	r2, [r2, r3]
 8007e94:	2380      	movs	r3, #128	; 0x80
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	f001 fed8 	bl	8009c50 <USBD_LL_PrepareReceive>
 8007ea0:	e008      	b.n	8007eb4 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	2381      	movs	r3, #129	; 0x81
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	58d2      	ldr	r2, [r2, r3]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	2340      	movs	r3, #64	; 0x40
 8007eae:	2101      	movs	r1, #1
 8007eb0:	f001 fece 	bl	8009c50 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e000      	b.n	8007eba <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8007eb8:	2302      	movs	r3, #2
  }
}
 8007eba:	0018      	movs	r0, r3
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b004      	add	sp, #16
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	1dfb      	adds	r3, r7, #7
 8007ece:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e020      	b.n	8007f1c <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	23ad      	movs	r3, #173	; 0xad
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	58d3      	ldr	r3, [r2, r3]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	23ad      	movs	r3, #173	; 0xad
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	2100      	movs	r1, #0
 8007eee:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	23ac      	movs	r3, #172	; 0xac
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	23a7      	movs	r3, #167	; 0xa7
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	2101      	movs	r1, #1
 8007f08:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1dfa      	adds	r2, r7, #7
 8007f0e:	7812      	ldrb	r2, [r2, #0]
 8007f10:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	0018      	movs	r0, r3
 8007f16:	f001 fcc1 	bl	800989c <USBD_LL_Init>

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b004      	add	sp, #16
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007f2e:	230f      	movs	r3, #15
 8007f30:	18fb      	adds	r3, r7, r3
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	23ad      	movs	r3, #173	; 0xad
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007f46:	230f      	movs	r3, #15
 8007f48:	18fb      	adds	r3, r7, r3
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e003      	b.n	8007f58 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007f50:	230f      	movs	r3, #15
 8007f52:	18fb      	adds	r3, r7, r3
 8007f54:	2202      	movs	r2, #2
 8007f56:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007f58:	230f      	movs	r3, #15
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	781b      	ldrb	r3, [r3, #0]
}
 8007f5e:	0018      	movs	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b004      	add	sp, #16
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	0018      	movs	r0, r3
 8007f72:	f001 fcf7 	bl	8009964 <USBD_LL_Start>

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	0018      	movs	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b002      	add	sp, #8
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	b002      	add	sp, #8
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	000a      	movs	r2, r1
 8007f9c:	1cfb      	adds	r3, r7, #3
 8007f9e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fa0:	230f      	movs	r3, #15
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	23ad      	movs	r3, #173	; 0xad
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	58d3      	ldr	r3, [r2, r3]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00f      	beq.n	8007fd4 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	23ad      	movs	r3, #173	; 0xad
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	58d3      	ldr	r3, [r2, r3]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	1cfa      	adds	r2, r7, #3
 8007fc0:	7811      	ldrb	r1, [r2, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	0010      	movs	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	1e03      	subs	r3, r0, #0
 8007fca:	d103      	bne.n	8007fd4 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8007fcc:	230f      	movs	r3, #15
 8007fce:	18fb      	adds	r3, r7, r3
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007fd4:	230f      	movs	r3, #15
 8007fd6:	18fb      	adds	r3, r7, r3
 8007fd8:	781b      	ldrb	r3, [r3, #0]
}
 8007fda:	0018      	movs	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	b004      	add	sp, #16
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	000a      	movs	r2, r1
 8007fec:	1cfb      	adds	r3, r7, #3
 8007fee:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	23ad      	movs	r3, #173	; 0xad
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	58d3      	ldr	r3, [r2, r3]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	1cfa      	adds	r2, r7, #3
 8007ffc:	7811      	ldrb	r1, [r2, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	0010      	movs	r0, r2
 8008002:	4798      	blx	r3

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	0018      	movs	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	b002      	add	sp, #8
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	22aa      	movs	r2, #170	; 0xaa
 800801e:	0092      	lsls	r2, r2, #2
 8008020:	4694      	mov	ip, r2
 8008022:	4463      	add	r3, ip
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	0011      	movs	r1, r2
 8008028:	0018      	movs	r0, r3
 800802a:	f001 f817 	bl	800905c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	23a5      	movs	r3, #165	; 0xa5
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	2101      	movs	r1, #1
 8008036:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a22      	ldr	r2, [pc, #136]	; (80080c4 <USBD_LL_SetupStage+0xb4>)
 800803c:	5a9b      	ldrh	r3, [r3, r2]
 800803e:	0019      	movs	r1, r3
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	23a6      	movs	r3, #166	; 0xa6
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	23aa      	movs	r3, #170	; 0xaa
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	5cd3      	ldrb	r3, [r2, r3]
 8008050:	001a      	movs	r2, r3
 8008052:	231f      	movs	r3, #31
 8008054:	4013      	ands	r3, r2
 8008056:	2b01      	cmp	r3, #1
 8008058:	d00d      	beq.n	8008076 <USBD_LL_SetupStage+0x66>
 800805a:	d302      	bcc.n	8008062 <USBD_LL_SetupStage+0x52>
 800805c:	2b02      	cmp	r3, #2
 800805e:	d014      	beq.n	800808a <USBD_LL_SetupStage+0x7a>
 8008060:	e01d      	b.n	800809e <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	22aa      	movs	r2, #170	; 0xaa
 8008066:	0092      	lsls	r2, r2, #2
 8008068:	189a      	adds	r2, r3, r2
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0011      	movs	r1, r2
 800806e:	0018      	movs	r0, r3
 8008070:	f000 fa10 	bl	8008494 <USBD_StdDevReq>
      break;
 8008074:	e020      	b.n	80080b8 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	22aa      	movs	r2, #170	; 0xaa
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	189a      	adds	r2, r3, r2
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	0011      	movs	r1, r2
 8008082:	0018      	movs	r0, r3
 8008084:	f000 fa78 	bl	8008578 <USBD_StdItfReq>
      break;
 8008088:	e016      	b.n	80080b8 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	22aa      	movs	r2, #170	; 0xaa
 800808e:	0092      	lsls	r2, r2, #2
 8008090:	189a      	adds	r2, r3, r2
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0011      	movs	r1, r2
 8008096:	0018      	movs	r0, r3
 8008098:	f000 fac5 	bl	8008626 <USBD_StdEPReq>
      break;
 800809c:	e00c      	b.n	80080b8 <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	23aa      	movs	r3, #170	; 0xaa
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	5cd3      	ldrb	r3, [r2, r3]
 80080a6:	227f      	movs	r2, #127	; 0x7f
 80080a8:	4393      	bics	r3, r2
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	0011      	movs	r1, r2
 80080b0:	0018      	movs	r0, r3
 80080b2:	f001 fce0 	bl	8009a76 <USBD_LL_StallEP>
      break;
 80080b6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	0018      	movs	r0, r3
 80080bc:	46bd      	mov	sp, r7
 80080be:	b002      	add	sp, #8
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	000002ae 	.word	0x000002ae

080080c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	200b      	movs	r0, #11
 80080d4:	183b      	adds	r3, r7, r0
 80080d6:	1c0a      	adds	r2, r1, #0
 80080d8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80080da:	183b      	adds	r3, r7, r0
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d154      	bne.n	800818c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3355      	adds	r3, #85	; 0x55
 80080e6:	33ff      	adds	r3, #255	; 0xff
 80080e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	23a5      	movs	r3, #165	; 0xa5
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	58d3      	ldr	r3, [r2, r3]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d139      	bne.n	800816a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d919      	bls.n	8008136 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	1ad2      	subs	r2, r2, r3
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008118:	429a      	cmp	r2, r3
 800811a:	d203      	bcs.n	8008124 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008120:	b29b      	uxth	r3, r3
 8008122:	e002      	b.n	800812a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008128:	b29b      	uxth	r3, r3
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	001a      	movs	r2, r3
 8008130:	f001 f8a5 	bl	800927e <USBD_CtlContinueRx>
 8008134:	e045      	b.n	80081c2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	23ad      	movs	r3, #173	; 0xad
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	58d3      	ldr	r3, [r2, r3]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	23a7      	movs	r3, #167	; 0xa7
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800814c:	2b03      	cmp	r3, #3
 800814e:	d107      	bne.n	8008160 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	23ad      	movs	r3, #173	; 0xad
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	58d3      	ldr	r3, [r2, r3]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	0010      	movs	r0, r2
 800815e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	0018      	movs	r0, r3
 8008164:	f001 f89e 	bl	80092a4 <USBD_CtlSendStatus>
 8008168:	e02b      	b.n	80081c2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	23a5      	movs	r3, #165	; 0xa5
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	58d3      	ldr	r3, [r2, r3]
 8008172:	2b05      	cmp	r3, #5
 8008174:	d125      	bne.n	80081c2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	23a5      	movs	r3, #165	; 0xa5
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	2100      	movs	r1, #0
 800817e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2100      	movs	r1, #0
 8008184:	0018      	movs	r0, r3
 8008186:	f001 fc76 	bl	8009a76 <USBD_LL_StallEP>
 800818a:	e01a      	b.n	80081c2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	23ad      	movs	r3, #173	; 0xad
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	58d3      	ldr	r3, [r2, r3]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d011      	beq.n	80081be <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	23a7      	movs	r3, #167	; 0xa7
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d10b      	bne.n	80081be <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	23ad      	movs	r3, #173	; 0xad
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	58d3      	ldr	r3, [r2, r3]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	220b      	movs	r2, #11
 80081b2:	18ba      	adds	r2, r7, r2
 80081b4:	7811      	ldrb	r1, [r2, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	0010      	movs	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	e001      	b.n	80081c2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081be:	2302      	movs	r3, #2
 80081c0:	e000      	b.n	80081c4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	0018      	movs	r0, r3
 80081c6:	46bd      	mov	sp, r7
 80081c8:	b006      	add	sp, #24
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	200b      	movs	r0, #11
 80081d8:	183b      	adds	r3, r7, r0
 80081da:	1c0a      	adds	r2, r1, #0
 80081dc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081de:	183b      	adds	r3, r7, r0
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d000      	beq.n	80081e8 <USBD_LL_DataInStage+0x1c>
 80081e6:	e08e      	b.n	8008306 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3314      	adds	r3, #20
 80081ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	23a5      	movs	r3, #165	; 0xa5
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	58d3      	ldr	r3, [r2, r3]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d164      	bne.n	80082c4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	429a      	cmp	r2, r3
 8008204:	d915      	bls.n	8008232 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	b29a      	uxth	r2, r3
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	0018      	movs	r0, r3
 8008220:	f000 fff6 	bl	8009210 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	2300      	movs	r3, #0
 8008228:	2200      	movs	r2, #0
 800822a:	2100      	movs	r1, #0
 800822c:	f001 fd10 	bl	8009c50 <USBD_LL_PrepareReceive>
 8008230:	e059      	b.n	80082e6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	0019      	movs	r1, r3
 800823c:	0010      	movs	r0, r2
 800823e:	f7f7 ffe9 	bl	8000214 <__aeabi_uidivmod>
 8008242:	1e0b      	subs	r3, r1, #0
 8008244:	d11f      	bne.n	8008286 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800824e:	429a      	cmp	r2, r3
 8008250:	d319      	bcc.n	8008286 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	23a6      	movs	r3, #166	; 0xa6
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800825e:	429a      	cmp	r2, r3
 8008260:	d211      	bcs.n	8008286 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	0018      	movs	r0, r3
 800826a:	f000 ffd1 	bl	8009210 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	23a6      	movs	r3, #166	; 0xa6
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	2100      	movs	r1, #0
 8008276:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	f001 fce6 	bl	8009c50 <USBD_LL_PrepareReceive>
 8008284:	e02f      	b.n	80082e6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	23ad      	movs	r3, #173	; 0xad
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	58d3      	ldr	r3, [r2, r3]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00d      	beq.n	80082b0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	23a7      	movs	r3, #167	; 0xa7
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800829c:	2b03      	cmp	r3, #3
 800829e:	d107      	bne.n	80082b0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	23ad      	movs	r3, #173	; 0xad
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	58d3      	ldr	r3, [r2, r3]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	0010      	movs	r0, r2
 80082ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2180      	movs	r1, #128	; 0x80
 80082b4:	0018      	movs	r0, r3
 80082b6:	f001 fbde 	bl	8009a76 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	0018      	movs	r0, r3
 80082be:	f001 f805 	bl	80092cc <USBD_CtlReceiveStatus>
 80082c2:	e010      	b.n	80082e6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	23a5      	movs	r3, #165	; 0xa5
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	58d3      	ldr	r3, [r2, r3]
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d005      	beq.n	80082dc <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	23a5      	movs	r3, #165	; 0xa5
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2180      	movs	r1, #128	; 0x80
 80082e0:	0018      	movs	r0, r3
 80082e2:	f001 fbc8 	bl	8009a76 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	23a8      	movs	r3, #168	; 0xa8
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	5cd3      	ldrb	r3, [r2, r3]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d124      	bne.n	800833c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7ff fe43 	bl	8007f80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	23a8      	movs	r3, #168	; 0xa8
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	2100      	movs	r1, #0
 8008302:	54d1      	strb	r1, [r2, r3]
 8008304:	e01a      	b.n	800833c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	23ad      	movs	r3, #173	; 0xad
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	58d3      	ldr	r3, [r2, r3]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d011      	beq.n	8008338 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	23a7      	movs	r3, #167	; 0xa7
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800831c:	2b03      	cmp	r3, #3
 800831e:	d10b      	bne.n	8008338 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	23ad      	movs	r3, #173	; 0xad
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	58d3      	ldr	r3, [r2, r3]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	220b      	movs	r2, #11
 800832c:	18ba      	adds	r2, r7, r2
 800832e:	7811      	ldrb	r1, [r2, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	0010      	movs	r0, r2
 8008334:	4798      	blx	r3
 8008336:	e001      	b.n	800833c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	e000      	b.n	800833e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	0018      	movs	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	b006      	add	sp, #24
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	2340      	movs	r3, #64	; 0x40
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	f001 fb2b 	bl	80099b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	23ac      	movs	r3, #172	; 0xac
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	2101      	movs	r1, #1
 8008362:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	23b2      	movs	r3, #178	; 0xb2
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	2140      	movs	r1, #64	; 0x40
 800836c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	2340      	movs	r3, #64	; 0x40
 8008372:	2200      	movs	r2, #0
 8008374:	2180      	movs	r1, #128	; 0x80
 8008376:	f001 fb1b 	bl	80099b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2240      	movs	r2, #64	; 0x40
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	23a7      	movs	r3, #167	; 0xa7
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	2101      	movs	r1, #1
 800838e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	23a5      	movs	r3, #165	; 0xa5
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	2100      	movs	r1, #0
 8008398:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	23a9      	movs	r3, #169	; 0xa9
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	2100      	movs	r1, #0
 80083a8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	23ae      	movs	r3, #174	; 0xae
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	58d3      	ldr	r3, [r2, r3]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	23ad      	movs	r3, #173	; 0xad
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	58d3      	ldr	r3, [r2, r3]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	b2d9      	uxtb	r1, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	0018      	movs	r0, r3
 80083ca:	4790      	blx	r2
  }

  return USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	0018      	movs	r0, r3
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b002      	add	sp, #8
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	000a      	movs	r2, r1
 80083e0:	1cfb      	adds	r3, r7, #3
 80083e2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	1cfa      	adds	r2, r7, #3
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	0018      	movs	r0, r3
 80083f0:	46bd      	mov	sp, r7
 80083f2:	b002      	add	sp, #8
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	23a7      	movs	r3, #167	; 0xa7
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	5cd1      	ldrb	r1, [r2, r3]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a06      	ldr	r2, [pc, #24]	; (8008424 <USBD_LL_Suspend+0x2c>)
 800840c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	23a7      	movs	r3, #167	; 0xa7
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	2104      	movs	r1, #4
 8008416:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	0018      	movs	r0, r3
 800841c:	46bd      	mov	sp, r7
 800841e:	b002      	add	sp, #8
 8008420:	bd80      	pop	{r7, pc}
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	0000029d 	.word	0x0000029d

08008428 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	23a7      	movs	r3, #167	; 0xa7
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	5cd3      	ldrb	r3, [r2, r3]
 8008438:	2b04      	cmp	r3, #4
 800843a:	d106      	bne.n	800844a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a05      	ldr	r2, [pc, #20]	; (8008454 <USBD_LL_Resume+0x2c>)
 8008440:	5c99      	ldrb	r1, [r3, r2]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	23a7      	movs	r3, #167	; 0xa7
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	0018      	movs	r0, r3
 800844e:	46bd      	mov	sp, r7
 8008450:	b002      	add	sp, #8
 8008452:	bd80      	pop	{r7, pc}
 8008454:	0000029d 	.word	0x0000029d

08008458 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	23a7      	movs	r3, #167	; 0xa7
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	5cd3      	ldrb	r3, [r2, r3]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d10e      	bne.n	800848a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	23ad      	movs	r3, #173	; 0xad
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	58d3      	ldr	r3, [r2, r3]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d007      	beq.n	800848a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	23ad      	movs	r3, #173	; 0xad
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	58d3      	ldr	r3, [r2, r3]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	0010      	movs	r0, r2
 8008488:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	0018      	movs	r0, r3
 800848e:	46bd      	mov	sp, r7
 8008490:	b002      	add	sp, #8
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	230f      	movs	r3, #15
 80084a0:	18fb      	adds	r3, r7, r3
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	001a      	movs	r2, r3
 80084ac:	2360      	movs	r3, #96	; 0x60
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b20      	cmp	r3, #32
 80084b2:	d004      	beq.n	80084be <USBD_StdDevReq+0x2a>
 80084b4:	2b40      	cmp	r3, #64	; 0x40
 80084b6:	d002      	beq.n	80084be <USBD_StdDevReq+0x2a>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <USBD_StdDevReq+0x3e>
 80084bc:	e04b      	b.n	8008556 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	23ad      	movs	r3, #173	; 0xad
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	58d3      	ldr	r3, [r2, r3]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	0010      	movs	r0, r2
 80084ce:	4798      	blx	r3
      break;
 80084d0:	e048      	b.n	8008564 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	2b09      	cmp	r3, #9
 80084d8:	d835      	bhi.n	8008546 <USBD_StdDevReq+0xb2>
 80084da:	009a      	lsls	r2, r3, #2
 80084dc:	4b25      	ldr	r3, [pc, #148]	; (8008574 <USBD_StdDevReq+0xe0>)
 80084de:	18d3      	adds	r3, r2, r3
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0011      	movs	r1, r2
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 fa5a 	bl	80089a4 <USBD_GetDescriptor>
          break;
 80084f0:	e030      	b.n	8008554 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	0011      	movs	r1, r2
 80084f8:	0018      	movs	r0, r3
 80084fa:	f000 fc07 	bl	8008d0c <USBD_SetAddress>
          break;
 80084fe:	e029      	b.n	8008554 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	0011      	movs	r1, r2
 8008506:	0018      	movs	r0, r3
 8008508:	f000 fc54 	bl	8008db4 <USBD_SetConfig>
          break;
 800850c:	e022      	b.n	8008554 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	0011      	movs	r1, r2
 8008514:	0018      	movs	r0, r3
 8008516:	f000 fcf1 	bl	8008efc <USBD_GetConfig>
          break;
 800851a:	e01b      	b.n	8008554 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	0011      	movs	r1, r2
 8008522:	0018      	movs	r0, r3
 8008524:	f000 fd24 	bl	8008f70 <USBD_GetStatus>
          break;
 8008528:	e014      	b.n	8008554 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	0011      	movs	r1, r2
 8008530:	0018      	movs	r0, r3
 8008532:	f000 fd57 	bl	8008fe4 <USBD_SetFeature>
          break;
 8008536:	e00d      	b.n	8008554 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	0011      	movs	r1, r2
 800853e:	0018      	movs	r0, r3
 8008540:	f000 fd66 	bl	8009010 <USBD_ClrFeature>
          break;
 8008544:	e006      	b.n	8008554 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	0011      	movs	r1, r2
 800854c:	0018      	movs	r0, r3
 800854e:	f000 fdc0 	bl	80090d2 <USBD_CtlError>
          break;
 8008552:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008554:	e006      	b.n	8008564 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	0011      	movs	r1, r2
 800855c:	0018      	movs	r0, r3
 800855e:	f000 fdb8 	bl	80090d2 <USBD_CtlError>
      break;
 8008562:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008564:	230f      	movs	r3, #15
 8008566:	18fb      	adds	r3, r7, r3
 8008568:	781b      	ldrb	r3, [r3, #0]
}
 800856a:	0018      	movs	r0, r3
 800856c:	46bd      	mov	sp, r7
 800856e:	b004      	add	sp, #16
 8008570:	bd80      	pop	{r7, pc}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	08009f2c 	.word	0x08009f2c

08008578 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008578:	b590      	push	{r4, r7, lr}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008582:	230f      	movs	r3, #15
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	001a      	movs	r2, r3
 8008590:	2360      	movs	r3, #96	; 0x60
 8008592:	4013      	ands	r3, r2
 8008594:	2b20      	cmp	r3, #32
 8008596:	d003      	beq.n	80085a0 <USBD_StdItfReq+0x28>
 8008598:	2b40      	cmp	r3, #64	; 0x40
 800859a:	d001      	beq.n	80085a0 <USBD_StdItfReq+0x28>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d136      	bne.n	800860e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	23a7      	movs	r3, #167	; 0xa7
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	5cd3      	ldrb	r3, [r2, r3]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d826      	bhi.n	80085fc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	889b      	ldrh	r3, [r3, #4]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d81a      	bhi.n	80085ee <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	23ad      	movs	r3, #173	; 0xad
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	58d3      	ldr	r3, [r2, r3]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	220f      	movs	r2, #15
 80085c4:	18bc      	adds	r4, r7, r2
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	0010      	movs	r0, r2
 80085cc:	4798      	blx	r3
 80085ce:	0003      	movs	r3, r0
 80085d0:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d117      	bne.n	800860a <USBD_StdItfReq+0x92>
 80085da:	230f      	movs	r3, #15
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d112      	bne.n	800860a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	0018      	movs	r0, r3
 80085e8:	f000 fe5c 	bl	80092a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085ec:	e00d      	b.n	800860a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	0011      	movs	r1, r2
 80085f4:	0018      	movs	r0, r3
 80085f6:	f000 fd6c 	bl	80090d2 <USBD_CtlError>
          break;
 80085fa:	e006      	b.n	800860a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	0011      	movs	r1, r2
 8008602:	0018      	movs	r0, r3
 8008604:	f000 fd65 	bl	80090d2 <USBD_CtlError>
          break;
 8008608:	e000      	b.n	800860c <USBD_StdItfReq+0x94>
          break;
 800860a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800860c:	e006      	b.n	800861c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	0011      	movs	r1, r2
 8008614:	0018      	movs	r0, r3
 8008616:	f000 fd5c 	bl	80090d2 <USBD_CtlError>
      break;
 800861a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	0018      	movs	r0, r3
 8008620:	46bd      	mov	sp, r7
 8008622:	b005      	add	sp, #20
 8008624:	bd90      	pop	{r4, r7, pc}

08008626 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008626:	b5b0      	push	{r4, r5, r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008630:	230f      	movs	r3, #15
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	889a      	ldrh	r2, [r3, #4]
 800863c:	230e      	movs	r3, #14
 800863e:	18fb      	adds	r3, r7, r3
 8008640:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	001a      	movs	r2, r3
 8008648:	2360      	movs	r3, #96	; 0x60
 800864a:	4013      	ands	r3, r2
 800864c:	2b20      	cmp	r3, #32
 800864e:	d004      	beq.n	800865a <USBD_StdEPReq+0x34>
 8008650:	2b40      	cmp	r3, #64	; 0x40
 8008652:	d002      	beq.n	800865a <USBD_StdEPReq+0x34>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <USBD_StdEPReq+0x48>
 8008658:	e195      	b.n	8008986 <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	23ad      	movs	r3, #173	; 0xad
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	58d3      	ldr	r3, [r2, r3]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	0010      	movs	r0, r2
 800866a:	4798      	blx	r3
      break;
 800866c:	e192      	b.n	8008994 <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	001a      	movs	r2, r3
 8008674:	2360      	movs	r3, #96	; 0x60
 8008676:	4013      	ands	r3, r2
 8008678:	2b20      	cmp	r3, #32
 800867a:	d10f      	bne.n	800869c <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	23ad      	movs	r3, #173	; 0xad
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	58d3      	ldr	r3, [r2, r3]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	250f      	movs	r5, #15
 8008688:	197c      	adds	r4, r7, r5
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	0010      	movs	r0, r2
 8008690:	4798      	blx	r3
 8008692:	0003      	movs	r3, r0
 8008694:	7023      	strb	r3, [r4, #0]

        return ret;
 8008696:	197b      	adds	r3, r7, r5
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	e17e      	b.n	800899a <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d054      	beq.n	800874e <USBD_StdEPReq+0x128>
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d003      	beq.n	80086b0 <USBD_StdEPReq+0x8a>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d100      	bne.n	80086ae <USBD_StdEPReq+0x88>
 80086ac:	e097      	b.n	80087de <USBD_StdEPReq+0x1b8>
 80086ae:	e162      	b.n	8008976 <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	23a7      	movs	r3, #167	; 0xa7
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	5cd3      	ldrb	r3, [r2, r3]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d002      	beq.n	80086c2 <USBD_StdEPReq+0x9c>
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d01f      	beq.n	8008700 <USBD_StdEPReq+0xda>
 80086c0:	e03d      	b.n	800873e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086c2:	230e      	movs	r3, #14
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d012      	beq.n	80086f2 <USBD_StdEPReq+0xcc>
 80086cc:	230e      	movs	r3, #14
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b80      	cmp	r3, #128	; 0x80
 80086d4:	d00d      	beq.n	80086f2 <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086d6:	230e      	movs	r3, #14
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	781a      	ldrb	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	0011      	movs	r1, r2
 80086e0:	0018      	movs	r0, r3
 80086e2:	f001 f9c8 	bl	8009a76 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2180      	movs	r1, #128	; 0x80
 80086ea:	0018      	movs	r0, r3
 80086ec:	f001 f9c3 	bl	8009a76 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086f0:	e02c      	b.n	800874c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	0011      	movs	r1, r2
 80086f8:	0018      	movs	r0, r3
 80086fa:	f000 fcea 	bl	80090d2 <USBD_CtlError>
              break;
 80086fe:	e025      	b.n	800874c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	885b      	ldrh	r3, [r3, #2]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d115      	bne.n	8008734 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008708:	230e      	movs	r3, #14
 800870a:	18fb      	adds	r3, r7, r3
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d010      	beq.n	8008734 <USBD_StdEPReq+0x10e>
 8008712:	230e      	movs	r3, #14
 8008714:	18fb      	adds	r3, r7, r3
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b80      	cmp	r3, #128	; 0x80
 800871a:	d00b      	beq.n	8008734 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	88db      	ldrh	r3, [r3, #6]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d107      	bne.n	8008734 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008724:	230e      	movs	r3, #14
 8008726:	18fb      	adds	r3, r7, r3
 8008728:	781a      	ldrb	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	0011      	movs	r1, r2
 800872e:	0018      	movs	r0, r3
 8008730:	f001 f9a1 	bl	8009a76 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	0018      	movs	r0, r3
 8008738:	f000 fdb4 	bl	80092a4 <USBD_CtlSendStatus>

              break;
 800873c:	e006      	b.n	800874c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	0011      	movs	r1, r2
 8008744:	0018      	movs	r0, r3
 8008746:	f000 fcc4 	bl	80090d2 <USBD_CtlError>
              break;
 800874a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800874c:	e11a      	b.n	8008984 <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	23a7      	movs	r3, #167	; 0xa7
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	5cd3      	ldrb	r3, [r2, r3]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d002      	beq.n	8008760 <USBD_StdEPReq+0x13a>
 800875a:	2b03      	cmp	r3, #3
 800875c:	d01f      	beq.n	800879e <USBD_StdEPReq+0x178>
 800875e:	e035      	b.n	80087cc <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008760:	230e      	movs	r3, #14
 8008762:	18fb      	adds	r3, r7, r3
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d012      	beq.n	8008790 <USBD_StdEPReq+0x16a>
 800876a:	230e      	movs	r3, #14
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d00d      	beq.n	8008790 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008774:	230e      	movs	r3, #14
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	0011      	movs	r1, r2
 800877e:	0018      	movs	r0, r3
 8008780:	f001 f979 	bl	8009a76 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2180      	movs	r1, #128	; 0x80
 8008788:	0018      	movs	r0, r3
 800878a:	f001 f974 	bl	8009a76 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800878e:	e025      	b.n	80087dc <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	0011      	movs	r1, r2
 8008796:	0018      	movs	r0, r3
 8008798:	f000 fc9b 	bl	80090d2 <USBD_CtlError>
              break;
 800879c:	e01e      	b.n	80087dc <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d119      	bne.n	80087da <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087a6:	230e      	movs	r3, #14
 80087a8:	18fb      	adds	r3, r7, r3
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	227f      	movs	r2, #127	; 0x7f
 80087ae:	4013      	ands	r3, r2
 80087b0:	d007      	beq.n	80087c2 <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80087b2:	230e      	movs	r3, #14
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	0011      	movs	r1, r2
 80087bc:	0018      	movs	r0, r3
 80087be:	f001 f986 	bl	8009ace <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	0018      	movs	r0, r3
 80087c6:	f000 fd6d 	bl	80092a4 <USBD_CtlSendStatus>
              }
              break;
 80087ca:	e006      	b.n	80087da <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	0011      	movs	r1, r2
 80087d2:	0018      	movs	r0, r3
 80087d4:	f000 fc7d 	bl	80090d2 <USBD_CtlError>
              break;
 80087d8:	e000      	b.n	80087dc <USBD_StdEPReq+0x1b6>
              break;
 80087da:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80087dc:	e0d2      	b.n	8008984 <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	23a7      	movs	r3, #167	; 0xa7
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	5cd3      	ldrb	r3, [r2, r3]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d002      	beq.n	80087f0 <USBD_StdEPReq+0x1ca>
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d03e      	beq.n	800886c <USBD_StdEPReq+0x246>
 80087ee:	e0ba      	b.n	8008966 <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087f0:	230e      	movs	r3, #14
 80087f2:	18fb      	adds	r3, r7, r3
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <USBD_StdEPReq+0x1ec>
 80087fa:	230e      	movs	r3, #14
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b80      	cmp	r3, #128	; 0x80
 8008802:	d006      	beq.n	8008812 <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	0011      	movs	r1, r2
 800880a:	0018      	movs	r0, r3
 800880c:	f000 fc61 	bl	80090d2 <USBD_CtlError>
                break;
 8008810:	e0b0      	b.n	8008974 <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008812:	230e      	movs	r3, #14
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	b25b      	sxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	da0d      	bge.n	800883a <USBD_StdEPReq+0x214>
 800881e:	230e      	movs	r3, #14
 8008820:	18fb      	adds	r3, r7, r3
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	227f      	movs	r2, #127	; 0x7f
 8008826:	401a      	ands	r2, r3
 8008828:	0013      	movs	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	189b      	adds	r3, r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	3310      	adds	r3, #16
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	18d3      	adds	r3, r2, r3
 8008836:	3304      	adds	r3, #4
 8008838:	e00d      	b.n	8008856 <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800883a:	230e      	movs	r3, #14
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	227f      	movs	r2, #127	; 0x7f
 8008842:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008844:	0013      	movs	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	189b      	adds	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	3351      	adds	r3, #81	; 0x51
 800884e:	33ff      	adds	r3, #255	; 0xff
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	18d3      	adds	r3, r2, r3
 8008854:	3304      	adds	r3, #4
 8008856:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	0018      	movs	r0, r3
 8008866:	f000 fcb3 	bl	80091d0 <USBD_CtlSendData>
              break;
 800886a:	e083      	b.n	8008974 <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800886c:	230e      	movs	r3, #14
 800886e:	18fb      	adds	r3, r7, r3
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b25b      	sxtb	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	da15      	bge.n	80088a4 <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008878:	230e      	movs	r3, #14
 800887a:	18fb      	adds	r3, r7, r3
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	220f      	movs	r2, #15
 8008880:	401a      	ands	r2, r3
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	0013      	movs	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	189b      	adds	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	18cb      	adds	r3, r1, r3
 800888e:	3318      	adds	r3, #24
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d11e      	bne.n	80088d4 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	0011      	movs	r1, r2
 800889c:	0018      	movs	r0, r3
 800889e:	f000 fc18 	bl	80090d2 <USBD_CtlError>
                  break;
 80088a2:	e067      	b.n	8008974 <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088a4:	230e      	movs	r3, #14
 80088a6:	18fb      	adds	r3, r7, r3
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	220f      	movs	r2, #15
 80088ac:	401a      	ands	r2, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	23ac      	movs	r3, #172	; 0xac
 80088b2:	0059      	lsls	r1, r3, #1
 80088b4:	0013      	movs	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	189b      	adds	r3, r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	18c3      	adds	r3, r0, r3
 80088be:	185b      	adds	r3, r3, r1
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	0011      	movs	r1, r2
 80088cc:	0018      	movs	r0, r3
 80088ce:	f000 fc00 	bl	80090d2 <USBD_CtlError>
                  break;
 80088d2:	e04f      	b.n	8008974 <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d4:	230e      	movs	r3, #14
 80088d6:	18fb      	adds	r3, r7, r3
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	b25b      	sxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	da0d      	bge.n	80088fc <USBD_StdEPReq+0x2d6>
 80088e0:	230e      	movs	r3, #14
 80088e2:	18fb      	adds	r3, r7, r3
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	227f      	movs	r2, #127	; 0x7f
 80088e8:	401a      	ands	r2, r3
 80088ea:	0013      	movs	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	189b      	adds	r3, r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	3310      	adds	r3, #16
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	18d3      	adds	r3, r2, r3
 80088f8:	3304      	adds	r3, #4
 80088fa:	e00d      	b.n	8008918 <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088fc:	230e      	movs	r3, #14
 80088fe:	18fb      	adds	r3, r7, r3
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	227f      	movs	r2, #127	; 0x7f
 8008904:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008906:	0013      	movs	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	189b      	adds	r3, r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	3351      	adds	r3, #81	; 0x51
 8008910:	33ff      	adds	r3, #255	; 0xff
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	18d3      	adds	r3, r2, r3
 8008916:	3304      	adds	r3, #4
 8008918:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800891a:	230e      	movs	r3, #14
 800891c:	18fb      	adds	r3, r7, r3
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <USBD_StdEPReq+0x308>
 8008924:	230e      	movs	r3, #14
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b80      	cmp	r3, #128	; 0x80
 800892c:	d103      	bne.n	8008936 <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e010      	b.n	8008958 <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008936:	230e      	movs	r3, #14
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	0011      	movs	r1, r2
 8008940:	0018      	movs	r0, r3
 8008942:	f001 f8f0 	bl	8009b26 <USBD_LL_IsStallEP>
 8008946:	1e03      	subs	r3, r0, #0
 8008948:	d003      	beq.n	8008952 <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e002      	b.n	8008958 <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	0018      	movs	r0, r3
 8008960:	f000 fc36 	bl	80091d0 <USBD_CtlSendData>
              break;
 8008964:	e006      	b.n	8008974 <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	0011      	movs	r1, r2
 800896c:	0018      	movs	r0, r3
 800896e:	f000 fbb0 	bl	80090d2 <USBD_CtlError>
              break;
 8008972:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008974:	e006      	b.n	8008984 <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	0011      	movs	r1, r2
 800897c:	0018      	movs	r0, r3
 800897e:	f000 fba8 	bl	80090d2 <USBD_CtlError>
          break;
 8008982:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008984:	e006      	b.n	8008994 <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	0011      	movs	r1, r2
 800898c:	0018      	movs	r0, r3
 800898e:	f000 fba0 	bl	80090d2 <USBD_CtlError>
      break;
 8008992:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008994:	230f      	movs	r3, #15
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	781b      	ldrb	r3, [r3, #0]
}
 800899a:	0018      	movs	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	b004      	add	sp, #16
 80089a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080089a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089ae:	2308      	movs	r3, #8
 80089b0:	18fb      	adds	r3, r7, r3
 80089b2:	2200      	movs	r2, #0
 80089b4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089ba:	230b      	movs	r3, #11
 80089bc:	18fb      	adds	r3, r7, r3
 80089be:	2200      	movs	r2, #0
 80089c0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	2b07      	cmp	r3, #7
 80089cc:	d900      	bls.n	80089d0 <USBD_GetDescriptor+0x2c>
 80089ce:	e159      	b.n	8008c84 <USBD_GetDescriptor+0x2e0>
 80089d0:	009a      	lsls	r2, r3, #2
 80089d2:	4bcc      	ldr	r3, [pc, #816]	; (8008d04 <USBD_GetDescriptor+0x360>)
 80089d4:	18d3      	adds	r3, r2, r3
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	23ac      	movs	r3, #172	; 0xac
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	58d3      	ldr	r3, [r2, r3]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	2108      	movs	r1, #8
 80089ea:	1879      	adds	r1, r7, r1
 80089ec:	0010      	movs	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	0003      	movs	r3, r0
 80089f2:	60fb      	str	r3, [r7, #12]
      break;
 80089f4:	e153      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	7c1b      	ldrb	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10f      	bne.n	8008a1e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	23ad      	movs	r3, #173	; 0xad
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	58d3      	ldr	r3, [r2, r3]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	2208      	movs	r2, #8
 8008a0a:	18ba      	adds	r2, r7, r2
 8008a0c:	0010      	movs	r0, r2
 8008a0e:	4798      	blx	r3
 8008a10:	0003      	movs	r3, r0
 8008a12:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	2202      	movs	r2, #2
 8008a1a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a1c:	e13f      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	23ad      	movs	r3, #173	; 0xad
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	58d3      	ldr	r3, [r2, r3]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	2208      	movs	r2, #8
 8008a2a:	18ba      	adds	r2, r7, r2
 8008a2c:	0010      	movs	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	0003      	movs	r3, r0
 8008a32:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	2202      	movs	r2, #2
 8008a3a:	701a      	strb	r2, [r3, #0]
      break;
 8008a3c:	e12f      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	885b      	ldrh	r3, [r3, #2]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d900      	bls.n	8008a4a <USBD_GetDescriptor+0xa6>
 8008a48:	e0d0      	b.n	8008bec <USBD_GetDescriptor+0x248>
 8008a4a:	009a      	lsls	r2, r3, #2
 8008a4c:	4bae      	ldr	r3, [pc, #696]	; (8008d08 <USBD_GetDescriptor+0x364>)
 8008a4e:	18d3      	adds	r3, r2, r3
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	23ac      	movs	r3, #172	; 0xac
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	58d3      	ldr	r3, [r2, r3]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00d      	beq.n	8008a7e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	23ac      	movs	r3, #172	; 0xac
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	58d3      	ldr	r3, [r2, r3]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	7c12      	ldrb	r2, [r2, #16]
 8008a70:	2108      	movs	r1, #8
 8008a72:	1879      	adds	r1, r7, r1
 8008a74:	0010      	movs	r0, r2
 8008a76:	4798      	blx	r3
 8008a78:	0003      	movs	r3, r0
 8008a7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a7c:	e0c3      	b.n	8008c06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	0011      	movs	r1, r2
 8008a84:	0018      	movs	r0, r3
 8008a86:	f000 fb24 	bl	80090d2 <USBD_CtlError>
            err++;
 8008a8a:	210b      	movs	r1, #11
 8008a8c:	187b      	adds	r3, r7, r1
 8008a8e:	781a      	ldrb	r2, [r3, #0]
 8008a90:	187b      	adds	r3, r7, r1
 8008a92:	3201      	adds	r2, #1
 8008a94:	701a      	strb	r2, [r3, #0]
          break;
 8008a96:	e0b6      	b.n	8008c06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	23ac      	movs	r3, #172	; 0xac
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	58d3      	ldr	r3, [r2, r3]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00d      	beq.n	8008ac2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	23ac      	movs	r3, #172	; 0xac
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	58d3      	ldr	r3, [r2, r3]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	7c12      	ldrb	r2, [r2, #16]
 8008ab4:	2108      	movs	r1, #8
 8008ab6:	1879      	adds	r1, r7, r1
 8008ab8:	0010      	movs	r0, r2
 8008aba:	4798      	blx	r3
 8008abc:	0003      	movs	r3, r0
 8008abe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac0:	e0a1      	b.n	8008c06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	0011      	movs	r1, r2
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f000 fb02 	bl	80090d2 <USBD_CtlError>
            err++;
 8008ace:	210b      	movs	r1, #11
 8008ad0:	187b      	adds	r3, r7, r1
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	187b      	adds	r3, r7, r1
 8008ad6:	3201      	adds	r2, #1
 8008ad8:	701a      	strb	r2, [r3, #0]
          break;
 8008ada:	e094      	b.n	8008c06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	23ac      	movs	r3, #172	; 0xac
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	58d3      	ldr	r3, [r2, r3]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00d      	beq.n	8008b06 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	23ac      	movs	r3, #172	; 0xac
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	58d3      	ldr	r3, [r2, r3]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	7c12      	ldrb	r2, [r2, #16]
 8008af8:	2108      	movs	r1, #8
 8008afa:	1879      	adds	r1, r7, r1
 8008afc:	0010      	movs	r0, r2
 8008afe:	4798      	blx	r3
 8008b00:	0003      	movs	r3, r0
 8008b02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b04:	e07f      	b.n	8008c06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	0011      	movs	r1, r2
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f000 fae0 	bl	80090d2 <USBD_CtlError>
            err++;
 8008b12:	210b      	movs	r1, #11
 8008b14:	187b      	adds	r3, r7, r1
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	187b      	adds	r3, r7, r1
 8008b1a:	3201      	adds	r2, #1
 8008b1c:	701a      	strb	r2, [r3, #0]
          break;
 8008b1e:	e072      	b.n	8008c06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	23ac      	movs	r3, #172	; 0xac
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	58d3      	ldr	r3, [r2, r3]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00d      	beq.n	8008b4a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	23ac      	movs	r3, #172	; 0xac
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	58d3      	ldr	r3, [r2, r3]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7c12      	ldrb	r2, [r2, #16]
 8008b3c:	2108      	movs	r1, #8
 8008b3e:	1879      	adds	r1, r7, r1
 8008b40:	0010      	movs	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	0003      	movs	r3, r0
 8008b46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b48:	e05d      	b.n	8008c06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	0011      	movs	r1, r2
 8008b50:	0018      	movs	r0, r3
 8008b52:	f000 fabe 	bl	80090d2 <USBD_CtlError>
            err++;
 8008b56:	210b      	movs	r1, #11
 8008b58:	187b      	adds	r3, r7, r1
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	187b      	adds	r3, r7, r1
 8008b5e:	3201      	adds	r2, #1
 8008b60:	701a      	strb	r2, [r3, #0]
          break;
 8008b62:	e050      	b.n	8008c06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	23ac      	movs	r3, #172	; 0xac
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	58d3      	ldr	r3, [r2, r3]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00d      	beq.n	8008b8e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	23ac      	movs	r3, #172	; 0xac
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	58d3      	ldr	r3, [r2, r3]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	7c12      	ldrb	r2, [r2, #16]
 8008b80:	2108      	movs	r1, #8
 8008b82:	1879      	adds	r1, r7, r1
 8008b84:	0010      	movs	r0, r2
 8008b86:	4798      	blx	r3
 8008b88:	0003      	movs	r3, r0
 8008b8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b8c:	e03b      	b.n	8008c06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	0011      	movs	r1, r2
 8008b94:	0018      	movs	r0, r3
 8008b96:	f000 fa9c 	bl	80090d2 <USBD_CtlError>
            err++;
 8008b9a:	210b      	movs	r1, #11
 8008b9c:	187b      	adds	r3, r7, r1
 8008b9e:	781a      	ldrb	r2, [r3, #0]
 8008ba0:	187b      	adds	r3, r7, r1
 8008ba2:	3201      	adds	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
          break;
 8008ba6:	e02e      	b.n	8008c06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	23ac      	movs	r3, #172	; 0xac
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	58d3      	ldr	r3, [r2, r3]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00d      	beq.n	8008bd2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	23ac      	movs	r3, #172	; 0xac
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	58d3      	ldr	r3, [r2, r3]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	7c12      	ldrb	r2, [r2, #16]
 8008bc4:	2108      	movs	r1, #8
 8008bc6:	1879      	adds	r1, r7, r1
 8008bc8:	0010      	movs	r0, r2
 8008bca:	4798      	blx	r3
 8008bcc:	0003      	movs	r3, r0
 8008bce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bd0:	e019      	b.n	8008c06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	0011      	movs	r1, r2
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f000 fa7a 	bl	80090d2 <USBD_CtlError>
            err++;
 8008bde:	210b      	movs	r1, #11
 8008be0:	187b      	adds	r3, r7, r1
 8008be2:	781a      	ldrb	r2, [r3, #0]
 8008be4:	187b      	adds	r3, r7, r1
 8008be6:	3201      	adds	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
          break;
 8008bea:	e00c      	b.n	8008c06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	0011      	movs	r1, r2
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f000 fa6d 	bl	80090d2 <USBD_CtlError>
          err++;
 8008bf8:	210b      	movs	r1, #11
 8008bfa:	187b      	adds	r3, r7, r1
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	3201      	adds	r2, #1
 8008c02:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008c04:	e04b      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>
 8008c06:	e04a      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7c1b      	ldrb	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10b      	bne.n	8008c28 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	23ad      	movs	r3, #173	; 0xad
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	58d3      	ldr	r3, [r2, r3]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	18ba      	adds	r2, r7, r2
 8008c1e:	0010      	movs	r0, r2
 8008c20:	4798      	blx	r3
 8008c22:	0003      	movs	r3, r0
 8008c24:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c26:	e03a      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	0011      	movs	r1, r2
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f000 fa4f 	bl	80090d2 <USBD_CtlError>
        err++;
 8008c34:	210b      	movs	r1, #11
 8008c36:	187b      	adds	r3, r7, r1
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	3201      	adds	r2, #1
 8008c3e:	701a      	strb	r2, [r3, #0]
      break;
 8008c40:	e02d      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7c1b      	ldrb	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10f      	bne.n	8008c6a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	23ad      	movs	r3, #173	; 0xad
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	58d3      	ldr	r3, [r2, r3]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	2208      	movs	r2, #8
 8008c56:	18ba      	adds	r2, r7, r2
 8008c58:	0010      	movs	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	0003      	movs	r3, r0
 8008c5e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3301      	adds	r3, #1
 8008c64:	2207      	movs	r2, #7
 8008c66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c68:	e019      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	0011      	movs	r1, r2
 8008c70:	0018      	movs	r0, r3
 8008c72:	f000 fa2e 	bl	80090d2 <USBD_CtlError>
        err++;
 8008c76:	210b      	movs	r1, #11
 8008c78:	187b      	adds	r3, r7, r1
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	187b      	adds	r3, r7, r1
 8008c7e:	3201      	adds	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
      break;
 8008c82:	e00c      	b.n	8008c9e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	0011      	movs	r1, r2
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f000 fa21 	bl	80090d2 <USBD_CtlError>
      err++;
 8008c90:	210b      	movs	r1, #11
 8008c92:	187b      	adds	r3, r7, r1
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	187b      	adds	r3, r7, r1
 8008c98:	3201      	adds	r2, #1
 8008c9a:	701a      	strb	r2, [r3, #0]
      break;
 8008c9c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008c9e:	230b      	movs	r3, #11
 8008ca0:	18fb      	adds	r3, r7, r3
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d128      	bne.n	8008cfa <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ca8:	2308      	movs	r3, #8
 8008caa:	18fb      	adds	r3, r7, r3
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d01a      	beq.n	8008ce8 <USBD_GetDescriptor+0x344>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	88db      	ldrh	r3, [r3, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d016      	beq.n	8008ce8 <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88da      	ldrh	r2, [r3, #6]
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	1c18      	adds	r0, r3, #0
 8008cc6:	1c11      	adds	r1, r2, #0
 8008cc8:	b28a      	uxth	r2, r1
 8008cca:	b283      	uxth	r3, r0
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d900      	bls.n	8008cd2 <USBD_GetDescriptor+0x32e>
 8008cd0:	1c01      	adds	r1, r0, #0
 8008cd2:	b28a      	uxth	r2, r1
 8008cd4:	2108      	movs	r1, #8
 8008cd6:	187b      	adds	r3, r7, r1
 8008cd8:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cda:	187b      	adds	r3, r7, r1
 8008cdc:	881a      	ldrh	r2, [r3, #0]
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f000 fa74 	bl	80091d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	88db      	ldrh	r3, [r3, #6]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d105      	bne.n	8008cfc <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f000 fad6 	bl	80092a4 <USBD_CtlSendStatus>
 8008cf8:	e000      	b.n	8008cfc <USBD_GetDescriptor+0x358>
    return;
 8008cfa:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	b004      	add	sp, #16
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	46c0      	nop			; (mov r8, r8)
 8008d04:	08009f54 	.word	0x08009f54
 8008d08:	08009f74 	.word	0x08009f74

08008d0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	889b      	ldrh	r3, [r3, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d13d      	bne.n	8008d9a <USBD_SetAddress+0x8e>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	88db      	ldrh	r3, [r3, #6]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d139      	bne.n	8008d9a <USBD_SetAddress+0x8e>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008d2c:	d835      	bhi.n	8008d9a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	885b      	ldrh	r3, [r3, #2]
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	230f      	movs	r3, #15
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	217f      	movs	r1, #127	; 0x7f
 8008d3a:	400a      	ands	r2, r1
 8008d3c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	23a7      	movs	r3, #167	; 0xa7
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	5cd3      	ldrb	r3, [r2, r3]
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d106      	bne.n	8008d58 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	0011      	movs	r1, r2
 8008d50:	0018      	movs	r0, r3
 8008d52:	f000 f9be 	bl	80090d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	e026      	b.n	8008da6 <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	240f      	movs	r4, #15
 8008d5c:	193a      	adds	r2, r7, r4
 8008d5e:	4914      	ldr	r1, [pc, #80]	; (8008db0 <USBD_SetAddress+0xa4>)
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d64:	193b      	adds	r3, r7, r4
 8008d66:	781a      	ldrb	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	0011      	movs	r1, r2
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f000 ff0b 	bl	8009b88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	0018      	movs	r0, r3
 8008d76:	f000 fa95 	bl	80092a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d7a:	193b      	adds	r3, r7, r4
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d005      	beq.n	8008d8e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	23a7      	movs	r3, #167	; 0xa7
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	2102      	movs	r1, #2
 8008d8a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8c:	e00b      	b.n	8008da6 <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	23a7      	movs	r3, #167	; 0xa7
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	2101      	movs	r1, #1
 8008d96:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d98:	e005      	b.n	8008da6 <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	0011      	movs	r1, r2
 8008da0:	0018      	movs	r0, r3
 8008da2:	f000 f996 	bl	80090d2 <USBD_CtlError>
  }
}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b005      	add	sp, #20
 8008dac:	bd90      	pop	{r4, r7, pc}
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	0000029e 	.word	0x0000029e

08008db4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	4b4c      	ldr	r3, [pc, #304]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008dc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008dc8:	4b4b      	ldr	r3, [pc, #300]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d906      	bls.n	8008dde <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	0011      	movs	r1, r2
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f000 f97b 	bl	80090d2 <USBD_CtlError>
 8008ddc:	e088      	b.n	8008ef0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	23a7      	movs	r3, #167	; 0xa7
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	5cd3      	ldrb	r3, [r2, r3]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d002      	beq.n	8008df0 <USBD_SetConfig+0x3c>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d029      	beq.n	8008e42 <USBD_SetConfig+0x8e>
 8008dee:	e071      	b.n	8008ed4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008df0:	4b41      	ldr	r3, [pc, #260]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01f      	beq.n	8008e38 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008df8:	4b3f      	ldr	r3, [pc, #252]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	001a      	movs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	23a7      	movs	r3, #167	; 0xa7
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	2103      	movs	r1, #3
 8008e0a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e0c:	4b3a      	ldr	r3, [pc, #232]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	0011      	movs	r1, r2
 8008e14:	0018      	movs	r0, r3
 8008e16:	f7ff f8bc 	bl	8007f92 <USBD_SetClassConfig>
 8008e1a:	0003      	movs	r3, r0
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d106      	bne.n	8008e2e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	0011      	movs	r1, r2
 8008e26:	0018      	movs	r0, r3
 8008e28:	f000 f953 	bl	80090d2 <USBD_CtlError>
            return;
 8008e2c:	e060      	b.n	8008ef0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	0018      	movs	r0, r3
 8008e32:	f000 fa37 	bl	80092a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e36:	e05b      	b.n	8008ef0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	f000 fa32 	bl	80092a4 <USBD_CtlSendStatus>
        break;
 8008e40:	e056      	b.n	8008ef0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008e42:	4b2d      	ldr	r3, [pc, #180]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d115      	bne.n	8008e76 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	23a7      	movs	r3, #167	; 0xa7
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	2102      	movs	r1, #2
 8008e52:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008e54:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	001a      	movs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e5e:	4b26      	ldr	r3, [pc, #152]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	0011      	movs	r1, r2
 8008e66:	0018      	movs	r0, r3
 8008e68:	f7ff f8bb 	bl	8007fe2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f000 fa18 	bl	80092a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e74:	e03c      	b.n	8008ef0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008e76:	4b20      	ldr	r3, [pc, #128]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	001a      	movs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d022      	beq.n	8008eca <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	0011      	movs	r1, r2
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7ff f8a7 	bl	8007fe2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e94:	4b18      	ldr	r3, [pc, #96]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	001a      	movs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e9e:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	0011      	movs	r1, r2
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7ff f873 	bl	8007f92 <USBD_SetClassConfig>
 8008eac:	0003      	movs	r3, r0
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d106      	bne.n	8008ec0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	0011      	movs	r1, r2
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f000 f90a 	bl	80090d2 <USBD_CtlError>
            return;
 8008ebe:	e017      	b.n	8008ef0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	f000 f9ee 	bl	80092a4 <USBD_CtlSendStatus>
        break;
 8008ec8:	e012      	b.n	8008ef0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f000 f9e9 	bl	80092a4 <USBD_CtlSendStatus>
        break;
 8008ed2:	e00d      	b.n	8008ef0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	0011      	movs	r1, r2
 8008eda:	0018      	movs	r0, r3
 8008edc:	f000 f8f9 	bl	80090d2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <USBD_SetConfig+0x144>)
 8008ee2:	781a      	ldrb	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	0011      	movs	r1, r2
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f7ff f87a 	bl	8007fe2 <USBD_ClrClassConfig>
        break;
 8008eee:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	b002      	add	sp, #8
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	46c0      	nop			; (mov r8, r8)
 8008ef8:	200001e0 	.word	0x200001e0

08008efc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	88db      	ldrh	r3, [r3, #6]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d006      	beq.n	8008f1c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	0011      	movs	r1, r2
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 f8dc 	bl	80090d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f1a:	e025      	b.n	8008f68 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	23a7      	movs	r3, #167	; 0xa7
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	5cd3      	ldrb	r3, [r2, r3]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	db18      	blt.n	8008f5a <USBD_GetConfig+0x5e>
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	dd02      	ble.n	8008f32 <USBD_GetConfig+0x36>
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d00c      	beq.n	8008f4a <USBD_GetConfig+0x4e>
 8008f30:	e013      	b.n	8008f5a <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	0019      	movs	r1, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	0018      	movs	r0, r3
 8008f44:	f000 f944 	bl	80091d0 <USBD_CtlSendData>
        break;
 8008f48:	e00e      	b.n	8008f68 <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	1d19      	adds	r1, r3, #4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	0018      	movs	r0, r3
 8008f54:	f000 f93c 	bl	80091d0 <USBD_CtlSendData>
        break;
 8008f58:	e006      	b.n	8008f68 <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	0011      	movs	r1, r2
 8008f60:	0018      	movs	r0, r3
 8008f62:	f000 f8b6 	bl	80090d2 <USBD_CtlError>
        break;
 8008f66:	46c0      	nop			; (mov r8, r8)
}
 8008f68:	46c0      	nop			; (mov r8, r8)
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b002      	add	sp, #8
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	23a7      	movs	r3, #167	; 0xa7
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	5cd3      	ldrb	r3, [r2, r3]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d822      	bhi.n	8008fce <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	88db      	ldrh	r3, [r3, #6]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d006      	beq.n	8008f9e <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	0011      	movs	r1, r2
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 f89b 	bl	80090d2 <USBD_CtlError>
        break;
 8008f9c:	e01e      	b.n	8008fdc <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	23a9      	movs	r3, #169	; 0xa9
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	58d3      	ldr	r3, [r2, r3]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	0019      	movs	r1, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f000 f902 	bl	80091d0 <USBD_CtlSendData>
      break;
 8008fcc:	e006      	b.n	8008fdc <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	0011      	movs	r1, r2
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f000 f87c 	bl	80090d2 <USBD_CtlError>
      break;
 8008fda:	46c0      	nop			; (mov r8, r8)
  }
}
 8008fdc:	46c0      	nop			; (mov r8, r8)
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	b002      	add	sp, #8
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	885b      	ldrh	r3, [r3, #2]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d108      	bne.n	8009008 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	23a9      	movs	r3, #169	; 0xa9
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	0018      	movs	r0, r3
 8009004:	f000 f94e 	bl	80092a4 <USBD_CtlSendStatus>
  }
}
 8009008:	46c0      	nop			; (mov r8, r8)
 800900a:	46bd      	mov	sp, r7
 800900c:	b002      	add	sp, #8
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	23a7      	movs	r3, #167	; 0xa7
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	5cd3      	ldrb	r3, [r2, r3]
 8009022:	3b01      	subs	r3, #1
 8009024:	2b02      	cmp	r3, #2
 8009026:	d80d      	bhi.n	8009044 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	885b      	ldrh	r3, [r3, #2]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d110      	bne.n	8009052 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	23a9      	movs	r3, #169	; 0xa9
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	2100      	movs	r1, #0
 8009038:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	0018      	movs	r0, r3
 800903e:	f000 f931 	bl	80092a4 <USBD_CtlSendStatus>
      }
      break;
 8009042:	e006      	b.n	8009052 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	0011      	movs	r1, r2
 800904a:	0018      	movs	r0, r3
 800904c:	f000 f841 	bl	80090d2 <USBD_CtlError>
      break;
 8009050:	e000      	b.n	8009054 <USBD_ClrFeature+0x44>
      break;
 8009052:	46c0      	nop			; (mov r8, r8)
  }
}
 8009054:	46c0      	nop			; (mov r8, r8)
 8009056:	46bd      	mov	sp, r7
 8009058:	b002      	add	sp, #8
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781a      	ldrb	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	785a      	ldrb	r2, [r3, #1]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	3302      	adds	r3, #2
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	b29a      	uxth	r2, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	3303      	adds	r3, #3
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	b29b      	uxth	r3, r3
 8009086:	021b      	lsls	r3, r3, #8
 8009088:	b29b      	uxth	r3, r3
 800908a:	18d3      	adds	r3, r2, r3
 800908c:	b29a      	uxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	3304      	adds	r3, #4
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b29a      	uxth	r2, r3
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	3305      	adds	r3, #5
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	021b      	lsls	r3, r3, #8
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	18d3      	adds	r3, r2, r3
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	3306      	adds	r3, #6
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	3307      	adds	r3, #7
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	021b      	lsls	r3, r3, #8
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	18d3      	adds	r3, r2, r3
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	80da      	strh	r2, [r3, #6]

}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	46bd      	mov	sp, r7
 80090ce:	b002      	add	sp, #8
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2180      	movs	r1, #128	; 0x80
 80090e0:	0018      	movs	r0, r3
 80090e2:	f000 fcc8 	bl	8009a76 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2100      	movs	r1, #0
 80090ea:	0018      	movs	r0, r3
 80090ec:	f000 fcc3 	bl	8009a76 <USBD_LL_StallEP>
}
 80090f0:	46c0      	nop			; (mov r8, r8)
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b002      	add	sp, #8
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009104:	2317      	movs	r3, #23
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d03d      	beq.n	800918e <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	0018      	movs	r0, r3
 8009116:	f000 f83e 	bl	8009196 <USBD_GetLen>
 800911a:	0003      	movs	r3, r0
 800911c:	3301      	adds	r3, #1
 800911e:	b29b      	uxth	r3, r3
 8009120:	18db      	adds	r3, r3, r3
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009128:	2017      	movs	r0, #23
 800912a:	183b      	adds	r3, r7, r0
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	183a      	adds	r2, r7, r0
 8009130:	1c59      	adds	r1, r3, #1
 8009132:	7011      	strb	r1, [r2, #0]
 8009134:	001a      	movs	r2, r3
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	189b      	adds	r3, r3, r2
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	7812      	ldrb	r2, [r2, #0]
 800913e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009140:	183b      	adds	r3, r7, r0
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	183a      	adds	r2, r7, r0
 8009146:	1c59      	adds	r1, r3, #1
 8009148:	7011      	strb	r1, [r2, #0]
 800914a:	001a      	movs	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	189b      	adds	r3, r3, r2
 8009150:	2203      	movs	r2, #3
 8009152:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009154:	e017      	b.n	8009186 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	60fa      	str	r2, [r7, #12]
 800915c:	2417      	movs	r4, #23
 800915e:	193a      	adds	r2, r7, r4
 8009160:	7812      	ldrb	r2, [r2, #0]
 8009162:	1939      	adds	r1, r7, r4
 8009164:	1c50      	adds	r0, r2, #1
 8009166:	7008      	strb	r0, [r1, #0]
 8009168:	0011      	movs	r1, r2
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	1852      	adds	r2, r2, r1
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009172:	193b      	adds	r3, r7, r4
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	193a      	adds	r2, r7, r4
 8009178:	1c59      	adds	r1, r3, #1
 800917a:	7011      	strb	r1, [r2, #0]
 800917c:	001a      	movs	r2, r3
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	189b      	adds	r3, r3, r2
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e3      	bne.n	8009156 <USBD_GetString+0x5e>
    }
  }
}
 800918e:	46c0      	nop			; (mov r8, r8)
 8009190:	46bd      	mov	sp, r7
 8009192:	b007      	add	sp, #28
 8009194:	bd90      	pop	{r4, r7, pc}

08009196 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800919e:	230f      	movs	r3, #15
 80091a0:	18fb      	adds	r3, r7, r3
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80091a6:	e008      	b.n	80091ba <USBD_GetLen+0x24>
  {
    len++;
 80091a8:	210f      	movs	r1, #15
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	781a      	ldrb	r2, [r3, #0]
 80091ae:	187b      	adds	r3, r7, r1
 80091b0:	3201      	adds	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]
    buf++;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3301      	adds	r3, #1
 80091b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1f2      	bne.n	80091a8 <USBD_GetLen+0x12>
  }

  return len;
 80091c2:	230f      	movs	r3, #15
 80091c4:	18fb      	adds	r3, r7, r3
 80091c6:	781b      	ldrb	r3, [r3, #0]
}
 80091c8:	0018      	movs	r0, r3
 80091ca:	46bd      	mov	sp, r7
 80091cc:	b004      	add	sp, #16
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	1dbb      	adds	r3, r7, #6
 80091dc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	23a5      	movs	r3, #165	; 0xa5
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	2102      	movs	r1, #2
 80091e6:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80091e8:	1dbb      	adds	r3, r7, #6
 80091ea:	881a      	ldrh	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80091f0:	1dbb      	adds	r3, r7, #6
 80091f2:	881a      	ldrh	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091f8:	1dbb      	adds	r3, r7, #6
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	2100      	movs	r1, #0
 8009202:	f000 fced 	bl	8009be0 <USBD_LL_Transmit>

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	0018      	movs	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	b004      	add	sp, #16
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	1dbb      	adds	r3, r7, #6
 800921c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800921e:	1dbb      	adds	r3, r7, #6
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	2100      	movs	r1, #0
 8009228:	f000 fcda 	bl	8009be0 <USBD_LL_Transmit>

  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	0018      	movs	r0, r3
 8009230:	46bd      	mov	sp, r7
 8009232:	b004      	add	sp, #16
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	1dbb      	adds	r3, r7, #6
 8009242:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	23a5      	movs	r3, #165	; 0xa5
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	2103      	movs	r1, #3
 800924c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800924e:	1dbb      	adds	r3, r7, #6
 8009250:	8819      	ldrh	r1, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	23ae      	movs	r3, #174	; 0xae
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800925a:	1dbb      	adds	r3, r7, #6
 800925c:	8819      	ldrh	r1, [r3, #0]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	23b0      	movs	r3, #176	; 0xb0
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009266:	1dbb      	adds	r3, r7, #6
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	2100      	movs	r1, #0
 8009270:	f000 fcee 	bl	8009c50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	0018      	movs	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	b004      	add	sp, #16
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	1dbb      	adds	r3, r7, #6
 800928a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800928c:	1dbb      	adds	r3, r7, #6
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	2100      	movs	r1, #0
 8009296:	f000 fcdb 	bl	8009c50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	0018      	movs	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	b004      	add	sp, #16
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	23a5      	movs	r3, #165	; 0xa5
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	2104      	movs	r1, #4
 80092b4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	2300      	movs	r3, #0
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	f000 fc8f 	bl	8009be0 <USBD_LL_Transmit>

  return USBD_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	0018      	movs	r0, r3
 80092c6:	46bd      	mov	sp, r7
 80092c8:	b002      	add	sp, #8
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	23a5      	movs	r3, #165	; 0xa5
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	2105      	movs	r1, #5
 80092dc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	2300      	movs	r3, #0
 80092e2:	2200      	movs	r2, #0
 80092e4:	2100      	movs	r1, #0
 80092e6:	f000 fcb3 	bl	8009c50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	0018      	movs	r0, r3
 80092ee:	46bd      	mov	sp, r7
 80092f0:	b002      	add	sp, #8
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092f8:	4914      	ldr	r1, [pc, #80]	; (800934c <MX_USB_DEVICE_Init+0x58>)
 80092fa:	4b15      	ldr	r3, [pc, #84]	; (8009350 <MX_USB_DEVICE_Init+0x5c>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	0018      	movs	r0, r3
 8009300:	f7fe fddf 	bl	8007ec2 <USBD_Init>
 8009304:	1e03      	subs	r3, r0, #0
 8009306:	d001      	beq.n	800930c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009308:	f7f7 fc36 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <MX_USB_DEVICE_Init+0x60>)
 800930e:	4b10      	ldr	r3, [pc, #64]	; (8009350 <MX_USB_DEVICE_Init+0x5c>)
 8009310:	0011      	movs	r1, r2
 8009312:	0018      	movs	r0, r3
 8009314:	f7fe fe06 	bl	8007f24 <USBD_RegisterClass>
 8009318:	1e03      	subs	r3, r0, #0
 800931a:	d001      	beq.n	8009320 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800931c:	f7f7 fc2c 	bl	8000b78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009320:	4a0d      	ldr	r2, [pc, #52]	; (8009358 <MX_USB_DEVICE_Init+0x64>)
 8009322:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <MX_USB_DEVICE_Init+0x5c>)
 8009324:	0011      	movs	r1, r2
 8009326:	0018      	movs	r0, r3
 8009328:	f7fe fd1a 	bl	8007d60 <USBD_CDC_RegisterInterface>
 800932c:	1e03      	subs	r3, r0, #0
 800932e:	d001      	beq.n	8009334 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009330:	f7f7 fc22 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009334:	4b06      	ldr	r3, [pc, #24]	; (8009350 <MX_USB_DEVICE_Init+0x5c>)
 8009336:	0018      	movs	r0, r3
 8009338:	f7fe fe15 	bl	8007f66 <USBD_Start>
 800933c:	1e03      	subs	r3, r0, #0
 800933e:	d001      	beq.n	8009344 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8009340:	f7f7 fc1a 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009344:	46c0      	nop			; (mov r8, r8)
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	20000130 	.word	0x20000130
 8009350:	20000560 	.word	0x20000560
 8009354:	2000001c 	.word	0x2000001c
 8009358:	20000120 	.word	0x20000120

0800935c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009360:	4907      	ldr	r1, [pc, #28]	; (8009380 <CDC_Init_FS+0x24>)
 8009362:	4b08      	ldr	r3, [pc, #32]	; (8009384 <CDC_Init_FS+0x28>)
 8009364:	2200      	movs	r2, #0
 8009366:	0018      	movs	r0, r3
 8009368:	f7fe fd16 	bl	8007d98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800936c:	4a06      	ldr	r2, [pc, #24]	; (8009388 <CDC_Init_FS+0x2c>)
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <CDC_Init_FS+0x28>)
 8009370:	0011      	movs	r1, r2
 8009372:	0018      	movs	r0, r3
 8009374:	f7fe fd2c 	bl	8007dd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009378:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800937a:	0018      	movs	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20000c0c 	.word	0x20000c0c
 8009384:	20000560 	.word	0x20000560
 8009388:	20000824 	.word	0x20000824

0800938c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009390:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009392:	0018      	movs	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6039      	str	r1, [r7, #0]
 80093a0:	0011      	movs	r1, r2
 80093a2:	1dfb      	adds	r3, r7, #7
 80093a4:	1c02      	adds	r2, r0, #0
 80093a6:	701a      	strb	r2, [r3, #0]
 80093a8:	1d3b      	adds	r3, r7, #4
 80093aa:	1c0a      	adds	r2, r1, #0
 80093ac:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093ae:	1dfb      	adds	r3, r7, #7
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b23      	cmp	r3, #35	; 0x23
 80093b4:	d804      	bhi.n	80093c0 <CDC_Control_FS+0x28>
 80093b6:	009a      	lsls	r2, r3, #2
 80093b8:	4b04      	ldr	r3, [pc, #16]	; (80093cc <CDC_Control_FS+0x34>)
 80093ba:	18d3      	adds	r3, r2, r3
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093c0:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80093c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093c4:	0018      	movs	r0, r3
 80093c6:	46bd      	mov	sp, r7
 80093c8:	b002      	add	sp, #8
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	08009f8c 	.word	0x08009f8c

080093d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <CDC_Receive_FS+0x38>)
 80093de:	0011      	movs	r1, r2
 80093e0:	0018      	movs	r0, r3
 80093e2:	f7fe fcf5 	bl	8007dd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093e6:	4b08      	ldr	r3, [pc, #32]	; (8009408 <CDC_Receive_FS+0x38>)
 80093e8:	0018      	movs	r0, r3
 80093ea:	f7fe fd3c 	bl	8007e66 <USBD_CDC_ReceivePacket>

  usb_addToQueue(&usb_Q, Buf, *Len);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <CDC_Receive_FS+0x3c>)
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7f7 fd4d 	bl	8000e98 <usb_addToQueue>
  return (USBD_OK);
 80093fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009400:	0018      	movs	r0, r3
 8009402:	46bd      	mov	sp, r7
 8009404:	b002      	add	sp, #8
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000560 	.word	0x20000560
 800940c:	20000414 	.word	0x20000414

08009410 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009410:	b5b0      	push	{r4, r5, r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	000a      	movs	r2, r1
 800941a:	1cbb      	adds	r3, r7, #2
 800941c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800941e:	230f      	movs	r3, #15
 8009420:	18fb      	adds	r3, r7, r3
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009426:	4a11      	ldr	r2, [pc, #68]	; (800946c <CDC_Transmit_FS+0x5c>)
 8009428:	23ae      	movs	r3, #174	; 0xae
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	58d3      	ldr	r3, [r2, r3]
 800942e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	2385      	movs	r3, #133	; 0x85
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	58d3      	ldr	r3, [r2, r3]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800943c:	2301      	movs	r3, #1
 800943e:	e010      	b.n	8009462 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009440:	1cbb      	adds	r3, r7, #2
 8009442:	881a      	ldrh	r2, [r3, #0]
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <CDC_Transmit_FS+0x5c>)
 8009448:	0018      	movs	r0, r3
 800944a:	f7fe fca5 	bl	8007d98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800944e:	250f      	movs	r5, #15
 8009450:	197c      	adds	r4, r7, r5
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <CDC_Transmit_FS+0x5c>)
 8009454:	0018      	movs	r0, r3
 8009456:	f7fe fccf 	bl	8007df8 <USBD_CDC_TransmitPacket>
 800945a:	0003      	movs	r3, r0
 800945c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800945e:	197b      	adds	r3, r7, r5
 8009460:	781b      	ldrb	r3, [r3, #0]
}
 8009462:	0018      	movs	r0, r3
 8009464:	46bd      	mov	sp, r7
 8009466:	b004      	add	sp, #16
 8009468:	bdb0      	pop	{r4, r5, r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	20000560 	.word	0x20000560

08009470 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	0002      	movs	r2, r0
 8009478:	6039      	str	r1, [r7, #0]
 800947a:	1dfb      	adds	r3, r7, #7
 800947c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2212      	movs	r2, #18
 8009482:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009486:	0018      	movs	r0, r3
 8009488:	46bd      	mov	sp, r7
 800948a:	b002      	add	sp, #8
 800948c:	bd80      	pop	{r7, pc}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	2000014c 	.word	0x2000014c

08009494 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	0002      	movs	r2, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	1dfb      	adds	r3, r7, #7
 80094a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2204      	movs	r2, #4
 80094a6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094a8:	4b02      	ldr	r3, [pc, #8]	; (80094b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094aa:	0018      	movs	r0, r3
 80094ac:	46bd      	mov	sp, r7
 80094ae:	b002      	add	sp, #8
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	20000160 	.word	0x20000160

080094b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	0002      	movs	r2, r0
 80094c0:	6039      	str	r1, [r7, #0]
 80094c2:	1dfb      	adds	r3, r7, #7
 80094c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80094c6:	1dfb      	adds	r3, r7, #7
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4908      	ldr	r1, [pc, #32]	; (80094f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <USBD_FS_ProductStrDescriptor+0x40>)
 80094d4:	0018      	movs	r0, r3
 80094d6:	f7ff fe0f 	bl	80090f8 <USBD_GetString>
 80094da:	e005      	b.n	80094e8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	4905      	ldr	r1, [pc, #20]	; (80094f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80094e0:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <USBD_FS_ProductStrDescriptor+0x40>)
 80094e2:	0018      	movs	r0, r3
 80094e4:	f7ff fe08 	bl	80090f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80094ea:	0018      	movs	r0, r3
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b002      	add	sp, #8
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	20000ff4 	.word	0x20000ff4
 80094f8:	08009e20 	.word	0x08009e20

080094fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	0002      	movs	r2, r0
 8009504:	6039      	str	r1, [r7, #0]
 8009506:	1dfb      	adds	r3, r7, #7
 8009508:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4904      	ldr	r1, [pc, #16]	; (8009520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800950e:	4b05      	ldr	r3, [pc, #20]	; (8009524 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009510:	0018      	movs	r0, r3
 8009512:	f7ff fdf1 	bl	80090f8 <USBD_GetString>
  return USBD_StrDesc;
 8009516:	4b02      	ldr	r3, [pc, #8]	; (8009520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b002      	add	sp, #8
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000ff4 	.word	0x20000ff4
 8009524:	08009e38 	.word	0x08009e38

08009528 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	0002      	movs	r2, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	1dfb      	adds	r3, r7, #7
 8009534:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	221a      	movs	r2, #26
 800953a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800953c:	f000 f84c 	bl	80095d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	b002      	add	sp, #8
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	20000164 	.word	0x20000164

08009550 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	0002      	movs	r2, r0
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	1dfb      	adds	r3, r7, #7
 800955c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800955e:	1dfb      	adds	r3, r7, #7
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	4908      	ldr	r1, [pc, #32]	; (800958c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x40>)
 800956c:	0018      	movs	r0, r3
 800956e:	f7ff fdc3 	bl	80090f8 <USBD_GetString>
 8009572:	e005      	b.n	8009580 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	4905      	ldr	r1, [pc, #20]	; (800958c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009578:	4b05      	ldr	r3, [pc, #20]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x40>)
 800957a:	0018      	movs	r0, r3
 800957c:	f7ff fdbc 	bl	80090f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009582:	0018      	movs	r0, r3
 8009584:	46bd      	mov	sp, r7
 8009586:	b002      	add	sp, #8
 8009588:	bd80      	pop	{r7, pc}
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	20000ff4 	.word	0x20000ff4
 8009590:	08009e4c 	.word	0x08009e4c

08009594 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	0002      	movs	r2, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	1dfb      	adds	r3, r7, #7
 80095a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80095a2:	1dfb      	adds	r3, r7, #7
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4908      	ldr	r1, [pc, #32]	; (80095d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80095b0:	0018      	movs	r0, r3
 80095b2:	f7ff fda1 	bl	80090f8 <USBD_GetString>
 80095b6:	e005      	b.n	80095c4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	4905      	ldr	r1, [pc, #20]	; (80095d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80095be:	0018      	movs	r0, r3
 80095c0:	f7ff fd9a 	bl	80090f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80095c6:	0018      	movs	r0, r3
 80095c8:	46bd      	mov	sp, r7
 80095ca:	b002      	add	sp, #8
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	46c0      	nop			; (mov r8, r8)
 80095d0:	20000ff4 	.word	0x20000ff4
 80095d4:	08009e58 	.word	0x08009e58

080095d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095de:	4b10      	ldr	r3, [pc, #64]	; (8009620 <Get_SerialNum+0x48>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095e4:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <Get_SerialNum+0x4c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095ea:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <Get_SerialNum+0x50>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	18d3      	adds	r3, r2, r3
 80095f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095fe:	490b      	ldr	r1, [pc, #44]	; (800962c <Get_SerialNum+0x54>)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2208      	movs	r2, #8
 8009604:	0018      	movs	r0, r3
 8009606:	f000 f815 	bl	8009634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800960a:	4909      	ldr	r1, [pc, #36]	; (8009630 <Get_SerialNum+0x58>)
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2204      	movs	r2, #4
 8009610:	0018      	movs	r0, r3
 8009612:	f000 f80f 	bl	8009634 <IntToUnicode>
  }
}
 8009616:	46c0      	nop			; (mov r8, r8)
 8009618:	46bd      	mov	sp, r7
 800961a:	b004      	add	sp, #16
 800961c:	bd80      	pop	{r7, pc}
 800961e:	46c0      	nop			; (mov r8, r8)
 8009620:	1ffff7ac 	.word	0x1ffff7ac
 8009624:	1ffff7b0 	.word	0x1ffff7b0
 8009628:	1ffff7b4 	.word	0x1ffff7b4
 800962c:	20000166 	.word	0x20000166
 8009630:	20000176 	.word	0x20000176

08009634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	1dfb      	adds	r3, r7, #7
 8009640:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009642:	2117      	movs	r1, #23
 8009644:	187b      	adds	r3, r7, r1
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800964a:	187b      	adds	r3, r7, r1
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	e02f      	b.n	80096b2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	0f1b      	lsrs	r3, r3, #28
 8009656:	2b09      	cmp	r3, #9
 8009658:	d80d      	bhi.n	8009676 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	0f1b      	lsrs	r3, r3, #28
 800965e:	b2da      	uxtb	r2, r3
 8009660:	2317      	movs	r3, #23
 8009662:	18fb      	adds	r3, r7, r3
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	0019      	movs	r1, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	185b      	adds	r3, r3, r1
 800966e:	3230      	adds	r2, #48	; 0x30
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e00c      	b.n	8009690 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	0f1b      	lsrs	r3, r3, #28
 800967a:	b2da      	uxtb	r2, r3
 800967c:	2317      	movs	r3, #23
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	0019      	movs	r1, r3
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	185b      	adds	r3, r3, r1
 800968a:	3237      	adds	r2, #55	; 0x37
 800968c:	b2d2      	uxtb	r2, r2
 800968e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009696:	2117      	movs	r1, #23
 8009698:	187b      	adds	r3, r7, r1
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	3301      	adds	r3, #1
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	18d3      	adds	r3, r2, r3
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096a8:	187b      	adds	r3, r7, r1
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	187b      	adds	r3, r7, r1
 80096ae:	3201      	adds	r2, #1
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	2317      	movs	r3, #23
 80096b4:	18fa      	adds	r2, r7, r3
 80096b6:	1dfb      	adds	r3, r7, #7
 80096b8:	7812      	ldrb	r2, [r2, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d3c8      	bcc.n	8009652 <IntToUnicode+0x1e>
  }
}
 80096c0:	46c0      	nop			; (mov r8, r8)
 80096c2:	46bd      	mov	sp, r7
 80096c4:	b006      	add	sp, #24
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a0e      	ldr	r2, [pc, #56]	; (8009710 <HAL_PCD_MspInit+0x48>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d115      	bne.n	8009706 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096da:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <HAL_PCD_MspInit+0x4c>)
 80096dc:	69da      	ldr	r2, [r3, #28]
 80096de:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <HAL_PCD_MspInit+0x4c>)
 80096e0:	2180      	movs	r1, #128	; 0x80
 80096e2:	0409      	lsls	r1, r1, #16
 80096e4:	430a      	orrs	r2, r1
 80096e6:	61da      	str	r2, [r3, #28]
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <HAL_PCD_MspInit+0x4c>)
 80096ea:	69da      	ldr	r2, [r3, #28]
 80096ec:	2380      	movs	r3, #128	; 0x80
 80096ee:	041b      	lsls	r3, r3, #16
 80096f0:	4013      	ands	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80096f6:	2200      	movs	r2, #0
 80096f8:	2100      	movs	r1, #0
 80096fa:	201f      	movs	r0, #31
 80096fc:	f7f8 fe06 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009700:	201f      	movs	r0, #31
 8009702:	f7f8 fe18 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	46bd      	mov	sp, r7
 800970a:	b004      	add	sp, #16
 800970c:	bd80      	pop	{r7, pc}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	40005c00 	.word	0x40005c00
 8009714:	40021000 	.word	0x40021000

08009718 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	23bc      	movs	r3, #188	; 0xbc
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	58d2      	ldr	r2, [r2, r3]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	21ac      	movs	r1, #172	; 0xac
 800972c:	0089      	lsls	r1, r1, #2
 800972e:	468c      	mov	ip, r1
 8009730:	4463      	add	r3, ip
 8009732:	0019      	movs	r1, r3
 8009734:	0010      	movs	r0, r2
 8009736:	f7fe fc6b 	bl	8008010 <USBD_LL_SetupStage>
}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	46bd      	mov	sp, r7
 800973e:	b002      	add	sp, #8
 8009740:	bd80      	pop	{r7, pc}

08009742 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009742:	b590      	push	{r4, r7, lr}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	000a      	movs	r2, r1
 800974c:	1cfb      	adds	r3, r7, #3
 800974e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	23bc      	movs	r3, #188	; 0xbc
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	58d4      	ldr	r4, [r2, r3]
 8009758:	1cfb      	adds	r3, r7, #3
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	23be      	movs	r3, #190	; 0xbe
 8009760:	0059      	lsls	r1, r3, #1
 8009762:	0013      	movs	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	189b      	adds	r3, r3, r2
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	18c3      	adds	r3, r0, r3
 800976c:	185b      	adds	r3, r3, r1
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	1cfb      	adds	r3, r7, #3
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	0019      	movs	r1, r3
 8009776:	0020      	movs	r0, r4
 8009778:	f7fe fca6 	bl	80080c8 <USBD_LL_DataOutStage>
}
 800977c:	46c0      	nop			; (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	b003      	add	sp, #12
 8009782:	bd90      	pop	{r4, r7, pc}

08009784 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	000a      	movs	r2, r1
 800978e:	1cfb      	adds	r3, r7, #3
 8009790:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	23bc      	movs	r3, #188	; 0xbc
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	58d0      	ldr	r0, [r2, r3]
 800979a:	1cfb      	adds	r3, r7, #3
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	0013      	movs	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	189b      	adds	r3, r3, r2
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	18cb      	adds	r3, r1, r3
 80097aa:	333c      	adds	r3, #60	; 0x3c
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	1cfb      	adds	r3, r7, #3
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	0019      	movs	r1, r3
 80097b4:	f7fe fd0a 	bl	80081cc <USBD_LL_DataInStage>
}
 80097b8:	46c0      	nop			; (mov r8, r8)
 80097ba:	46bd      	mov	sp, r7
 80097bc:	b002      	add	sp, #8
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	23bc      	movs	r3, #188	; 0xbc
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	58d3      	ldr	r3, [r2, r3]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7fe fe41 	bl	8008458 <USBD_LL_SOF>
}
 80097d6:	46c0      	nop			; (mov r8, r8)
 80097d8:	46bd      	mov	sp, r7
 80097da:	b002      	add	sp, #8
 80097dc:	bd80      	pop	{r7, pc}

080097de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097e6:	230f      	movs	r3, #15
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	2201      	movs	r2, #1
 80097ec:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d001      	beq.n	80097fa <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80097f6:	f7f7 f9bf 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	23bc      	movs	r3, #188	; 0xbc
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	58d2      	ldr	r2, [r2, r3]
 8009802:	230f      	movs	r3, #15
 8009804:	18fb      	adds	r3, r7, r3
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	0019      	movs	r1, r3
 800980a:	0010      	movs	r0, r2
 800980c:	f7fe fde3 	bl	80083d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	23bc      	movs	r3, #188	; 0xbc
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	58d3      	ldr	r3, [r2, r3]
 8009818:	0018      	movs	r0, r3
 800981a:	f7fe fd94 	bl	8008346 <USBD_LL_Reset>
}
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	46bd      	mov	sp, r7
 8009822:	b004      	add	sp, #16
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	23bc      	movs	r3, #188	; 0xbc
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	58d3      	ldr	r3, [r2, r3]
 8009838:	0018      	movs	r0, r3
 800983a:	f7fe fddd 	bl	80083f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d005      	beq.n	8009852 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <HAL_PCD_SuspendCallback+0x34>)
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	4b04      	ldr	r3, [pc, #16]	; (800985c <HAL_PCD_SuspendCallback+0x34>)
 800984c:	2106      	movs	r1, #6
 800984e:	430a      	orrs	r2, r1
 8009850:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	46bd      	mov	sp, r7
 8009856:	b002      	add	sp, #8
 8009858:	bd80      	pop	{r7, pc}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	e000ed00 	.word	0xe000ed00

08009860 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d007      	beq.n	8009880 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009870:	4b09      	ldr	r3, [pc, #36]	; (8009898 <HAL_PCD_ResumeCallback+0x38>)
 8009872:	691a      	ldr	r2, [r3, #16]
 8009874:	4b08      	ldr	r3, [pc, #32]	; (8009898 <HAL_PCD_ResumeCallback+0x38>)
 8009876:	2106      	movs	r1, #6
 8009878:	438a      	bics	r2, r1
 800987a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800987c:	f000 fa4a 	bl	8009d14 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	23bc      	movs	r3, #188	; 0xbc
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	58d3      	ldr	r3, [r2, r3]
 8009888:	0018      	movs	r0, r3
 800988a:	f7fe fdcd 	bl	8008428 <USBD_LL_Resume>
}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	46bd      	mov	sp, r7
 8009892:	b002      	add	sp, #8
 8009894:	bd80      	pop	{r7, pc}
 8009896:	46c0      	nop			; (mov r8, r8)
 8009898:	e000ed00 	.word	0xe000ed00

0800989c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80098a4:	4a2d      	ldr	r2, [pc, #180]	; (800995c <USBD_LL_Init+0xc0>)
 80098a6:	23bc      	movs	r3, #188	; 0xbc
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	23b0      	movs	r3, #176	; 0xb0
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4929      	ldr	r1, [pc, #164]	; (800995c <USBD_LL_Init+0xc0>)
 80098b6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80098b8:	4b28      	ldr	r3, [pc, #160]	; (800995c <USBD_LL_Init+0xc0>)
 80098ba:	4a29      	ldr	r2, [pc, #164]	; (8009960 <USBD_LL_Init+0xc4>)
 80098bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098be:	4b27      	ldr	r3, [pc, #156]	; (800995c <USBD_LL_Init+0xc0>)
 80098c0:	2208      	movs	r2, #8
 80098c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098c4:	4b25      	ldr	r3, [pc, #148]	; (800995c <USBD_LL_Init+0xc0>)
 80098c6:	2202      	movs	r2, #2
 80098c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098ca:	4b24      	ldr	r3, [pc, #144]	; (800995c <USBD_LL_Init+0xc0>)
 80098cc:	2202      	movs	r2, #2
 80098ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098d0:	4b22      	ldr	r3, [pc, #136]	; (800995c <USBD_LL_Init+0xc0>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098d6:	4b21      	ldr	r3, [pc, #132]	; (800995c <USBD_LL_Init+0xc0>)
 80098d8:	2200      	movs	r2, #0
 80098da:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098dc:	4b1f      	ldr	r3, [pc, #124]	; (800995c <USBD_LL_Init+0xc0>)
 80098de:	2200      	movs	r2, #0
 80098e0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098e2:	4b1e      	ldr	r3, [pc, #120]	; (800995c <USBD_LL_Init+0xc0>)
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7f9 f8c5 	bl	8002a74 <HAL_PCD_Init>
 80098ea:	1e03      	subs	r3, r0, #0
 80098ec:	d001      	beq.n	80098f2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80098ee:	f7f7 f943 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	23b0      	movs	r3, #176	; 0xb0
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	58d0      	ldr	r0, [r2, r3]
 80098fa:	2318      	movs	r3, #24
 80098fc:	2200      	movs	r2, #0
 80098fe:	2100      	movs	r1, #0
 8009900:	f7fa fcd6 	bl	80042b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	23b0      	movs	r3, #176	; 0xb0
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	58d0      	ldr	r0, [r2, r3]
 800990c:	2358      	movs	r3, #88	; 0x58
 800990e:	2200      	movs	r2, #0
 8009910:	2180      	movs	r1, #128	; 0x80
 8009912:	f7fa fccd 	bl	80042b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	23b0      	movs	r3, #176	; 0xb0
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	58d0      	ldr	r0, [r2, r3]
 800991e:	23c0      	movs	r3, #192	; 0xc0
 8009920:	2200      	movs	r2, #0
 8009922:	2181      	movs	r1, #129	; 0x81
 8009924:	f7fa fcc4 	bl	80042b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	23b0      	movs	r3, #176	; 0xb0
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	58d0      	ldr	r0, [r2, r3]
 8009930:	2388      	movs	r3, #136	; 0x88
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	2200      	movs	r2, #0
 8009936:	2101      	movs	r1, #1
 8009938:	f7fa fcba 	bl	80042b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	23b0      	movs	r3, #176	; 0xb0
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	58d0      	ldr	r0, [r2, r3]
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	2200      	movs	r2, #0
 800994a:	2182      	movs	r1, #130	; 0x82
 800994c:	f7fa fcb0 	bl	80042b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b002      	add	sp, #8
 8009958:	bd80      	pop	{r7, pc}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	200011f4 	.word	0x200011f4
 8009960:	40005c00 	.word	0x40005c00

08009964 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996c:	210f      	movs	r1, #15
 800996e:	187b      	adds	r3, r7, r1
 8009970:	2200      	movs	r2, #0
 8009972:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009974:	260e      	movs	r6, #14
 8009976:	19bb      	adds	r3, r7, r6
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	23b0      	movs	r3, #176	; 0xb0
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	58d3      	ldr	r3, [r2, r3]
 8009984:	000d      	movs	r5, r1
 8009986:	187c      	adds	r4, r7, r1
 8009988:	0018      	movs	r0, r3
 800998a:	f7f9 f983 	bl	8002c94 <HAL_PCD_Start>
 800998e:	0003      	movs	r3, r0
 8009990:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009992:	19bc      	adds	r4, r7, r6
 8009994:	0029      	movs	r1, r5
 8009996:	187b      	adds	r3, r7, r1
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	0018      	movs	r0, r3
 800999c:	f000 f9c1 	bl	8009d22 <USBD_Get_USB_Status>
 80099a0:	0003      	movs	r3, r0
 80099a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80099a4:	19bb      	adds	r3, r7, r6
 80099a6:	781b      	ldrb	r3, [r3, #0]
}
 80099a8:	0018      	movs	r0, r3
 80099aa:	46bd      	mov	sp, r7
 80099ac:	b005      	add	sp, #20
 80099ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	000c      	movs	r4, r1
 80099ba:	0010      	movs	r0, r2
 80099bc:	0019      	movs	r1, r3
 80099be:	1cfb      	adds	r3, r7, #3
 80099c0:	1c22      	adds	r2, r4, #0
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	1cbb      	adds	r3, r7, #2
 80099c6:	1c02      	adds	r2, r0, #0
 80099c8:	701a      	strb	r2, [r3, #0]
 80099ca:	003b      	movs	r3, r7
 80099cc:	1c0a      	adds	r2, r1, #0
 80099ce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d0:	260f      	movs	r6, #15
 80099d2:	19bb      	adds	r3, r7, r6
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	250e      	movs	r5, #14
 80099da:	197b      	adds	r3, r7, r5
 80099dc:	2200      	movs	r2, #0
 80099de:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	23b0      	movs	r3, #176	; 0xb0
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	58d0      	ldr	r0, [r2, r3]
 80099e8:	19bc      	adds	r4, r7, r6
 80099ea:	1cbb      	adds	r3, r7, #2
 80099ec:	781d      	ldrb	r5, [r3, #0]
 80099ee:	003b      	movs	r3, r7
 80099f0:	881a      	ldrh	r2, [r3, #0]
 80099f2:	1cfb      	adds	r3, r7, #3
 80099f4:	7819      	ldrb	r1, [r3, #0]
 80099f6:	002b      	movs	r3, r5
 80099f8:	f7f9 fb19 	bl	800302e <HAL_PCD_EP_Open>
 80099fc:	0003      	movs	r3, r0
 80099fe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a00:	250e      	movs	r5, #14
 8009a02:	197c      	adds	r4, r7, r5
 8009a04:	19bb      	adds	r3, r7, r6
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f000 f98a 	bl	8009d22 <USBD_Get_USB_Status>
 8009a0e:	0003      	movs	r3, r0
 8009a10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a12:	197b      	adds	r3, r7, r5
 8009a14:	781b      	ldrb	r3, [r3, #0]
}
 8009a16:	0018      	movs	r0, r3
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	b005      	add	sp, #20
 8009a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	000a      	movs	r2, r1
 8009a28:	1cfb      	adds	r3, r7, #3
 8009a2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2c:	210f      	movs	r1, #15
 8009a2e:	187b      	adds	r3, r7, r1
 8009a30:	2200      	movs	r2, #0
 8009a32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a34:	260e      	movs	r6, #14
 8009a36:	19bb      	adds	r3, r7, r6
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	23b0      	movs	r3, #176	; 0xb0
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	58d2      	ldr	r2, [r2, r3]
 8009a44:	000d      	movs	r5, r1
 8009a46:	187c      	adds	r4, r7, r1
 8009a48:	1cfb      	adds	r3, r7, #3
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	0019      	movs	r1, r3
 8009a4e:	0010      	movs	r0, r2
 8009a50:	f7f9 fb65 	bl	800311e <HAL_PCD_EP_Close>
 8009a54:	0003      	movs	r3, r0
 8009a56:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a58:	19bc      	adds	r4, r7, r6
 8009a5a:	0029      	movs	r1, r5
 8009a5c:	187b      	adds	r3, r7, r1
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	0018      	movs	r0, r3
 8009a62:	f000 f95e 	bl	8009d22 <USBD_Get_USB_Status>
 8009a66:	0003      	movs	r3, r0
 8009a68:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a6a:	19bb      	adds	r3, r7, r6
 8009a6c:	781b      	ldrb	r3, [r3, #0]
}
 8009a6e:	0018      	movs	r0, r3
 8009a70:	46bd      	mov	sp, r7
 8009a72:	b005      	add	sp, #20
 8009a74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a76 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a78:	b085      	sub	sp, #20
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	000a      	movs	r2, r1
 8009a80:	1cfb      	adds	r3, r7, #3
 8009a82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a84:	210f      	movs	r1, #15
 8009a86:	187b      	adds	r3, r7, r1
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a8c:	260e      	movs	r6, #14
 8009a8e:	19bb      	adds	r3, r7, r6
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	23b0      	movs	r3, #176	; 0xb0
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	58d2      	ldr	r2, [r2, r3]
 8009a9c:	000d      	movs	r5, r1
 8009a9e:	187c      	adds	r4, r7, r1
 8009aa0:	1cfb      	adds	r3, r7, #3
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	0019      	movs	r1, r3
 8009aa6:	0010      	movs	r0, r2
 8009aa8:	f7f9 fc30 	bl	800330c <HAL_PCD_EP_SetStall>
 8009aac:	0003      	movs	r3, r0
 8009aae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab0:	19bc      	adds	r4, r7, r6
 8009ab2:	0029      	movs	r1, r5
 8009ab4:	187b      	adds	r3, r7, r1
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f000 f932 	bl	8009d22 <USBD_Get_USB_Status>
 8009abe:	0003      	movs	r3, r0
 8009ac0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009ac2:	19bb      	adds	r3, r7, r6
 8009ac4:	781b      	ldrb	r3, [r3, #0]
}
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	b005      	add	sp, #20
 8009acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ace <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	000a      	movs	r2, r1
 8009ad8:	1cfb      	adds	r3, r7, #3
 8009ada:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009adc:	210f      	movs	r1, #15
 8009ade:	187b      	adds	r3, r7, r1
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae4:	260e      	movs	r6, #14
 8009ae6:	19bb      	adds	r3, r7, r6
 8009ae8:	2200      	movs	r2, #0
 8009aea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	23b0      	movs	r3, #176	; 0xb0
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	58d2      	ldr	r2, [r2, r3]
 8009af4:	000d      	movs	r5, r1
 8009af6:	187c      	adds	r4, r7, r1
 8009af8:	1cfb      	adds	r3, r7, #3
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	0019      	movs	r1, r3
 8009afe:	0010      	movs	r0, r2
 8009b00:	f7f9 fc60 	bl	80033c4 <HAL_PCD_EP_ClrStall>
 8009b04:	0003      	movs	r3, r0
 8009b06:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b08:	19bc      	adds	r4, r7, r6
 8009b0a:	0029      	movs	r1, r5
 8009b0c:	187b      	adds	r3, r7, r1
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	0018      	movs	r0, r3
 8009b12:	f000 f906 	bl	8009d22 <USBD_Get_USB_Status>
 8009b16:	0003      	movs	r3, r0
 8009b18:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009b1a:	19bb      	adds	r3, r7, r6
 8009b1c:	781b      	ldrb	r3, [r3, #0]
}
 8009b1e:	0018      	movs	r0, r3
 8009b20:	46bd      	mov	sp, r7
 8009b22:	b005      	add	sp, #20
 8009b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b26 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	000a      	movs	r2, r1
 8009b30:	1cfb      	adds	r3, r7, #3
 8009b32:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	23b0      	movs	r3, #176	; 0xb0
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	58d3      	ldr	r3, [r2, r3]
 8009b3c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b3e:	1cfb      	adds	r3, r7, #3
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b25b      	sxtb	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da0d      	bge.n	8009b64 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b48:	1cfb      	adds	r3, r7, #3
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	227f      	movs	r2, #127	; 0x7f
 8009b4e:	4013      	ands	r3, r2
 8009b50:	68f9      	ldr	r1, [r7, #12]
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	0013      	movs	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	189b      	adds	r3, r3, r2
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	18cb      	adds	r3, r1, r3
 8009b5e:	3302      	adds	r3, #2
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	e00d      	b.n	8009b80 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b64:	1cfb      	adds	r3, r7, #3
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	227f      	movs	r2, #127	; 0x7f
 8009b6a:	401a      	ands	r2, r3
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	23b5      	movs	r3, #181	; 0xb5
 8009b70:	0059      	lsls	r1, r3, #1
 8009b72:	0013      	movs	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	189b      	adds	r3, r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	18c3      	adds	r3, r0, r3
 8009b7c:	185b      	adds	r3, r3, r1
 8009b7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b80:	0018      	movs	r0, r3
 8009b82:	46bd      	mov	sp, r7
 8009b84:	b004      	add	sp, #16
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	000a      	movs	r2, r1
 8009b92:	1cfb      	adds	r3, r7, #3
 8009b94:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b96:	210f      	movs	r1, #15
 8009b98:	187b      	adds	r3, r7, r1
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9e:	260e      	movs	r6, #14
 8009ba0:	19bb      	adds	r3, r7, r6
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	23b0      	movs	r3, #176	; 0xb0
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	58d2      	ldr	r2, [r2, r3]
 8009bae:	000d      	movs	r5, r1
 8009bb0:	187c      	adds	r4, r7, r1
 8009bb2:	1cfb      	adds	r3, r7, #3
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	0019      	movs	r1, r3
 8009bb8:	0010      	movs	r0, r2
 8009bba:	f7f9 fa0d 	bl	8002fd8 <HAL_PCD_SetAddress>
 8009bbe:	0003      	movs	r3, r0
 8009bc0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc2:	19bc      	adds	r4, r7, r6
 8009bc4:	0029      	movs	r1, r5
 8009bc6:	187b      	adds	r3, r7, r1
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	0018      	movs	r0, r3
 8009bcc:	f000 f8a9 	bl	8009d22 <USBD_Get_USB_Status>
 8009bd0:	0003      	movs	r3, r0
 8009bd2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009bd4:	19bb      	adds	r3, r7, r6
 8009bd6:	781b      	ldrb	r3, [r3, #0]
}
 8009bd8:	0018      	movs	r0, r3
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b005      	add	sp, #20
 8009bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009be0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	0008      	movs	r0, r1
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	0019      	movs	r1, r3
 8009bee:	230b      	movs	r3, #11
 8009bf0:	18fb      	adds	r3, r7, r3
 8009bf2:	1c02      	adds	r2, r0, #0
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	2408      	movs	r4, #8
 8009bf8:	193b      	adds	r3, r7, r4
 8009bfa:	1c0a      	adds	r2, r1, #0
 8009bfc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfe:	2117      	movs	r1, #23
 8009c00:	187b      	adds	r3, r7, r1
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c06:	2516      	movs	r5, #22
 8009c08:	197b      	adds	r3, r7, r5
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	23b0      	movs	r3, #176	; 0xb0
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	58d0      	ldr	r0, [r2, r3]
 8009c16:	193b      	adds	r3, r7, r4
 8009c18:	881d      	ldrh	r5, [r3, #0]
 8009c1a:	000e      	movs	r6, r1
 8009c1c:	187c      	adds	r4, r7, r1
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	230b      	movs	r3, #11
 8009c22:	18fb      	adds	r3, r7, r3
 8009c24:	7819      	ldrb	r1, [r3, #0]
 8009c26:	002b      	movs	r3, r5
 8009c28:	f7f9 fb27 	bl	800327a <HAL_PCD_EP_Transmit>
 8009c2c:	0003      	movs	r3, r0
 8009c2e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c30:	2516      	movs	r5, #22
 8009c32:	197c      	adds	r4, r7, r5
 8009c34:	0031      	movs	r1, r6
 8009c36:	187b      	adds	r3, r7, r1
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f000 f871 	bl	8009d22 <USBD_Get_USB_Status>
 8009c40:	0003      	movs	r3, r0
 8009c42:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009c44:	197b      	adds	r3, r7, r5
 8009c46:	781b      	ldrb	r3, [r3, #0]
}
 8009c48:	0018      	movs	r0, r3
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	b007      	add	sp, #28
 8009c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	0008      	movs	r0, r1
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	0019      	movs	r1, r3
 8009c5e:	230b      	movs	r3, #11
 8009c60:	18fb      	adds	r3, r7, r3
 8009c62:	1c02      	adds	r2, r0, #0
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	2408      	movs	r4, #8
 8009c68:	193b      	adds	r3, r7, r4
 8009c6a:	1c0a      	adds	r2, r1, #0
 8009c6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c6e:	2117      	movs	r1, #23
 8009c70:	187b      	adds	r3, r7, r1
 8009c72:	2200      	movs	r2, #0
 8009c74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c76:	2516      	movs	r5, #22
 8009c78:	197b      	adds	r3, r7, r5
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	23b0      	movs	r3, #176	; 0xb0
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	58d0      	ldr	r0, [r2, r3]
 8009c86:	193b      	adds	r3, r7, r4
 8009c88:	881d      	ldrh	r5, [r3, #0]
 8009c8a:	000e      	movs	r6, r1
 8009c8c:	187c      	adds	r4, r7, r1
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	230b      	movs	r3, #11
 8009c92:	18fb      	adds	r3, r7, r3
 8009c94:	7819      	ldrb	r1, [r3, #0]
 8009c96:	002b      	movs	r3, r5
 8009c98:	f7f9 fa92 	bl	80031c0 <HAL_PCD_EP_Receive>
 8009c9c:	0003      	movs	r3, r0
 8009c9e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca0:	2516      	movs	r5, #22
 8009ca2:	197c      	adds	r4, r7, r5
 8009ca4:	0031      	movs	r1, r6
 8009ca6:	187b      	adds	r3, r7, r1
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	0018      	movs	r0, r3
 8009cac:	f000 f839 	bl	8009d22 <USBD_Get_USB_Status>
 8009cb0:	0003      	movs	r3, r0
 8009cb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009cb4:	197b      	adds	r3, r7, r5
 8009cb6:	781b      	ldrb	r3, [r3, #0]
}
 8009cb8:	0018      	movs	r0, r3
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	b007      	add	sp, #28
 8009cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	000a      	movs	r2, r1
 8009cca:	1cfb      	adds	r3, r7, #3
 8009ccc:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	23b0      	movs	r3, #176	; 0xb0
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	58d2      	ldr	r2, [r2, r3]
 8009cd6:	1cfb      	adds	r3, r7, #3
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	0019      	movs	r1, r3
 8009cdc:	0010      	movs	r0, r2
 8009cde:	f7f9 fab3 	bl	8003248 <HAL_PCD_EP_GetRxCount>
 8009ce2:	0003      	movs	r3, r0
}
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cf4:	4b02      	ldr	r3, [pc, #8]	; (8009d00 <USBD_static_malloc+0x14>)
}
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	b002      	add	sp, #8
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	46c0      	nop			; (mov r8, r8)
 8009d00:	200001e4 	.word	0x200001e4

08009d04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]

}
 8009d0c:	46c0      	nop			; (mov r8, r8)
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b002      	add	sp, #8
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009d18:	f7f6 fd0e 	bl	8000738 <SystemClock_Config>
}
 8009d1c:	46c0      	nop			; (mov r8, r8)
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	0002      	movs	r2, r0
 8009d2a:	1dfb      	adds	r3, r7, #7
 8009d2c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2e:	230f      	movs	r3, #15
 8009d30:	18fb      	adds	r3, r7, r3
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009d36:	1dfb      	adds	r3, r7, #7
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d00d      	beq.n	8009d5a <USBD_Get_USB_Status+0x38>
 8009d3e:	dc02      	bgt.n	8009d46 <USBD_Get_USB_Status+0x24>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <USBD_Get_USB_Status+0x2e>
 8009d44:	e018      	b.n	8009d78 <USBD_Get_USB_Status+0x56>
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d00c      	beq.n	8009d64 <USBD_Get_USB_Status+0x42>
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d00f      	beq.n	8009d6e <USBD_Get_USB_Status+0x4c>
 8009d4e:	e013      	b.n	8009d78 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d50:	230f      	movs	r3, #15
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	2200      	movs	r2, #0
 8009d56:	701a      	strb	r2, [r3, #0]
    break;
 8009d58:	e013      	b.n	8009d82 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d5a:	230f      	movs	r3, #15
 8009d5c:	18fb      	adds	r3, r7, r3
 8009d5e:	2202      	movs	r2, #2
 8009d60:	701a      	strb	r2, [r3, #0]
    break;
 8009d62:	e00e      	b.n	8009d82 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d64:	230f      	movs	r3, #15
 8009d66:	18fb      	adds	r3, r7, r3
 8009d68:	2201      	movs	r2, #1
 8009d6a:	701a      	strb	r2, [r3, #0]
    break;
 8009d6c:	e009      	b.n	8009d82 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d6e:	230f      	movs	r3, #15
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	2202      	movs	r2, #2
 8009d74:	701a      	strb	r2, [r3, #0]
    break;
 8009d76:	e004      	b.n	8009d82 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009d78:	230f      	movs	r3, #15
 8009d7a:	18fb      	adds	r3, r7, r3
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	701a      	strb	r2, [r3, #0]
    break;
 8009d80:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8009d82:	230f      	movs	r3, #15
 8009d84:	18fb      	adds	r3, r7, r3
 8009d86:	781b      	ldrb	r3, [r3, #0]
}
 8009d88:	0018      	movs	r0, r3
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	b004      	add	sp, #16
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <__libc_init_array>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	2600      	movs	r6, #0
 8009d94:	4d0c      	ldr	r5, [pc, #48]	; (8009dc8 <__libc_init_array+0x38>)
 8009d96:	4c0d      	ldr	r4, [pc, #52]	; (8009dcc <__libc_init_array+0x3c>)
 8009d98:	1b64      	subs	r4, r4, r5
 8009d9a:	10a4      	asrs	r4, r4, #2
 8009d9c:	42a6      	cmp	r6, r4
 8009d9e:	d109      	bne.n	8009db4 <__libc_init_array+0x24>
 8009da0:	2600      	movs	r6, #0
 8009da2:	f000 f821 	bl	8009de8 <_init>
 8009da6:	4d0a      	ldr	r5, [pc, #40]	; (8009dd0 <__libc_init_array+0x40>)
 8009da8:	4c0a      	ldr	r4, [pc, #40]	; (8009dd4 <__libc_init_array+0x44>)
 8009daa:	1b64      	subs	r4, r4, r5
 8009dac:	10a4      	asrs	r4, r4, #2
 8009dae:	42a6      	cmp	r6, r4
 8009db0:	d105      	bne.n	8009dbe <__libc_init_array+0x2e>
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	00b3      	lsls	r3, r6, #2
 8009db6:	58eb      	ldr	r3, [r5, r3]
 8009db8:	4798      	blx	r3
 8009dba:	3601      	adds	r6, #1
 8009dbc:	e7ee      	b.n	8009d9c <__libc_init_array+0xc>
 8009dbe:	00b3      	lsls	r3, r6, #2
 8009dc0:	58eb      	ldr	r3, [r5, r3]
 8009dc2:	4798      	blx	r3
 8009dc4:	3601      	adds	r6, #1
 8009dc6:	e7f2      	b.n	8009dae <__libc_init_array+0x1e>
 8009dc8:	0800a01c 	.word	0x0800a01c
 8009dcc:	0800a01c 	.word	0x0800a01c
 8009dd0:	0800a01c 	.word	0x0800a01c
 8009dd4:	0800a020 	.word	0x0800a020

08009dd8 <memset>:
 8009dd8:	0003      	movs	r3, r0
 8009dda:	1812      	adds	r2, r2, r0
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d100      	bne.n	8009de2 <memset+0xa>
 8009de0:	4770      	bx	lr
 8009de2:	7019      	strb	r1, [r3, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	e7f9      	b.n	8009ddc <memset+0x4>

08009de8 <_init>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr

08009df4 <_fini>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	46c0      	nop			; (mov r8, r8)
 8009df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	469e      	mov	lr, r3
 8009dfe:	4770      	bx	lr
